{"version":3,"sources":["webpack://prsdigg//home/runner/work/prsdigg/prsdigg/app/packs/channels|sync|/_channel\\.js$/","webpack://prsdigg//home/runner/work/prsdigg/prsdigg/app/packs/src/images|sync|/^\\.\\/.*$/","webpack://prsdigg/./app/packs/channels/index.js","webpack://prsdigg/./app/packs/src/graphql/documents.tsx","webpack://prsdigg/./app/packs/src/shared/components/MarkdownRendererComponent.tsx","webpack://prsdigg/./app/packs/src/shared/constants/index.tsx","webpack://prsdigg/./app/packs/src/shared/contexts/CurrentUserContext.tsx","webpack://prsdigg/./app/packs/src/shared/contexts/PrsdiggContext.tsx","webpack://prsdigg/./app/packs/src/shared/contexts/UserAgentContext.tsx","webpack://prsdigg/./app/packs/src/shared/utils/apolloClient.tsx","webpack://prsdigg/./app/packs/src/shared/utils/hideLoader.ts","webpack://prsdigg/./app/packs/src/shared/utils/mixinContext.ts","webpack://prsdigg/./app/packs/src/shared/index.ts","webpack://prsdigg/./node_modules/prismjs/components|lazy|/^\\.\\/prism\\-.*$/|groupOptions: {}|namespace object"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","id","module","exports","map","webpackContext","webpackContextResolve","__webpack_require__","o","Object","channels","require","forEach","AdminBanUserDocument","gql","useAdminBanUserMutation","baseOptions","Apollo","AdminBlockArticleDocument","useAdminBlockArticleMutation","AdminCreateAnouncementDocument","useAdminCreateAnouncementMutation","AdminCreateBonusDocument","useAdminCreateBonusMutation","AdminDeleteAnouncementDocument","useAdminDeleteAnouncementMutation","AdminDeleteCommentDocument","useAdminDeleteCommentMutation","AdminDeliverAnouncementDocument","useAdminDeliverAnouncementMutation","AdminDeliverBonusDocument","useAdminDeliverBonusMutation","AdminLoginDocument","useAdminLoginMutation","AdminPreviewAnouncementDocument","useAdminPreviewAnouncementMutation","AdminRecoverCommentDocument","useAdminRecoverCommentMutation","AdminUnbanUserDocument","useAdminUnbanUserMutation","AdminUnblockArticleDocument","useAdminUnblockArticleMutation","AdminUpdateAnouncementDocument","useAdminUpdateAnouncementMutation","AdminUpdateBonusDocument","useAdminUpdateBonusMutation","AdminAnnouncementConnectionDocument","useAdminAnnouncementConnectionQuery","ArticleChartDocument","useArticleChartQuery","AdminArticleConnectionDocument","useAdminArticleConnectionQuery","AdminArticleDocument","useAdminArticleQuery","AdminBonusConnectionDocument","useAdminBonusConnectionQuery","AdminMixinMessageConnectionDocument","useAdminMixinMessageConnectionQuery","AdminMixinNetworkSnapshotConnectionDocument","useAdminMixinNetworkSnapshotConnectionQuery","AdminOrderConnectionDocument","useAdminOrderConnectionQuery","AdminPaymentConnectionDocument","useAdminPaymentConnectionQuery","RevenueChartDocument","useRevenueChartQuery","AdminSwapOrderConnectionDocument","useAdminSwapOrderConnectionQuery","AdminTransferConnectionDocument","useAdminTransferConnectionQuery","UserChartDocument","useUserChartQuery","AdminUserConnectionDocument","useAdminUserConnectionQuery","AdminUserDocument","useAdminUserQuery","AdminWalletBalanceDocument","useAdminWalletBalanceQuery","CreateCommentDocument","useCreateCommentMutation","DownvoteArticleDocument","useDownvoteArticleMutation","DownvoteCommentDocument","useDownvoteCommentMutation","ToggleAuthoringSubscribeUserActionDocument","useToggleAuthoringSubscribeUserActionMutation","ToggleCommentingSubscribeArticleActionDocument","useToggleCommentingSubscribeArticleActionMutation","ToggleReadingSubscribeUserActionDocument","useToggleReadingSubscribeUserActionMutation","ToggleSubscribeTagActionDocument","useToggleSubscribeTagActionMutation","UpvoteArticleDocument","useUpvoteArticleMutation","UpvoteCommentDocument","useUpvoteCommentMutation","ArticleConnectionDocument","useArticleConnectionQuery","ArticleDocument","useArticleQuery","CommentConnectionDocument","useCommentConnectionQuery","PaymentDocument","usePaymentLazyQuery","StatisticsDocument","useStatisticsQuery","SwapPreOrderDocument","useSwapPreOrderQuery","TagConnectionDocument","useTagConnectionQuery","TaggedArticleConnectionDocument","useTaggedArticleConnectionQuery","TransferConnectionDocument","useTransferConnectionQuery","UserArticleConnectionDocument","useUserArticleConnectionQuery","UserDocument","useUserQuery","ClearNotificationsDocument","useClearNotificationsMutation","CreateAccessTokenDocument","useCreateAccessTokenMutation","CreateArticleDocument","useCreateArticleMutation","DeleteAccessTokenDocument","useDeleteAccessTokenMutation","HideArticleDocument","useHideArticleMutation","PublishArticleDocument","usePublishArticleMutation","ReadNotificationDocument","useReadNotificationMutation","ReadNotificationsDocument","useReadNotificationsMutation","SwitchLocaleDocument","useSwitchLocaleMutation","UpdateArticleDocument","useUpdateArticleMutation","UpdateNotificationSettingDocument","useUpdateNotificationSettingMutation","MyAccessTokenConnectionDocument","useMyAccessTokenConnectionQuery","MyArticleConnectionDocument","useMyArticleConnectionQuery","MyArticleOrderConnectionDocument","useMyArticleOrderConnectionQuery","MyArticleDocument","useMyArticleQuery","MyAuthoringSubscriptionConnectionDocument","useMyAuthoringSubscriptionConnectionQuery","MyCommentingSubscriptionConnectionDocument","useMyCommentingSubscriptionConnectionQuery","MyNotificationConnectionDocument","useMyNotificationConnectionQuery","MyNotificationSettingDocument","useMyNotificationSettingQuery","MyPaymentConnectionDocument","useMyPaymentConnectionQuery","MyReadingSubscriptionConnectionDocument","useMyReadingSubscriptionConnectionQuery","MyStatisticsDocument","useMyStatisticsQuery","MySwapOrderConnectionDocument","useMySwapOrderConnectionQuery","MyTagSubscriptionConnectionDocument","useMyTagSubscriptionConnectionQuery","MyTransferConnectionDocument","useMyTransferConnectionQuery","PricableCurrenciesDocument","usePricableCurrenciesQuery","MarkdownRendererComponent","props","source","transformLinkUri","uri","protocols","url","trim","first","charAt","colon","indexOf","length","index","protocol","slice","toLowerCase","renderers","image","src","alt","wrapperClassName","className","preview","paragraph","node","otherProps","children","FOXSWAP_APP_ID","FOXSWAP_CODE_ID","CurrentUserContext","React","useCurrentUser","useContext","PrsdiggContext","usePrsdigg","UserAgentContext","useUserAgent","customizedConnectionMergeFunction","keyArgs","merge","existing","incoming","args","after","pageInfo","endCursor","nodes","apolloClient","csrfToken","cache","InMemoryCache","typePolicies","Query","fields","adminAnnouncementConnection","adminArticleConnection","adminBonusConnection","adminMixinMessageConnection","adminMixinNetworkSnapshotConnection","adminOrderConnection","adminPaymentConnection","adminSwapOrderConnection","adminTransferConnection","adminUserConnection","articleConnection","commentConnection","myAccessTokenConnection","myAuthoringSubscriptionConnection","myReadingSubscriptionConnection","myCommentingSubscriptionConnection","myNotificationConnection","myTransferConnection","myArticleOrderConnection","mySwapOrderConnection","myPaymentConnection","myArticleConnection","userArticleConnection","tagConnection","transferConnection","ApolloClient","credentials","headers","document","querySelector","content","hideLoader","ele","Boolean","style","display","ctx","mixinContext","window","webkit","messageHandlers","MixinContext","JSON","parse","prompt","platform","getContext","appVersion","app_version","conversationId","conversation_id","imagePath","name","webpackAsyncContext","Promise","then","ids","all","t"],"mappings":"uFAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BA,EAAoBO,GAAK,KACzBC,EAAOC,QAAUT,G,gHCRjB,IAAIU,EAAM,CACT,aAAc,OAIf,SAASC,EAAeV,GACvB,IAAIM,EAAKK,EAAsBX,GAC/B,OAAOY,EAAoBN,GAE5B,SAASK,EAAsBX,GAC9B,IAAIY,EAAoBC,EAAEJ,EAAKT,GAAM,CACpC,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEP,OAAOQ,EAAIT,GAEZU,EAAeN,KAAO,WACrB,OAAOU,OAAOV,KAAKK,IAEpBC,EAAeL,QAAUM,EACzBJ,EAAOC,QAAUE,EACjBA,EAAeJ,GAAK,O,sBCnBpB,IAAMS,EAAWC,QACjBD,EAASX,OAAOa,QAAQF,I,gwECgwDjB,IAAMG,IAAuBC,SAAH,uJA2B1B,SAASC,GAAwBC,GAChC,OAAOC,eAAwEJ,GAAsBG,GAKtG,IAAME,IAA4BJ,SAAH,6KA4B/B,SAASK,GAA6BH,GACrC,OAAOC,eAAkFC,GAA2BF,GAKrH,IAAMI,IAAiCN,SAAH,yLA2BpC,SAASO,GAAkCL,GAC1C,OAAOC,eAA4FG,GAAgCJ,GAKpI,IAAMM,IAA2BR,SAAH,wJA0B9B,SAASS,GAA4BP,GACpC,OAAOC,eAAgFK,GAA0BN,GAKlH,IAAMQ,IAAiCV,SAAH,yLA2BpC,SAASW,GAAkCT,GAC1C,OAAOC,eAA4FO,GAAgCR,GAKpI,IAAMU,IAA6BZ,SAAH,2KA2BhC,SAASa,GAA8BX,GACtC,OAAOC,eAAoFS,GAA4BV,GAKxH,IAAMY,IAAkCd,SAAH,4LA2BrC,SAASe,GAAmCb,GAC3C,OAAOC,eAA8FW,GAAiCZ,GAKvI,IAAMc,IAA4BhB,SAAH,mKA2B/B,SAASiB,GAA6Bf,GACrC,OAAOC,eAAkFa,GAA2Bd,GAKrH,IAAMgB,IAAqBlB,SAAH,mJA2BxB,SAASmB,GAAsBjB,GAC9B,OAAOC,eAAoEe,GAAoBhB,GAKhG,IAAMkB,IAAkCpB,SAAH,4LA2BrC,SAASqB,GAAmCnB,GAC3C,OAAOC,eAA8FiB,GAAiClB,GAKvI,IAAMoB,IAA8BtB,SAAH,8KA2BjC,SAASuB,GAA+BrB,GACvC,OAAOC,eAAsFmB,GAA6BpB,GAK3H,IAAMsB,IAAyBxB,SAAH,6JA2B5B,SAASyB,GAA0BvB,GAClC,OAAOC,eAA4EqB,GAAwBtB,GAK5G,IAAMwB,IAA8B1B,SAAH,mLA4BjC,SAAS2B,GAA+BzB,GACvC,OAAOC,eAAsFuB,GAA6BxB,GAK3H,IAAM0B,IAAiC5B,SAAH,yLA2BpC,SAAS6B,GAAkC3B,GAC1C,OAAOC,eAA4FyB,GAAgC1B,GAKpI,IAAM4B,IAA2B9B,SAAH,wJA0B9B,SAAS+B,GAA4B7B,GACpC,OAAOC,eAAgF2B,GAA0B5B,GAKlH,IAAM8B,IAAsChC,SAAH,oTAmCzC,SAASiC,GAAoC/B,GAC5C,OAAOC,YAA6F6B,GAAqC9B,GAQ1I,IAAMgC,IAAuBlC,SAAH,oEAqB1B,SAASmC,GAAqBjC,GAC7B,OAAOC,YAA+D+B,GAAsBhC,GAQ7F,IAAMkC,IAAiCpC,SAAH,ylBAsDpC,SAASqC,GAA+BnC,GACvC,OAAOC,YAAmFiC,GAAgClC,GAQ3H,IAAMoC,IAAuBtC,SAAH,kSAsC1B,SAASuC,GAAqBrC,GAC7B,OAAOC,YAA+DmC,GAAsBpC,GAQ7F,IAAMsC,IAA+BxC,SAAH,kbA6ClC,SAASyC,GAA6BvC,GACrC,OAAOC,YAA+EqC,GAA8BtC,GAQrH,IAAMwC,IAAsC1C,SAAH,wXAwCzC,SAAS2C,GAAoCzC,GAC5C,OAAOC,YAA6FuC,GAAqCxC,GAQ1I,IAAM0C,IAA8C5C,SAAH,qmBAuDjD,SAAS6C,GAA4C3C,GACpD,OAAOC,YAA6GyC,GAA6C1C,GAQlK,IAAM4C,IAA+B9C,SAAH,omBAsDlC,SAAS+C,GAA6B7C,GACrC,OAAOC,YAA+E2C,GAA8B5C,GAQrH,IAAM8C,IAAiChD,SAAH,2eAgDpC,SAASiD,GAA+B/C,GACvC,OAAOC,YAAmF6C,GAAgC9C,GAQ3H,IAAMgD,IAAuBlD,SAAH,oEAqB1B,SAASmD,GAAqBjD,GAC7B,OAAOC,YAA+D+C,GAAsBhD,GAQ7F,IAAMkD,IAAmCpD,SAAH,kqBA2DtC,SAASqD,GAAiCnD,GACzC,OAAOC,YAAuFiD,GAAkClD,GAQjI,IAAMoD,IAAkCtD,SAAH,4rBA2DrC,SAASuD,GAAgCrD,GACxC,OAAOC,YAAqFmD,GAAiCpD,GAQ9H,IAAMsD,IAAoBxD,SAAH,8DAqBvB,SAASyD,GAAkBvD,GAC1B,OAAOC,YAAyDqD,GAAmBtD,GAQpF,IAAMwD,IAA8B1D,SAAH,wiBAkDjC,SAAS2D,GAA4BzD,GACpC,OAAOC,YAA6EuD,GAA6BxD,GAQlH,IAAM0D,IAAoB5D,SAAH,mSAmCvB,SAAS6D,GAAkB3D,GAC1B,OAAOC,YAAyDyD,GAAmB1D,GAQpF,IAAM4D,IAA6B9D,SAAH,kNA8BhC,SAAS+D,GAA2B7D,GACnC,OAAOC,YAA2E2D,GAA4B5D,GAQ/G,IAAM8D,IAAwBhE,SAAH,+MA8B3B,SAASiE,GAAyB/D,GACjC,OAAOC,eAA0E6D,GAAuB9D,GAKzG,IAAMgE,IAA0BlE,SAAH,8NA+B7B,SAASmE,GAA2BjE,GACnC,OAAOC,eAA8E+D,GAAyBhE,GAK/G,IAAMkE,IAA0BpE,SAAH,oNA8B7B,SAASqE,GAA2BnE,GACnC,OAAOC,eAA8EiE,GAAyBlE,GAK/G,IAAMoE,IAA6CtE,SAAH,8MA0BhD,SAASuE,GAA8CrE,GACtD,OAAOC,eAAoHmE,GAA4CpE,GAKxK,IAAMsE,IAAiDxE,SAAH,2PA4BpD,SAASyE,GAAkDvE,GAC1D,OAAOC,eAA4HqE,GAAgDtE,GAKpL,IAAMwE,IAA2C1E,SAAH,wMA0B9C,SAAS2E,GAA4CzE,GACpD,OAAOC,eAAgHuE,GAA0CxE,GAKlK,IAAM0E,IAAmC5E,SAAH,mNA4BtC,SAAS6E,GAAoC3E,GAC5C,OAAOC,eAAgGyE,GAAkC1E,GAK1I,IAAM4E,IAAwB9E,SAAH,wNA+B3B,SAAS+E,GAAyB7E,GACjC,OAAOC,eAA0E2E,GAAuB5E,GAKzG,IAAM8E,IAAwBhF,SAAH,8MA8B3B,SAASiF,GAAyB/E,GACjC,OAAOC,eAA0E6E,GAAuB9E,GAKzG,IAAMgF,IAA4BlF,SAAH,upBA0D/B,SAASmF,GAA0BjF,GAClC,OAAOC,YAAyE+E,GAA2BhF,GAQ5G,IAAMkF,IAAkBpF,SAAH,i9BAuFrB,SAASqF,GAAgBnF,GACxB,OAAOC,YAAqDiF,GAAiBlF,GAQ9E,IAAMoF,IAA4BtF,SAAH,otBA0D/B,SAASuF,GAA0BrF,GAClC,OAAOC,YAAyEmF,GAA2BpF,GAQ5G,IAAMsF,IAAkBxF,SAAH,oJA8BrB,SAASyF,GAAoBvF,GAC1B,OAAOC,gBAAyDqF,GAAiBtF,GAKpF,IAAMwF,IAAqB1F,SAAH,0JA0BxB,SAAS2F,GAAmBzF,GAC3B,OAAOC,YAA2DuF,GAAoBxF,GAQvF,IAAM0F,IAAuB5F,SAAH,mVAqC1B,SAAS6F,GAAqB3F,GAC7B,OAAOC,YAA+DyF,GAAsB1F,GAQ7F,IAAM4F,IAAwB9F,SAAH,oQAkC3B,SAAS+F,GAAsB7F,GAC9B,OAAOC,YAAiE2F,GAAuB5F,GAQhG,IAAM8F,IAAkChG,SAAH,yyBAmErC,SAASiG,GAAgC/F,GACxC,OAAOC,YAAqF6F,GAAiC9F,GAQ9H,IAAMgG,IAA6BlG,SAAH,qXAwChC,SAASmG,GAA2BjG,GACnC,OAAOC,YAA2E+F,GAA4BhG,GAQ/G,IAAMkG,IAAgCpG,SAAH,ubA2CnC,SAASqG,GAA8BnG,GACtC,OAAOC,YAAiFiG,GAA+BlG,GAQxH,IAAMoG,IAAetG,SAAH,2TAoClB,SAASuG,GAAarG,GACrB,OAAOC,YAA+CmG,GAAcpG,GAQrE,IAAMsG,IAA6BxG,SAAH,8IAwBhC,SAASyG,GAA8BvG,GACtC,OAAOC,eAAoFqG,GAA4BtG,GAKxH,IAAMwG,IAA4B1G,SAAH,+KA4B/B,SAAS2G,GAA6BzG,GACrC,OAAOC,eAAkFuG,GAA2BxG,GAKrH,IAAM0G,IAAwB5G,SAAH,iJA0B3B,SAAS6G,GAAyB3G,GACjC,OAAOC,eAA0EyG,GAAuB1G,GAKzG,IAAM4G,IAA4B9G,SAAH,2IAwB/B,SAAS+G,GAA6B7G,GACrC,OAAOC,eAAkF2G,GAA2B5G,GAKrH,IAAM8G,IAAsBhH,SAAH,wJA2BzB,SAASiH,GAAuB/G,GAC/B,OAAOC,eAAsE6G,GAAqB9G,GAKnG,IAAMgH,IAAyBlH,SAAH,iKA2B5B,SAASmH,GAA0BjH,GAClC,OAAOC,eAA4E+G,GAAwBhH,GAK5G,IAAMkH,IAA2BpH,SAAH,mKA2B9B,SAASqH,GAA4BnH,GACpC,OAAOC,eAAgFiH,GAA0BlH,GAKlH,IAAMoH,IAA4BtH,SAAH,2IAwB/B,SAASuH,GAA6BrH,GACrC,OAAOC,eAAkFmH,GAA2BpH,GAKrH,IAAMsH,IAAuBxH,SAAH,4HAwB1B,SAASyH,GAAwBvH,GAChC,OAAOC,eAAwEqH,GAAsBtH,GAKtG,IAAMwH,IAAwB1H,SAAH,iJA0B3B,SAAS2H,GAAyBzH,GACjC,OAAOC,eAA0EuH,GAAuBxH,GAKzG,IAAM0H,IAAoC5H,SAAH,qqBA6CvC,SAAS6H,GAAqC3H,GAC7C,OAAOC,eAAkGyH,GAAmC1H,GAK7I,IAAM4H,IAAkC9H,SAAH,0SAkCrC,SAAS+H,GAAgC7H,GACxC,OAAOC,YAAqF2H,GAAiC5H,GAQ9H,IAAM8H,IAA8BhI,SAAH,mZA0CjC,SAASiI,GAA4B/H,GACpC,OAAOC,YAA6E6H,GAA6B9H,GAQlH,IAAMgI,IAAmClI,SAAH,yeA6CtC,SAASmI,GAAiCjI,GACzC,OAAOC,YAAuF+H,GAAkChI,GAQjI,IAAMkI,IAAoBpI,SAAH,wtBAkEvB,SAASqI,GAAkBnI,GAC1B,OAAOC,YAAyDiI,GAAmBlI,GAQpF,IAAMoI,IAA4CtI,SAAH,yXAsC/C,SAASuI,GAA0CrI,GAClD,OAAOC,YAAyGmI,GAA2CpI,GAQ5J,IAAMsI,IAA6CxI,SAAH,kWAsChD,SAASyI,GAA2CvI,GACnD,OAAOC,YAA2GqI,GAA4CtI,GAQ/J,IAAMwI,IAAmC1I,SAAH,8TAoCtC,SAAS2I,GAAiCzI,GACzC,OAAOC,YAAuFuI,GAAkCxI,GAQjI,IAAM0I,IAAgC5I,SAAH,0lBA0CnC,SAAS6I,GAA8B3I,GACtC,OAAOC,YAAiFyI,GAA+B1I,GAQxH,IAAM4I,IAA8B9I,SAAH,mfAgDjC,SAAS+I,GAA4B7I,GACpC,OAAOC,YAA6E2I,GAA6B5I,GAQlH,IAAM8I,IAA0ChJ,SAAH,2XAsC7C,SAASiJ,GAAwC/I,GAChD,OAAOC,YAAqG6I,GAAyC9I,GAQtJ,IAAMgJ,IAAuBlJ,SAAH,2RA8B1B,SAASmJ,GAAqBjJ,GAC7B,OAAOC,YAA+D+I,GAAsBhJ,GAQ7F,IAAMkJ,IAAgCpJ,SAAH,qiBAoDnC,SAASqJ,GAA8BnJ,GACtC,OAAOC,YAAiFiJ,GAA+BlJ,GAQxH,IAAMoJ,IAAsCtJ,SAAH,ySAkCzC,SAASuJ,GAAoCrJ,GAC5C,OAAOC,YAA6FmJ,GAAqCpJ,GAQ1I,IAAMsJ,IAA+BxJ,SAAH,seA6ClC,SAASyJ,GAA6BvJ,GACrC,OAAOC,YAA+EqJ,GAA8BtJ,GAQrH,IAAMwJ,IAA6B1J,SAAH,6KA6BhC,SAAS2J,GAA2BzJ,GACnC,OAAOC,YAA2EuJ,GAA4BxJ,K,swBC9gK/G,SAAS0J,EAA0BC,GACxC,OACE,gBAAC,cAAD,CACEC,OAAQD,EAAMC,OACdC,iBAAkB,SAACC,GAGjB,IAAMC,EAAY,CAAC,OAAQ,QAAS,SAAU,MAAO,SAC/CC,GAAOF,GAAO,IAAIG,OAClBC,EAAQF,EAAIG,OAAO,GAEzB,GAAc,MAAVD,GAA2B,MAAVA,EACnB,OAAOF,EAGT,IAAMI,EAAQJ,EAAIK,QAAQ,KAC1B,IAAe,IAAXD,EACF,OAAOJ,EAMT,IAHA,IAAMM,EAASP,EAAUO,OACrBC,GAAS,IAEJA,EAAQD,GAAQ,CACvB,IAAME,EAAWT,EAAUQ,GAE3B,GACEH,IAAUI,EAASF,QACnBN,EAAIS,MAAM,EAAGD,EAASF,QAAQI,gBAAkBF,EAEhD,OAAOR,EAKX,OAAe,KADfO,EAAQP,EAAIK,QAAQ,OACAD,EAAQG,IAKb,KADfA,EAAQP,EAAIK,QAAQ,OACAD,EAAQG,EAJnBP,EAQF,sBAETW,UAAW,CACTC,MAAO,gBAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,IAAR,OACL,qBACEC,iBAAiB,SACjBC,UAAU,2BACVC,SAAS,EACTH,IAAKA,EACLD,IAAKA,KAGTK,UAAW,cAAGC,KAAH,IAAYC,EAAZ,qBACT,uBAAKJ,UAAU,QAAQI,EAAWC,cC7DrC,IAAMC,EAAiB,uCACjBC,EAAkB,uCCCxB,IAAMC,EAAqBC,gBAAoB,MAC/C,SAASC,IACd,OAAOC,gBAAWH,GCFb,IAAMI,EAAiBH,gBAAoB,MAC3C,SAASI,IACd,OAAOF,gBAAWC,GCFb,IAAME,EAAmBL,gBAAoB,MAC7C,SAASM,IACd,OAAOJ,gBAAWG,G,ssBCFpB,IAAME,EAAoC,SACxCC,GAKA,YADG,IAJHA,OAA4B,GAKrB,CACLA,UACAC,MAFK,SAECC,EAAeC,EAFhB,GAE0C,IAAD,EAARC,EAAQ,EAARA,KACpC,IAAQ,MAAJA,OAAA,EAAAA,EAAMC,UAAN,MAAgBH,GAAhB,SAAgBA,EAAUI,eAA1B,EAAgB,EAAoBC,WAAW,CACjD,IAAMC,EAAQN,EAAQ,UAAOA,EAASM,OAAS,GAC/C,OAAO,EAAP,KACKL,GADL,IAEEK,MAAM,GAAD,OAAMA,EAAUL,EAASK,SAGhC,OAAOL,KAMFM,EAAe,SAAC5C,EAAa6C,GACxC,IAAMC,EAAQ,IAAIC,KAAc,CAC9BC,aAAc,CACZC,MAAO,CACLC,OAAQ,CACNC,4BAA6BjB,IAC7BkB,uBAAwBlB,EAAkC,CACxD,QACA,UAEFmB,qBAAsBnB,IACtBoB,4BAA6BpB,IAC7BqB,oCAAqCrB,EACnC,CAAC,SAAU,WAEbsB,qBAAsBtB,EAAkC,CACtD,SACA,aAEFuB,uBAAwBvB,IACxBwB,yBAA0BxB,IAC1ByB,wBAAyBzB,EAAkC,CACzD,SACA,WACA,WACA,eAEF0B,oBAAqB1B,EAAkC,CACrD,SACA,QACA,YAEF2B,kBAAmB3B,EAAkC,CACnD,QACA,QACA,UAEF4B,kBAAmB5B,EAAkC,CACnD,gBACA,kBACA,gBACA,YAEF6B,wBAAyB7B,IACzB8B,kCAAmC9B,IACnC+B,gCAAiC/B,IACjCgC,mCAAoChC,IACpCiC,yBAA0BjC,IAC1BkC,qBAAsBlC,EAAkC,CACtD,iBAEFmC,yBAA0BnC,EAAkC,CAC1D,OACA,cAEFoC,sBAAuBpC,IACvBqC,oBAAqBrC,IACrBsC,oBAAqBtC,EAAkC,CAAC,SACxDuC,sBAAuBvC,EAAkC,CACvD,OACA,YAEFwC,cAAexC,IACfyC,mBAAoBzC,SAM5B,OAAO,IAAI0C,KAAa,CACtB5E,MACA8C,QACA+B,YAAa,cACbC,QAAS,CACP,eAAgB,mBAChB,eACEjC,IACEkC,SAASC,cAAc,4BAAsC,IAC5DC,YCtGJ,SAASC,IACd,IAAMC,EAAWJ,SAASC,cAAc,mBACpCI,QAAQD,KACVA,EAAIE,MAAMC,QAAU,Q,SCHxB,IAmBMC,EAoBOC,GApBPD,EAAW,GAEZE,OAAeC,QACfD,OAAeC,OAAOC,iBACtBF,OAAeC,OAAOC,gBAAgBC,cAEvCL,EAAMM,KAAKC,MAAMC,OAAO,+BACpBC,SAAWT,EAAIS,UAAY,MAE9BP,OAAeG,cACmC,oBAA3CH,OAAeG,aAAaK,cAEpCV,EAAMM,KAAKC,MAAOL,OAAeG,aAAaK,eAC1CD,SAAWT,EAAIS,UAAY,WAEjCT,EAAIW,WAAaX,EAAIY,YACrBZ,EAAIa,eAAiBb,EAAIc,gBAClBd,GC/BIe,EAAY,SAACC,GAAD,OAAkB1Q,SAAQ,KAAc0Q,K,sBCLjE,IAAIjR,EAAM,CACT,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,KACA,MAED,sBAAuB,CACtB,KACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,0BAA2B,CAC1B,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,8BAA+B,CAC9B,MACA,MAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,aAAc,CACb,MACA,MAED,gBAAiB,CAChB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,KACA,MAED,wBAAyB,CACxB,KACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,yBAA0B,CACzB,MACA,MAED,4BAA6B,CAC5B,MACA,MAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,yBAA0B,CACzB,MACA,MAED,0BAA2B,CAC1B,MACA,MAED,6BAA8B,CAC7B,MACA,MAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,yBAA0B,CACzB,MACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,mBAAoB,CACnB,MACA,KAED,sBAAuB,CACtB,MACA,KAED,uBAAwB,CACvB,MACA,MAED,0BAA2B,CAC1B,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,yBAA0B,CACzB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,yBAA0B,CACzB,IACA,KAED,4BAA6B,CAC5B,IACA,KAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,MACA,IAED,wBAAyB,CACxB,MACA,IAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,uBAAwB,CACvB,MACA,MAED,0BAA2B,CAC1B,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,8BAA+B,CAC9B,MACA,MAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,YAAa,CACZ,KACA,MAED,eAAgB,CACf,KACA,MAED,gBAAiB,CAChB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,cAAe,CACd,KACA,MAED,iBAAkB,CACjB,KACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,yBAA0B,CACzB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,0BAA2B,CAC1B,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,8BAA+B,CAC9B,MACA,MAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,wBAAyB,CACxB,KACA,MAED,2BAA4B,CAC3B,KACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,KACA,MAED,sBAAuB,CACtB,KACA,MAED,cAAe,CACd,KACA,MAED,iBAAkB,CACjB,KACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,yBAA0B,CACzB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,cAAe,CACd,KACA,MAED,iBAAkB,CACjB,KACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,cAAe,CACd,MACA,MAED,qBAAsB,CACrB,MACA,KAED,wBAAyB,CACxB,MACA,KAED,yBAA0B,CACzB,MACA,MAED,4BAA6B,CAC5B,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,iBAAkB,CACjB,MACA,KAED,oBAAqB,CACpB,MACA,KAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,YAAa,CACZ,MACA,MAED,eAAgB,CACf,MACA,MAED,gBAAiB,CAChB,KACA,MAED,mBAAoB,CACnB,KACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,KAED,sBAAuB,CACtB,MACA,KAED,cAAe,CACd,KACA,KAED,iBAAkB,CACjB,KACA,KAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,eAAgB,CACf,MACA,KAED,kBAAmB,CAClB,MACA,KAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,4BAA6B,CAC5B,MACA,MAED,+BAAgC,CAC/B,MACA,MAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,0BAA2B,CAC1B,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,8BAA+B,CAC9B,MACA,MAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,KACA,MAED,wBAAyB,CACxB,KACA,MAED,cAAe,CACd,MACA,IAED,iBAAkB,CACjB,MACA,IAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,KACA,KAED,qBAAsB,CACrB,KACA,KAED,iBAAkB,CACjB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,4BAA6B,CAC5B,MACA,MAED,+BAAgC,CAC/B,MACA,MAED,iBAAkB,CACjB,MACA,KAED,oBAAqB,CACpB,MACA,KAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,mCAAoC,CACnC,KACA,MAED,sCAAuC,CACtC,KACA,MAED,uCAAwC,CACvC,MACA,MAED,0CAA2C,CAC1C,MACA,MAED,eAAgB,CACf,KACA,MAED,kBAAmB,CAClB,KACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,sBAAuB,CACtB,MACA,KAED,yBAA0B,CACzB,MACA,KAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,oBAAqB,CACpB,KACA,MAED,uBAAwB,CACvB,KACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,uBAAwB,CACvB,MACA,KAED,0BAA2B,CAC1B,MACA,KAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,yBAA0B,CACzB,MACA,MAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,aAAc,CACb,MACA,MAED,gBAAiB,CAChB,MACA,MAED,iBAAkB,CACjB,MACA,KAED,oBAAqB,CACpB,MACA,KAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,yBAA0B,CACzB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,qBAAsB,CACrB,MACA,KAED,wBAAyB,CACxB,MACA,KAED,yBAA0B,CACzB,MACA,MAED,4BAA6B,CAC5B,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,yBAA0B,CACzB,MACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,KAED,sBAAuB,CACtB,MACA,KAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,KACA,MAED,qBAAsB,CACrB,KACA,MAED,eAAgB,CACf,KACA,MAED,kBAAmB,CAClB,KACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,eAAgB,CACf,MACA,IAED,kBAAmB,CAClB,MACA,IAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,iBAAkB,CACjB,MACA,KAED,oBAAqB,CACpB,MACA,KAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,yBAA0B,CACzB,MACA,MAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,aAAc,CACb,MACA,MAED,gBAAiB,CAChB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,YAAa,CACZ,MACA,MAED,eAAgB,CACf,MACA,MAED,gBAAiB,CAChB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,yBAA0B,CACzB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,yBAA0B,CACzB,MACA,MAED,0BAA2B,CAC1B,MACA,MAED,6BAA8B,CAC7B,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,yBAA0B,CACzB,MACA,KAED,4BAA6B,CAC5B,MACA,KAED,yBAA0B,CACzB,MACA,MAED,4BAA6B,CAC5B,MACA,MAED,6BAA8B,CAC7B,MACA,MAED,gCAAiC,CAChC,MACA,MAED,gBAAiB,CAChB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,aAAc,CACb,MACA,MAED,gBAAiB,CAChB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,uBAAwB,CACvB,MACA,MAED,0BAA2B,CAC1B,MACA,MAED,2BAA4B,CAC3B,KACA,MAED,8BAA+B,CAC9B,KACA,MAED,gBAAiB,CAChB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,KACA,MAED,sBAAuB,CACtB,KACA,MAED,gBAAiB,CAChB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,0BAA2B,CAC1B,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,8BAA+B,CAC9B,MACA,MAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,gBAAiB,CAChB,MACA,KAED,mBAAoB,CACnB,MACA,KAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,0BAA2B,CAC1B,MACA,MAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,yBAA0B,CACzB,MACA,MAED,4BAA6B,CAC5B,MACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,sBAAuB,CACtB,MACA,IAED,yBAA0B,CACzB,MACA,IAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,0BAA2B,CAC1B,MACA,MAED,mBAAoB,CACnB,OAED,sBAAuB,CACtB,OAED,uBAAwB,CACvB,MACA,IAED,0BAA2B,CAC1B,MACA,IAED,iBAAkB,CACjB,OAED,4BAA6B,CAC5B,MACA,MAED,+BAAgC,CAC/B,MACA,MAED,gCAAiC,CAChC,MACA,MAED,mCAAoC,CACnC,MACA,MAED,oBAAqB,CACpB,OAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,yBAA0B,CACzB,MACA,MAED,iBAAkB,CACjB,MACA,KAED,oBAAqB,CACpB,MACA,KAED,qBAAsB,CACrB,KACA,MAED,wBAAyB,CACxB,KACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,yBAA0B,CACzB,MACA,MAED,4BAA6B,CAC5B,MACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,KAED,sBAAuB,CACtB,MACA,KAED,0BAA2B,CAC1B,MACA,KAED,6BAA8B,CAC7B,MACA,KAED,8BAA+B,CAC9B,MACA,MAED,iCAAkC,CACjC,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,yBAA0B,CACzB,MACA,MAED,4BAA6B,CAC5B,MACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,KAED,sBAAuB,CACtB,MACA,KAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,yBAA0B,CACzB,MACA,MAED,4BAA6B,CAC5B,MACA,MAED,gBAAiB,CAChB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,aAAc,CACb,IACA,KAED,gBAAiB,CAChB,IACA,KAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,MACA,KAED,wBAAyB,CACxB,MACA,KAED,iBAAkB,CACjB,MACA,KAED,oBAAqB,CACpB,MACA,KAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,wBAAyB,CACxB,KACA,KAED,2BAA4B,CAC3B,KACA,KAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,yBAA0B,CACzB,MACA,MAED,4BAA6B,CAC5B,MACA,MAED,eAAgB,CACf,MACA,KAED,kBAAmB,CAClB,MACA,KAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,cAAe,CACd,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,yBAA0B,CACzB,MACA,MAED,4BAA6B,CAC5B,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,yBAA0B,CACzB,MACA,MAED,4BAA6B,CAC5B,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,yBAA0B,CACzB,MACA,MAED,4BAA6B,CAC5B,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,yBAA0B,CACzB,MACA,MAED,4BAA6B,CAC5B,MACA,MAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,yBAA0B,CACzB,MACA,MAED,4BAA6B,CAC5B,MACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,0BAA2B,CAC1B,MACA,MAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,eAAgB,CACf,KACA,MAED,kBAAmB,CAClB,KACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,yBAA0B,CACzB,MACA,MAED,4BAA6B,CAC5B,MACA,MAED,iBAAkB,CACjB,MACA,KAED,oBAAqB,CACpB,MACA,KAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,YAAa,CACZ,MACA,MAED,eAAgB,CACf,MACA,MAED,gBAAiB,CAChB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,YAAa,CACZ,MACA,MAED,eAAgB,CACf,MACA,MAED,gBAAiB,CAChB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,cAAe,CACd,MACA,KAED,iBAAkB,CACjB,MACA,KAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,0BAA2B,CAC1B,MACA,MAED,yBAA0B,CACzB,MACA,MAED,4BAA6B,CAC5B,MACA,MAED,6BAA8B,CAC7B,KACA,MAED,gCAAiC,CAChC,KACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,eAAgB,CACf,MACA,KAED,kBAAmB,CAClB,MACA,KAED,mBAAoB,CACnB,MACA,KAED,sBAAuB,CACtB,MACA,KAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,KACA,MAED,qBAAsB,CACrB,KACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,KACA,MAED,sBAAuB,CACtB,KACA,MAED,wBAAyB,CACxB,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,4BAA6B,CAC5B,MACA,MAED,+BAAgC,CAC/B,MACA,MAED,gBAAiB,CAChB,MACA,KAED,mBAAoB,CACnB,MACA,KAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,wBAAyB,CACxB,KACA,MAED,2BAA4B,CAC3B,KACA,MAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,cAAe,CACd,KACA,MAED,iBAAkB,CACjB,KACA,MAED,kBAAmB,CAClB,MACA,KAED,qBAAsB,CACrB,MACA,KAED,mBAAoB,CACnB,MACA,KAED,sBAAuB,CACtB,MACA,KAED,uBAAwB,CACvB,KACA,MAED,0BAA2B,CAC1B,KACA,MAED,wBAAyB,CACxB,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,4BAA6B,CAC5B,MACA,MAED,+BAAgC,CAC/B,MACA,MAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,yBAA0B,CACzB,MACA,MAED,4BAA6B,CAC5B,MACA,MAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,gBAAiB,CAChB,MACA,KAED,mBAAoB,CACnB,MACA,KAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,gBAAiB,CAChB,MACA,KAED,mBAAoB,CACnB,MACA,KAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,4BAA6B,CAC5B,MACA,MAED,+BAAgC,CAC/B,MACA,MAED,gBAAiB,CAChB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,cAAe,CACd,KACA,MAED,iBAAkB,CACjB,KACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,kBAAmB,CAClB,MACA,IAED,qBAAsB,CACrB,MACA,IAED,sBAAuB,CACtB,MACA,MAED,yBAA0B,CACzB,MACA,MAED,eAAgB,CACf,KACA,MAED,kBAAmB,CAClB,KACA,MAED,mBAAoB,CACnB,MACA,KAED,sBAAuB,CACtB,MACA,KAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,MACA,IAED,wBAAyB,CACxB,MACA,IAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,yBAA0B,CACzB,MACA,MAED,4BAA6B,CAC5B,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,yBAA0B,CACzB,MACA,MAED,4BAA6B,CAC5B,MACA,MAED,uBAAwB,CACvB,MACA,KAED,0BAA2B,CAC1B,MACA,KAED,2BAA4B,CAC3B,MACA,MAED,8BAA+B,CAC9B,MACA,MAED,eAAgB,CACf,MACA,IAED,kBAAmB,CAClB,MACA,IAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,gBAAiB,CAChB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,mBAAoB,CACnB,MACA,KAED,sBAAuB,CACtB,MACA,KAED,uBAAwB,CACvB,MACA,MAED,0BAA2B,CAC1B,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,yBAA0B,CACzB,MACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,cAAe,CACd,MACA,MAED,iBAAkB,CACjB,MACA,MAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,uBAAwB,CACvB,MACA,MAED,0BAA2B,CAC1B,MACA,MAED,2BAA4B,CAC3B,MACA,MAED,8BAA+B,CAC9B,MACA,MAED,qBAAsB,CACrB,MACA,GAED,wBAAyB,CACxB,MACA,GAED,yBAA0B,CACzB,MACA,KAED,4BAA6B,CAC5B,MACA,KAED,eAAgB,CACf,KACA,MAED,kBAAmB,CAClB,KACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,gBAAiB,CAChB,MACA,KAED,mBAAoB,CACnB,MACA,KAED,oBAAqB,CACpB,MACA,KAED,uBAAwB,CACvB,MACA,KAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,yBAA0B,CACzB,MACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,iBAAkB,CACjB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,qBAAsB,CACrB,MACA,MAED,wBAAyB,CACxB,MACA,MAED,eAAgB,CACf,MACA,MAED,kBAAmB,CAClB,MACA,MAED,mBAAoB,CACnB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,eAAgB,CACf,KACA,MAED,kBAAmB,CAClB,KACA,MAED,mBAAoB,CACnB,KACA,MAED,sBAAuB,CACtB,KACA,MAED,cAAe,CACd,IACA,KAED,iBAAkB,CACjB,IACA,KAED,kBAAmB,CAClB,MACA,MAED,qBAAsB,CACrB,MACA,OAGF,SAASkR,EAAoB3R,GAC5B,IAAIY,EAAoBC,EAAEJ,EAAKT,GAC9B,OAAO4R,QAAQvR,UAAUwR,MAAK,WAC7B,IAAI5R,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,KAIR,IAAI6R,EAAMrR,EAAIT,GAAMM,EAAKwR,EAAI,GAC7B,OAAOF,QAAQG,IAAID,EAAIhG,MAAM,GAAGrL,IAAIG,EAAoBX,IAAI4R,MAAK,WAChE,OAAOjR,EAAoBoR,EAAE1R,EAAI,MAGnCqR,EAAoBvR,KAAO,WAAa,OAAOU,OAAOV,KAAKK,IAC3DkR,EAAoBrR,GAAK,MACzBC,EAAOC,QAAUmR","file":"js/6174-87e1bf93d92ded5583e8.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 9391;\nmodule.exports = webpackEmptyContext;","var map = {\n\t\"./logo.svg\": 19355\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 39016;","// Load all the channels within this directory and all subdirectories.\n// Channel files must be named *_channel.js.\n\nconst channels = require.context('.', true, /_channel\\.js$/);\nchannels.keys().forEach(channels);\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** An ISO 8601-encoded datetime */\n  ISO8601DateTime: any;\n};\n\nexport type AccessToken = {\n  __typename?: 'AccessToken';\n  createdAt: Scalars['ISO8601DateTime'];\n  desensitizedValue: Scalars['String'];\n  id: Scalars['ID'];\n  lastRequestAt?: Maybe<Scalars['ISO8601DateTime']>;\n  lastRequestIp?: Maybe<Scalars['String']>;\n  lastRequestMethod?: Maybe<Scalars['String']>;\n  lastRequestUrl?: Maybe<Scalars['String']>;\n  memo: Scalars['String'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  user: User;\n  value: Scalars['String'];\n};\n\n/** The connection type for AccessToken. */\nexport type AccessTokenConnection = {\n  __typename?: 'AccessTokenConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<AccessTokenEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<AccessToken>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type AccessTokenEdge = {\n  __typename?: 'AccessTokenEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<AccessToken>;\n};\n\n/** Autogenerated input type of AdminBanUserMutation */\nexport type AdminBanUserMutationInput = {\n  id: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of AdminBlockArticleMutation */\nexport type AdminBlockArticleMutationInput = {\n  uuid: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of AdminCreateAnnouncementMutation */\nexport type AdminCreateAnnouncementMutationInput = {\n  content: Scalars['String'];\n  messageType: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of AdminCreateAnnouncementMutation */\nexport type AdminCreateAnnouncementMutationPayload = {\n  __typename?: 'AdminCreateAnnouncementMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  success?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of AdminCreateBonusMutation */\nexport type AdminCreateBonusMutationInput = {\n  userId: Scalars['ID'];\n  amount: Scalars['Float'];\n  title: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of AdminCreateBonusMutation */\nexport type AdminCreateBonusMutationPayload = {\n  __typename?: 'AdminCreateBonusMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of AdminDeleteAnnouncementMutation */\nexport type AdminDeleteAnnouncementMutationInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of AdminDeleteAnnouncementMutation */\nexport type AdminDeleteAnnouncementMutationPayload = {\n  __typename?: 'AdminDeleteAnnouncementMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  success?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of AdminDeleteCommentMutation */\nexport type AdminDeleteCommentMutationInput = {\n  id: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of AdminDeleteCommentMutation */\nexport type AdminDeleteCommentMutationPayload = {\n  __typename?: 'AdminDeleteCommentMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  success?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of AdminDeliverAnnouncementMutation */\nexport type AdminDeliverAnnouncementMutationInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of AdminDeliverAnnouncementMutation */\nexport type AdminDeliverAnnouncementMutationPayload = {\n  __typename?: 'AdminDeliverAnnouncementMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  success?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of AdminDeliverBonusMutation */\nexport type AdminDeliverBonusMutationInput = {\n  id: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of AdminLoginMutation */\nexport type AdminLoginMutationInput = {\n  name: Scalars['String'];\n  password: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of AdminLoginMutation */\nexport type AdminLoginMutationPayload = {\n  __typename?: 'AdminLoginMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  success?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of AdminPreviewAnnouncementMutation */\nexport type AdminPreviewAnnouncementMutationInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of AdminPreviewAnnouncementMutation */\nexport type AdminPreviewAnnouncementMutationPayload = {\n  __typename?: 'AdminPreviewAnnouncementMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  success?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of AdminRecoverCommentMutation */\nexport type AdminRecoverCommentMutationInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of AdminRecoverCommentMutation */\nexport type AdminRecoverCommentMutationPayload = {\n  __typename?: 'AdminRecoverCommentMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  success?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of AdminUnbanUserMutation */\nexport type AdminUnbanUserMutationInput = {\n  id: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of AdminUnblockArticleMutation */\nexport type AdminUnblockArticleMutationInput = {\n  uuid: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of AdminUpdateAnnouncementMutation */\nexport type AdminUpdateAnnouncementMutationInput = {\n  id: Scalars['Int'];\n  content: Scalars['String'];\n  messageType: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of AdminUpdateAnnouncementMutation */\nexport type AdminUpdateAnnouncementMutationPayload = {\n  __typename?: 'AdminUpdateAnnouncementMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  success?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of AdminUpdateBonusMutation */\nexport type AdminUpdateBonusMutationInput = {\n  id: Scalars['ID'];\n  userId: Scalars['ID'];\n  amount: Scalars['Float'];\n  title: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of AdminUpdateBonusMutation */\nexport type AdminUpdateBonusMutationPayload = {\n  __typename?: 'AdminUpdateBonusMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\nexport type Announcement = {\n  __typename?: 'Announcement';\n  content: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  deliveredAt?: Maybe<Scalars['ISO8601DateTime']>;\n  id: Scalars['Int'];\n  messageType: Scalars['String'];\n  state: Scalars['String'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** The connection type for Announcement. */\nexport type AnnouncementConnection = {\n  __typename?: 'AnnouncementConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<AnnouncementEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Announcement>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type AnnouncementEdge = {\n  __typename?: 'AnnouncementEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Announcement>;\n};\n\nexport type Article = {\n  __typename?: 'Article';\n  assetId: Scalars['String'];\n  author: User;\n  authorRevenueTotal: Scalars['Float'];\n  authorized?: Maybe<Scalars['Boolean']>;\n  buyOrders: OrderConnection;\n  buyers: UserConnection;\n  commentingSubscribed?: Maybe<Scalars['Boolean']>;\n  comments: CommentConnection;\n  commentsCount: Scalars['Int'];\n  content?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  currency: Currency;\n  downvoted?: Maybe<Scalars['Boolean']>;\n  downvotesCount: Scalars['Int'];\n  id: Scalars['ID'];\n  intro: Scalars['String'];\n  myShare?: Maybe<Scalars['Float']>;\n  ordersCount: Scalars['Int'];\n  partialContent?: Maybe<Scalars['String']>;\n  paymentTraceId?: Maybe<Scalars['String']>;\n  price: Scalars['Float'];\n  priceUsd?: Maybe<Scalars['Float']>;\n  randomReaders: Array<User>;\n  readerRevenueTotal: Scalars['Float'];\n  readers: UserConnection;\n  revenue: Scalars['Float'];\n  revenueUsd: Scalars['Float'];\n  rewardOrders: OrderConnection;\n  rewarders: UserConnection;\n  state?: Maybe<Scalars['String']>;\n  swappable?: Maybe<Scalars['Boolean']>;\n  tagNames?: Maybe<Array<Scalars['String']>>;\n  tags: Array<Tag>;\n  tagsCount: Scalars['Int'];\n  title: Scalars['String'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  upvoteRatio?: Maybe<Scalars['Int']>;\n  upvoted?: Maybe<Scalars['Boolean']>;\n  upvotesCount: Scalars['Int'];\n  uuid: Scalars['ID'];\n  wallet?: Maybe<MixinNetworkUser>;\n  walletId?: Maybe<Scalars['String']>;\n  wordsCount: Scalars['Int'];\n};\n\n\nexport type ArticleBuyOrdersArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type ArticleBuyersArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type ArticleCommentsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type ArticleReadersArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type ArticleRewardOrdersArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type ArticleRewardersArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for Article. */\nexport type ArticleConnection = {\n  __typename?: 'ArticleConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ArticleEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Article>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ArticleEdge = {\n  __typename?: 'ArticleEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Article>;\n};\n\nexport type Asset = {\n  __typename?: 'Asset';\n  assetId: Scalars['ID'];\n  balance?: Maybe<Scalars['String']>;\n  chainId?: Maybe<Scalars['ID']>;\n  changeBtc?: Maybe<Scalars['String']>;\n  changeUsd?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  iconUrl?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  priceBtc?: Maybe<Scalars['String']>;\n  priceUsd?: Maybe<Scalars['String']>;\n  symbol?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\nexport type Bonus = {\n  __typename?: 'Bonus';\n  amount: Scalars['Float'];\n  assetId: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  description?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  state: Scalars['String'];\n  title: Scalars['String'];\n  traceId: Scalars['String'];\n  transfer?: Maybe<Transfer>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  user: User;\n};\n\n/** The connection type for Bonus. */\nexport type BonusConnection = {\n  __typename?: 'BonusConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<BonusEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Bonus>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type BonusEdge = {\n  __typename?: 'BonusEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Bonus>;\n};\n\n/** Autogenerated input type of ClearNotificationsMutation */\nexport type ClearNotificationsMutationInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\nexport type Comment = {\n  __typename?: 'Comment';\n  author?: Maybe<User>;\n  commentable: Article;\n  content?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  deletedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  downvoted?: Maybe<Scalars['Boolean']>;\n  downvotesCount: Scalars['Int'];\n  id: Scalars['ID'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  upvoted?: Maybe<Scalars['Boolean']>;\n  upvotesCount: Scalars['Int'];\n};\n\n/** The connection type for Comment. */\nexport type CommentConnection = {\n  __typename?: 'CommentConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CommentEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Comment>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type CommentEdge = {\n  __typename?: 'CommentEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Comment>;\n};\n\n/** Autogenerated input type of CreateAccessTokenMutation */\nexport type CreateAccessTokenMutationInput = {\n  memo: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of CreateArticleMutation */\nexport type CreateArticleMutationInput = {\n  title: Scalars['String'];\n  intro: Scalars['String'];\n  content: Scalars['String'];\n  price: Scalars['Float'];\n  state: Scalars['String'];\n  assetId: Scalars['String'];\n  tagNames?: Maybe<Array<Scalars['String']>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateArticleMutation */\nexport type CreateArticleMutationPayload = {\n  __typename?: 'CreateArticleMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of CreateCommentMutation */\nexport type CreateCommentMutationInput = {\n  commentableId: Scalars['ID'];\n  commentableType: Scalars['String'];\n  content: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateCommentMutation */\nexport type CreateCommentMutationPayload = {\n  __typename?: 'CreateCommentMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  commentable: Article;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\nexport type Currency = {\n  __typename?: 'Currency';\n  assetId: Scalars['String'];\n  chainId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  iconUrl?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  priceBtc?: Maybe<Scalars['Float']>;\n  priceUsd?: Maybe<Scalars['Float']>;\n  symbol: Scalars['String'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of DeleteAccessTokenMutation */\nexport type DeleteAccessTokenMutationInput = {\n  id: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of DownvoteArticleMutation */\nexport type DownvoteArticleMutationInput = {\n  uuid: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of DownvoteCommentMutation */\nexport type DownvoteCommentMutationInput = {\n  id: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of HideArticleMutation */\nexport type HideArticleMutationInput = {\n  uuid: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of HideArticleMutation */\nexport type HideArticleMutationPayload = {\n  __typename?: 'HideArticleMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  success?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n\nexport type MixinMessage = {\n  __typename?: 'MixinMessage';\n  action: Scalars['String'];\n  category: Scalars['String'];\n  content: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['Int'];\n  processedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  user?: Maybe<User>;\n  userId?: Maybe<Scalars['String']>;\n};\n\n/** The connection type for MixinMessage. */\nexport type MixinMessageConnection = {\n  __typename?: 'MixinMessageConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<MixinMessageEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<MixinMessage>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type MixinMessageEdge = {\n  __typename?: 'MixinMessageEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<MixinMessage>;\n};\n\nexport type MixinNetworkSnapshot = {\n  __typename?: 'MixinNetworkSnapshot';\n  amount: Scalars['Float'];\n  article?: Maybe<Article>;\n  assetId: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  currency: Currency;\n  data?: Maybe<Scalars['String']>;\n  id: Scalars['Int'];\n  opponent?: Maybe<User>;\n  opponentId?: Maybe<Scalars['String']>;\n  processedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  snapshotId: Scalars['String'];\n  traceId: Scalars['ID'];\n  transferredAt: Scalars['ISO8601DateTime'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  userId: Scalars['String'];\n};\n\n/** The connection type for MixinNetworkSnapshot. */\nexport type MixinNetworkSnapshotConnection = {\n  __typename?: 'MixinNetworkSnapshotConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<MixinNetworkSnapshotEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<MixinNetworkSnapshot>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type MixinNetworkSnapshotEdge = {\n  __typename?: 'MixinNetworkSnapshotEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<MixinNetworkSnapshot>;\n};\n\nexport type MixinNetworkUser = {\n  __typename?: 'MixinNetworkUser';\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  owner?: Maybe<MixinNetworkUserOwnerUnion>;\n  ownerId: Scalars['Int'];\n  ownerType: Scalars['String'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  uuid: Scalars['ID'];\n};\n\n/** Mixin network user' owner */\nexport type MixinNetworkUserOwnerUnion = Article;\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  adminBanUser?: Maybe<User>;\n  adminBlockArticle?: Maybe<Article>;\n  adminCreateAnnouncement?: Maybe<AdminCreateAnnouncementMutationPayload>;\n  adminCreateBonus?: Maybe<AdminCreateBonusMutationPayload>;\n  adminDeleteAnnouncement?: Maybe<AdminDeleteAnnouncementMutationPayload>;\n  adminDeleteComment?: Maybe<AdminDeleteCommentMutationPayload>;\n  adminDeliverAnnouncement?: Maybe<AdminDeliverAnnouncementMutationPayload>;\n  adminDeliverBonus?: Maybe<Bonus>;\n  adminLogin?: Maybe<AdminLoginMutationPayload>;\n  adminPreviewAnnouncement?: Maybe<AdminPreviewAnnouncementMutationPayload>;\n  adminRecoverComment?: Maybe<AdminRecoverCommentMutationPayload>;\n  adminUnbanUser?: Maybe<User>;\n  adminUnblockArticle?: Maybe<Article>;\n  adminUpdateAnnouncement?: Maybe<AdminUpdateAnnouncementMutationPayload>;\n  adminUpdateBonus?: Maybe<AdminUpdateBonusMutationPayload>;\n  clearNotifications?: Maybe<Scalars['Boolean']>;\n  createAccessToken?: Maybe<AccessToken>;\n  createArticle?: Maybe<CreateArticleMutationPayload>;\n  createComment?: Maybe<CreateCommentMutationPayload>;\n  createdAt: Scalars['ISO8601DateTime'];\n  deleteAccessToken?: Maybe<Scalars['Boolean']>;\n  downvoteArticle?: Maybe<Article>;\n  downvoteComment?: Maybe<Comment>;\n  hideArticle?: Maybe<HideArticleMutationPayload>;\n  publishArticle?: Maybe<PublishArticleMutationPayload>;\n  readNotification?: Maybe<Notification>;\n  readNotifications?: Maybe<Scalars['Boolean']>;\n  switchLocale?: Maybe<Scalars['Boolean']>;\n  toggleAuthoringSubscribeUserAction?: Maybe<ToggleAuthoringSubscribeUserActionMutationPayload>;\n  toggleCommentingSubscribeArticleAction?: Maybe<Article>;\n  toggleReadingSubscribeUserAction?: Maybe<ToggleReadingSubscribeUserActionMutationPayload>;\n  toggleSubscribeTagAction?: Maybe<Tag>;\n  updateArticle?: Maybe<UpdateArticleMutationPayload>;\n  updateNotificationSetting?: Maybe<NotificationSetting>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  upvoteArticle?: Maybe<Article>;\n  upvoteComment?: Maybe<Comment>;\n};\n\n\nexport type MutationAdminBanUserArgs = {\n  input: AdminBanUserMutationInput;\n};\n\n\nexport type MutationAdminBlockArticleArgs = {\n  input: AdminBlockArticleMutationInput;\n};\n\n\nexport type MutationAdminCreateAnnouncementArgs = {\n  input: AdminCreateAnnouncementMutationInput;\n};\n\n\nexport type MutationAdminCreateBonusArgs = {\n  input: AdminCreateBonusMutationInput;\n};\n\n\nexport type MutationAdminDeleteAnnouncementArgs = {\n  input: AdminDeleteAnnouncementMutationInput;\n};\n\n\nexport type MutationAdminDeleteCommentArgs = {\n  input: AdminDeleteCommentMutationInput;\n};\n\n\nexport type MutationAdminDeliverAnnouncementArgs = {\n  input: AdminDeliverAnnouncementMutationInput;\n};\n\n\nexport type MutationAdminDeliverBonusArgs = {\n  input: AdminDeliverBonusMutationInput;\n};\n\n\nexport type MutationAdminLoginArgs = {\n  input: AdminLoginMutationInput;\n};\n\n\nexport type MutationAdminPreviewAnnouncementArgs = {\n  input: AdminPreviewAnnouncementMutationInput;\n};\n\n\nexport type MutationAdminRecoverCommentArgs = {\n  input: AdminRecoverCommentMutationInput;\n};\n\n\nexport type MutationAdminUnbanUserArgs = {\n  input: AdminUnbanUserMutationInput;\n};\n\n\nexport type MutationAdminUnblockArticleArgs = {\n  input: AdminUnblockArticleMutationInput;\n};\n\n\nexport type MutationAdminUpdateAnnouncementArgs = {\n  input: AdminUpdateAnnouncementMutationInput;\n};\n\n\nexport type MutationAdminUpdateBonusArgs = {\n  input: AdminUpdateBonusMutationInput;\n};\n\n\nexport type MutationClearNotificationsArgs = {\n  input: ClearNotificationsMutationInput;\n};\n\n\nexport type MutationCreateAccessTokenArgs = {\n  input: CreateAccessTokenMutationInput;\n};\n\n\nexport type MutationCreateArticleArgs = {\n  input: CreateArticleMutationInput;\n};\n\n\nexport type MutationCreateCommentArgs = {\n  input: CreateCommentMutationInput;\n};\n\n\nexport type MutationDeleteAccessTokenArgs = {\n  input: DeleteAccessTokenMutationInput;\n};\n\n\nexport type MutationDownvoteArticleArgs = {\n  input: DownvoteArticleMutationInput;\n};\n\n\nexport type MutationDownvoteCommentArgs = {\n  input: DownvoteCommentMutationInput;\n};\n\n\nexport type MutationHideArticleArgs = {\n  input: HideArticleMutationInput;\n};\n\n\nexport type MutationPublishArticleArgs = {\n  input: PublishArticleMutationInput;\n};\n\n\nexport type MutationReadNotificationArgs = {\n  input: ReadNotificationMutationInput;\n};\n\n\nexport type MutationReadNotificationsArgs = {\n  input: ReadNotificationsMutationInput;\n};\n\n\nexport type MutationSwitchLocaleArgs = {\n  input: SwitchLocaleMutationInput;\n};\n\n\nexport type MutationToggleAuthoringSubscribeUserActionArgs = {\n  input: ToggleAuthoringSubscribeUserActionMutationInput;\n};\n\n\nexport type MutationToggleCommentingSubscribeArticleActionArgs = {\n  input: ToggleCommentingSubscribeArticleActionMutationInput;\n};\n\n\nexport type MutationToggleReadingSubscribeUserActionArgs = {\n  input: ToggleReadingSubscribeUserActionMutationInput;\n};\n\n\nexport type MutationToggleSubscribeTagActionArgs = {\n  input: ToggleSubscribeTagActionMutationInput;\n};\n\n\nexport type MutationUpdateArticleArgs = {\n  input: UpdateArticleMutationInput;\n};\n\n\nexport type MutationUpdateNotificationSettingArgs = {\n  input: UpdateNotificationSettingMutationInput;\n};\n\n\nexport type MutationUpvoteArticleArgs = {\n  input: UpvoteArticleMutationInput;\n};\n\n\nexport type MutationUpvoteCommentArgs = {\n  input: UpvoteCommentMutationInput;\n};\n\nexport type Notification = {\n  __typename?: 'Notification';\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  message?: Maybe<Scalars['String']>;\n  readAt?: Maybe<Scalars['ISO8601DateTime']>;\n  recipient: User;\n  type: Scalars['String'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  url?: Maybe<Scalars['String']>;\n};\n\n/** The connection type for Notification. */\nexport type NotificationConnection = {\n  __typename?: 'NotificationConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<NotificationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Notification>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type NotificationEdge = {\n  __typename?: 'NotificationEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Notification>;\n};\n\nexport type NotificationSetting = {\n  __typename?: 'NotificationSetting';\n  articleBoughtMixinBot?: Maybe<Scalars['Boolean']>;\n  articleBoughtWeb?: Maybe<Scalars['Boolean']>;\n  articleBoughtWebhook?: Maybe<Scalars['Boolean']>;\n  articlePublishedMixinBot?: Maybe<Scalars['Boolean']>;\n  articlePublishedWeb?: Maybe<Scalars['Boolean']>;\n  articlePublishedWebhook?: Maybe<Scalars['Boolean']>;\n  articleRewardedMixinBot?: Maybe<Scalars['Boolean']>;\n  articleRewardedWeb?: Maybe<Scalars['Boolean']>;\n  articleRewardedWebhook?: Maybe<Scalars['Boolean']>;\n  commentCreatedMixinBot?: Maybe<Scalars['Boolean']>;\n  commentCreatedWeb?: Maybe<Scalars['Boolean']>;\n  commentCreatedWebhook?: Maybe<Scalars['Boolean']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  taggingCreatedMixinBot?: Maybe<Scalars['Boolean']>;\n  taggingCreatedWeb?: Maybe<Scalars['Boolean']>;\n  taggingCreatedWebhook?: Maybe<Scalars['Boolean']>;\n  transferProcessedMixinBot?: Maybe<Scalars['Boolean']>;\n  transferProcessedWeb?: Maybe<Scalars['Boolean']>;\n  transferProcessedWebhook?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  user: User;\n  webhookUrl?: Maybe<Scalars['String']>;\n};\n\nexport type Order = {\n  __typename?: 'Order';\n  buyer: User;\n  createdAt: Scalars['ISO8601DateTime'];\n  currency: Currency;\n  id: Scalars['ID'];\n  item: OrderItemUnion;\n  itemId: Scalars['ID'];\n  itemType: Scalars['String'];\n  orderType: Scalars['String'];\n  seller: User;\n  state: Scalars['String'];\n  total: Scalars['Float'];\n  traceId: Scalars['ID'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** The connection type for Order. */\nexport type OrderConnection = {\n  __typename?: 'OrderConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrderEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Order>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type OrderEdge = {\n  __typename?: 'OrderEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Order>;\n};\n\n/** order' item */\nexport type OrderItemUnion = Article;\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n  __typename?: 'PageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']>;\n};\n\nexport type Payment = {\n  __typename?: 'Payment';\n  amount: Scalars['Float'];\n  assetId: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  currency?: Maybe<Currency>;\n  memo?: Maybe<Scalars['String']>;\n  order?: Maybe<Order>;\n  payer: User;\n  snapshotId: Scalars['String'];\n  state: Scalars['String'];\n  traceId: Scalars['ID'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** The connection type for Payment. */\nexport type PaymentConnection = {\n  __typename?: 'PaymentConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PaymentEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Payment>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type PaymentEdge = {\n  __typename?: 'PaymentEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Payment>;\n};\n\n/** Autogenerated input type of PublishArticleMutation */\nexport type PublishArticleMutationInput = {\n  uuid: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of PublishArticleMutation */\nexport type PublishArticleMutationPayload = {\n  __typename?: 'PublishArticleMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  success?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  adminAnnouncementConnection: AnnouncementConnection;\n  adminArticle: Article;\n  adminArticleConnection: ArticleConnection;\n  adminBonusConnection: BonusConnection;\n  adminCommentConnection: CommentConnection;\n  adminMixinMessageConnection: MixinMessageConnection;\n  adminMixinNetworkSnapshotConnection: MixinNetworkSnapshotConnection;\n  adminOrderConnection: OrderConnection;\n  adminPaymentConnection: PaymentConnection;\n  adminSwapOrderConnection: SwapOrderConnection;\n  adminTransferConnection: TransferConnection;\n  adminUser?: Maybe<User>;\n  adminUserConnection: UserConnection;\n  adminWalletBalance: Array<Asset>;\n  article?: Maybe<Article>;\n  articleChart: Scalars['String'];\n  articleConnection: ArticleConnection;\n  commentConnection: CommentConnection;\n  createdAt: Scalars['ISO8601DateTime'];\n  myAccessTokenConnection: AccessTokenConnection;\n  myArticle?: Maybe<Article>;\n  myArticleConnection: ArticleConnection;\n  myArticleOrderConnection?: Maybe<OrderConnection>;\n  myAuthoringSubscriptionConnection: UserConnection;\n  myCommentingSubscriptionConnection: ArticleConnection;\n  myNotificationConnection: NotificationConnection;\n  myNotificationSetting: NotificationSetting;\n  myPaymentConnection: PaymentConnection;\n  myReadingSubscriptionConnection: UserConnection;\n  myStatistics: UserStatistics;\n  mySwapOrderConnection: SwapOrderConnection;\n  myTagSubscriptionConnection: TagConnection;\n  myTransferConnection: TransferConnection;\n  payment?: Maybe<Payment>;\n  pricableCurrencies: Array<Currency>;\n  revenueChart: Scalars['String'];\n  statistics: Statistics;\n  swapPreOrder?: Maybe<SwapPreOrder>;\n  swappableCurrencies: Array<Currency>;\n  tag?: Maybe<Tag>;\n  tagConnection: TagConnection;\n  transferConnection: TransferConnection;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  user?: Maybe<User>;\n  userArticleConnection: ArticleConnection;\n  userChart: Scalars['String'];\n};\n\n\nexport type QueryAdminAnnouncementConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminArticleArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryAdminArticleConnectionArgs = {\n  query?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminBonusConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminCommentConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminMixinMessageConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminMixinNetworkSnapshotConnectionArgs = {\n  userId?: Maybe<Scalars['String']>;\n  filter?: Maybe<Scalars['String']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminOrderConnectionArgs = {\n  itemId?: Maybe<Scalars['ID']>;\n  itemType?: Maybe<Scalars['String']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminPaymentConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminSwapOrderConnectionArgs = {\n  userId?: Maybe<Scalars['ID']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminTransferConnectionArgs = {\n  itemId?: Maybe<Scalars['ID']>;\n  itemType?: Maybe<Scalars['String']>;\n  sourceId?: Maybe<Scalars['ID']>;\n  sourceType?: Maybe<Scalars['String']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminUserArgs = {\n  mixinId: Scalars['ID'];\n};\n\n\nexport type QueryAdminUserConnectionArgs = {\n  query?: Maybe<Scalars['String']>;\n  orderBy?: Maybe<Scalars['String']>;\n  filter?: Maybe<Scalars['String']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminWalletBalanceArgs = {\n  userId?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryArticleArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryArticleConnectionArgs = {\n  query?: Maybe<Scalars['String']>;\n  tagId?: Maybe<Scalars['ID']>;\n  after?: Maybe<Scalars['String']>;\n  order: Scalars['String'];\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryCommentConnectionArgs = {\n  commentableType?: Maybe<Scalars['String']>;\n  commentableId?: Maybe<Scalars['ID']>;\n  authorMixinId?: Maybe<Scalars['String']>;\n  orderBy?: Maybe<Scalars['String']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMyAccessTokenConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMyArticleArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryMyArticleConnectionArgs = {\n  type: Scalars['String'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMyArticleOrderConnectionArgs = {\n  uuid: Scalars['ID'];\n  orderType: Scalars['String'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMyAuthoringSubscriptionConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMyCommentingSubscriptionConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMyNotificationConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMyPaymentConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMyReadingSubscriptionConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMySwapOrderConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMyTagSubscriptionConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMyTransferConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  transferType?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryPaymentArgs = {\n  traceId: Scalars['ID'];\n};\n\n\nexport type QuerySwapPreOrderArgs = {\n  payAssetId: Scalars['String'];\n  fillAssetId: Scalars['String'];\n  amount: Scalars['Float'];\n};\n\n\nexport type QueryTagArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryTagConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryTransferConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryUserArgs = {\n  mixinId: Scalars['ID'];\n};\n\n\nexport type QueryUserArticleConnectionArgs = {\n  mixinId: Scalars['ID'];\n  type: Scalars['String'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n/** Autogenerated input type of ReadNotificationMutation */\nexport type ReadNotificationMutationInput = {\n  id: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of ReadNotificationsMutation */\nexport type ReadNotificationsMutationInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\nexport type Statistics = {\n  __typename?: 'Statistics';\n  articlesCount: Scalars['Int'];\n  authorRevenueTotal: Scalars['Float'];\n  createdAt: Scalars['ISO8601DateTime'];\n  readerRevenueTotal: Scalars['Float'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  usersCount: Scalars['Int'];\n};\n\nexport type SwapOrder = {\n  __typename?: 'SwapOrder';\n  amount?: Maybe<Scalars['Float']>;\n  article?: Maybe<Article>;\n  createdAt: Scalars['ISO8601DateTime'];\n  fillAsset: Currency;\n  fillAssetId: Scalars['String'];\n  funds?: Maybe<Scalars['Float']>;\n  id: Scalars['ID'];\n  minAmount?: Maybe<Scalars['Float']>;\n  payAsset: Currency;\n  payAssetId: Scalars['String'];\n  payer: User;\n  payment: Payment;\n  state: Scalars['String'];\n  traceId: Scalars['ID'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** The connection type for SwapOrder. */\nexport type SwapOrderConnection = {\n  __typename?: 'SwapOrderConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SwapOrderEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<SwapOrder>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type SwapOrderEdge = {\n  __typename?: 'SwapOrderEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<SwapOrder>;\n};\n\nexport type SwapPreOrder = {\n  __typename?: 'SwapPreOrder';\n  amount: Scalars['Float'];\n  createdAt: Scalars['ISO8601DateTime'];\n  fillAssetId: Scalars['String'];\n  funds: Scalars['Float'];\n  minAmount: Scalars['Float'];\n  payAssetId: Scalars['String'];\n  priceImpact?: Maybe<Scalars['Float']>;\n  routePrice?: Maybe<Scalars['Float']>;\n  state: Scalars['String'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of SwitchLocaleMutation */\nexport type SwitchLocaleMutationInput = {\n  locale: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\nexport type Tag = {\n  __typename?: 'Tag';\n  articlesCount: Scalars['Int'];\n  color?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  subscribed?: Maybe<Scalars['Boolean']>;\n  subscribersCount: Scalars['Int'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** The connection type for Tag. */\nexport type TagConnection = {\n  __typename?: 'TagConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TagEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Tag>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type TagEdge = {\n  __typename?: 'TagEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Tag>;\n};\n\n/** Autogenerated input type of ToggleAuthoringSubscribeUserActionMutation */\nexport type ToggleAuthoringSubscribeUserActionMutationInput = {\n  mixinId: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of ToggleAuthoringSubscribeUserActionMutation */\nexport type ToggleAuthoringSubscribeUserActionMutationPayload = {\n  __typename?: 'ToggleAuthoringSubscribeUserActionMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of ToggleCommentingSubscribeArticleActionMutation */\nexport type ToggleCommentingSubscribeArticleActionMutationInput = {\n  uuid: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of ToggleReadingSubscribeUserActionMutation */\nexport type ToggleReadingSubscribeUserActionMutationInput = {\n  mixinId: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of ToggleReadingSubscribeUserActionMutation */\nexport type ToggleReadingSubscribeUserActionMutationPayload = {\n  __typename?: 'ToggleReadingSubscribeUserActionMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of ToggleSubscribeTagActionMutation */\nexport type ToggleSubscribeTagActionMutationInput = {\n  id: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\nexport type Transfer = {\n  __typename?: 'Transfer';\n  amount: Scalars['Float'];\n  article?: Maybe<Article>;\n  assetId: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  currency?: Maybe<Currency>;\n  memo?: Maybe<Scalars['String']>;\n  opponentId?: Maybe<Scalars['String']>;\n  processedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  recipient?: Maybe<User>;\n  snapshotId?: Maybe<Scalars['String']>;\n  traceId: Scalars['ID'];\n  transferType: Scalars['String'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  walletId?: Maybe<Scalars['String']>;\n};\n\n/** The connection type for Transfer. */\nexport type TransferConnection = {\n  __typename?: 'TransferConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TransferEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Transfer>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type TransferEdge = {\n  __typename?: 'TransferEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Transfer>;\n};\n\n/** Autogenerated input type of UpdateArticleMutation */\nexport type UpdateArticleMutationInput = {\n  uuid: Scalars['ID'];\n  title?: Maybe<Scalars['String']>;\n  intro?: Maybe<Scalars['String']>;\n  content?: Maybe<Scalars['String']>;\n  price?: Maybe<Scalars['Float']>;\n  tagNames?: Maybe<Array<Scalars['String']>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateArticleMutation */\nexport type UpdateArticleMutationPayload = {\n  __typename?: 'UpdateArticleMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of UpdateNotificationSettingMutation */\nexport type UpdateNotificationSettingMutationInput = {\n  webhookUrl?: Maybe<Scalars['String']>;\n  articlePublishedWeb?: Maybe<Scalars['Boolean']>;\n  articlePublishedMixinBot?: Maybe<Scalars['Boolean']>;\n  articlePublishedWebhook?: Maybe<Scalars['Boolean']>;\n  articleBoughtWeb?: Maybe<Scalars['Boolean']>;\n  articleBoughtMixinBot?: Maybe<Scalars['Boolean']>;\n  articleBoughtWebhook?: Maybe<Scalars['Boolean']>;\n  articleRewardedWeb?: Maybe<Scalars['Boolean']>;\n  articleRewardedMixinBot?: Maybe<Scalars['Boolean']>;\n  articleRewardedWebhook?: Maybe<Scalars['Boolean']>;\n  commentCreatedWeb?: Maybe<Scalars['Boolean']>;\n  commentCreatedMixinBot?: Maybe<Scalars['Boolean']>;\n  commentCreatedWebhook?: Maybe<Scalars['Boolean']>;\n  taggingCreatedWeb?: Maybe<Scalars['Boolean']>;\n  taggingCreatedMixinBot?: Maybe<Scalars['Boolean']>;\n  taggingCreatedWebhook?: Maybe<Scalars['Boolean']>;\n  transferProcessedWeb?: Maybe<Scalars['Boolean']>;\n  transferProcessedMixinBot?: Maybe<Scalars['Boolean']>;\n  transferProcessedWebhook?: Maybe<Scalars['Boolean']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpvoteArticleMutation */\nexport type UpvoteArticleMutationInput = {\n  uuid: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpvoteCommentMutation */\nexport type UpvoteCommentMutationInput = {\n  id: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\nexport type User = {\n  __typename?: 'User';\n  articles: ArticleConnection;\n  authoringSubscribed?: Maybe<Scalars['Boolean']>;\n  avatarUrl: Scalars['String'];\n  bannedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  bio?: Maybe<Scalars['String']>;\n  comments: CommentConnection;\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  locale?: Maybe<Scalars['String']>;\n  mixinId: Scalars['ID'];\n  mixinUuid: Scalars['String'];\n  name: Scalars['String'];\n  readingSubscribed?: Maybe<Scalars['Boolean']>;\n  statistics: UserStatistics;\n  unreadNotificationsCount: Scalars['Int'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  walletId?: Maybe<Scalars['String']>;\n};\n\n\nexport type UserArticlesArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type UserCommentsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for User. */\nexport type UserConnection = {\n  __typename?: 'UserConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<UserEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type UserEdge = {\n  __typename?: 'UserEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<User>;\n};\n\nexport type UserStatistics = {\n  __typename?: 'UserStatistics';\n  articlesCount?: Maybe<Scalars['Int']>;\n  authorRevenueTotalBtc?: Maybe<Scalars['Float']>;\n  authorRevenueTotalPrs?: Maybe<Scalars['Float']>;\n  authorRevenueTotalUsd?: Maybe<Scalars['Float']>;\n  boughtArticlesCount?: Maybe<Scalars['Int']>;\n  commentsCount?: Maybe<Scalars['Int']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  paymentTotalBtc?: Maybe<Scalars['Float']>;\n  paymentTotalPrs?: Maybe<Scalars['Float']>;\n  paymentTotalUsd?: Maybe<Scalars['Float']>;\n  readerRevenueTotalBtc?: Maybe<Scalars['Float']>;\n  readerRevenueTotalPrs?: Maybe<Scalars['Float']>;\n  readerRevenueTotalUsd?: Maybe<Scalars['Float']>;\n  revenueTotalBtc?: Maybe<Scalars['Float']>;\n  revenueTotalPrs?: Maybe<Scalars['Float']>;\n  revenueTotalUsd?: Maybe<Scalars['Float']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n\nexport const AdminBanUserDocument = gql`\n    mutation AdminBanUser($input: AdminBanUserMutationInput!) {\n  adminBanUser(input: $input) {\n    id\n    bannedAt\n  }\n}\n    `;\nexport type AdminBanUserMutationFn = Apollo.MutationFunction<AdminBanUserMutation, AdminBanUserMutationVariables>;\n\n/**\n * __useAdminBanUserMutation__\n *\n * To run a mutation, you first call `useAdminBanUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminBanUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminBanUserMutation, { data, loading, error }] = useAdminBanUserMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminBanUserMutation(baseOptions?: Apollo.MutationHookOptions<AdminBanUserMutation, AdminBanUserMutationVariables>) {\n        return Apollo.useMutation<AdminBanUserMutation, AdminBanUserMutationVariables>(AdminBanUserDocument, baseOptions);\n      }\nexport type AdminBanUserMutationHookResult = ReturnType<typeof useAdminBanUserMutation>;\nexport type AdminBanUserMutationResult = Apollo.MutationResult<AdminBanUserMutation>;\nexport type AdminBanUserMutationOptions = Apollo.BaseMutationOptions<AdminBanUserMutation, AdminBanUserMutationVariables>;\nexport const AdminBlockArticleDocument = gql`\n    mutation AdminBlockArticle($input: AdminBlockArticleMutationInput!) {\n  adminBlockArticle(input: $input) {\n    id\n    uuid\n    state\n  }\n}\n    `;\nexport type AdminBlockArticleMutationFn = Apollo.MutationFunction<AdminBlockArticleMutation, AdminBlockArticleMutationVariables>;\n\n/**\n * __useAdminBlockArticleMutation__\n *\n * To run a mutation, you first call `useAdminBlockArticleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminBlockArticleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminBlockArticleMutation, { data, loading, error }] = useAdminBlockArticleMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminBlockArticleMutation(baseOptions?: Apollo.MutationHookOptions<AdminBlockArticleMutation, AdminBlockArticleMutationVariables>) {\n        return Apollo.useMutation<AdminBlockArticleMutation, AdminBlockArticleMutationVariables>(AdminBlockArticleDocument, baseOptions);\n      }\nexport type AdminBlockArticleMutationHookResult = ReturnType<typeof useAdminBlockArticleMutation>;\nexport type AdminBlockArticleMutationResult = Apollo.MutationResult<AdminBlockArticleMutation>;\nexport type AdminBlockArticleMutationOptions = Apollo.BaseMutationOptions<AdminBlockArticleMutation, AdminBlockArticleMutationVariables>;\nexport const AdminCreateAnouncementDocument = gql`\n    mutation AdminCreateAnouncement($input: AdminCreateAnnouncementMutationInput!) {\n  adminCreateAnnouncement(input: $input) {\n    error\n    success\n  }\n}\n    `;\nexport type AdminCreateAnouncementMutationFn = Apollo.MutationFunction<AdminCreateAnouncementMutation, AdminCreateAnouncementMutationVariables>;\n\n/**\n * __useAdminCreateAnouncementMutation__\n *\n * To run a mutation, you first call `useAdminCreateAnouncementMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminCreateAnouncementMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminCreateAnouncementMutation, { data, loading, error }] = useAdminCreateAnouncementMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminCreateAnouncementMutation(baseOptions?: Apollo.MutationHookOptions<AdminCreateAnouncementMutation, AdminCreateAnouncementMutationVariables>) {\n        return Apollo.useMutation<AdminCreateAnouncementMutation, AdminCreateAnouncementMutationVariables>(AdminCreateAnouncementDocument, baseOptions);\n      }\nexport type AdminCreateAnouncementMutationHookResult = ReturnType<typeof useAdminCreateAnouncementMutation>;\nexport type AdminCreateAnouncementMutationResult = Apollo.MutationResult<AdminCreateAnouncementMutation>;\nexport type AdminCreateAnouncementMutationOptions = Apollo.BaseMutationOptions<AdminCreateAnouncementMutation, AdminCreateAnouncementMutationVariables>;\nexport const AdminCreateBonusDocument = gql`\n    mutation AdminCreateBonus($input: AdminCreateBonusMutationInput!) {\n  adminCreateBonus(input: $input) {\n    error\n  }\n}\n    `;\nexport type AdminCreateBonusMutationFn = Apollo.MutationFunction<AdminCreateBonusMutation, AdminCreateBonusMutationVariables>;\n\n/**\n * __useAdminCreateBonusMutation__\n *\n * To run a mutation, you first call `useAdminCreateBonusMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminCreateBonusMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminCreateBonusMutation, { data, loading, error }] = useAdminCreateBonusMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminCreateBonusMutation(baseOptions?: Apollo.MutationHookOptions<AdminCreateBonusMutation, AdminCreateBonusMutationVariables>) {\n        return Apollo.useMutation<AdminCreateBonusMutation, AdminCreateBonusMutationVariables>(AdminCreateBonusDocument, baseOptions);\n      }\nexport type AdminCreateBonusMutationHookResult = ReturnType<typeof useAdminCreateBonusMutation>;\nexport type AdminCreateBonusMutationResult = Apollo.MutationResult<AdminCreateBonusMutation>;\nexport type AdminCreateBonusMutationOptions = Apollo.BaseMutationOptions<AdminCreateBonusMutation, AdminCreateBonusMutationVariables>;\nexport const AdminDeleteAnouncementDocument = gql`\n    mutation AdminDeleteAnouncement($input: AdminDeleteAnnouncementMutationInput!) {\n  adminDeleteAnnouncement(input: $input) {\n    error\n    success\n  }\n}\n    `;\nexport type AdminDeleteAnouncementMutationFn = Apollo.MutationFunction<AdminDeleteAnouncementMutation, AdminDeleteAnouncementMutationVariables>;\n\n/**\n * __useAdminDeleteAnouncementMutation__\n *\n * To run a mutation, you first call `useAdminDeleteAnouncementMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminDeleteAnouncementMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminDeleteAnouncementMutation, { data, loading, error }] = useAdminDeleteAnouncementMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminDeleteAnouncementMutation(baseOptions?: Apollo.MutationHookOptions<AdminDeleteAnouncementMutation, AdminDeleteAnouncementMutationVariables>) {\n        return Apollo.useMutation<AdminDeleteAnouncementMutation, AdminDeleteAnouncementMutationVariables>(AdminDeleteAnouncementDocument, baseOptions);\n      }\nexport type AdminDeleteAnouncementMutationHookResult = ReturnType<typeof useAdminDeleteAnouncementMutation>;\nexport type AdminDeleteAnouncementMutationResult = Apollo.MutationResult<AdminDeleteAnouncementMutation>;\nexport type AdminDeleteAnouncementMutationOptions = Apollo.BaseMutationOptions<AdminDeleteAnouncementMutation, AdminDeleteAnouncementMutationVariables>;\nexport const AdminDeleteCommentDocument = gql`\n    mutation AdminDeleteComment($input: AdminDeleteCommentMutationInput!) {\n  adminDeleteComment(input: $input) {\n    error\n    success\n  }\n}\n    `;\nexport type AdminDeleteCommentMutationFn = Apollo.MutationFunction<AdminDeleteCommentMutation, AdminDeleteCommentMutationVariables>;\n\n/**\n * __useAdminDeleteCommentMutation__\n *\n * To run a mutation, you first call `useAdminDeleteCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminDeleteCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminDeleteCommentMutation, { data, loading, error }] = useAdminDeleteCommentMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminDeleteCommentMutation(baseOptions?: Apollo.MutationHookOptions<AdminDeleteCommentMutation, AdminDeleteCommentMutationVariables>) {\n        return Apollo.useMutation<AdminDeleteCommentMutation, AdminDeleteCommentMutationVariables>(AdminDeleteCommentDocument, baseOptions);\n      }\nexport type AdminDeleteCommentMutationHookResult = ReturnType<typeof useAdminDeleteCommentMutation>;\nexport type AdminDeleteCommentMutationResult = Apollo.MutationResult<AdminDeleteCommentMutation>;\nexport type AdminDeleteCommentMutationOptions = Apollo.BaseMutationOptions<AdminDeleteCommentMutation, AdminDeleteCommentMutationVariables>;\nexport const AdminDeliverAnouncementDocument = gql`\n    mutation AdminDeliverAnouncement($input: AdminDeliverAnnouncementMutationInput!) {\n  adminDeliverAnnouncement(input: $input) {\n    error\n    success\n  }\n}\n    `;\nexport type AdminDeliverAnouncementMutationFn = Apollo.MutationFunction<AdminDeliverAnouncementMutation, AdminDeliverAnouncementMutationVariables>;\n\n/**\n * __useAdminDeliverAnouncementMutation__\n *\n * To run a mutation, you first call `useAdminDeliverAnouncementMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminDeliverAnouncementMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminDeliverAnouncementMutation, { data, loading, error }] = useAdminDeliverAnouncementMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminDeliverAnouncementMutation(baseOptions?: Apollo.MutationHookOptions<AdminDeliverAnouncementMutation, AdminDeliverAnouncementMutationVariables>) {\n        return Apollo.useMutation<AdminDeliverAnouncementMutation, AdminDeliverAnouncementMutationVariables>(AdminDeliverAnouncementDocument, baseOptions);\n      }\nexport type AdminDeliverAnouncementMutationHookResult = ReturnType<typeof useAdminDeliverAnouncementMutation>;\nexport type AdminDeliverAnouncementMutationResult = Apollo.MutationResult<AdminDeliverAnouncementMutation>;\nexport type AdminDeliverAnouncementMutationOptions = Apollo.BaseMutationOptions<AdminDeliverAnouncementMutation, AdminDeliverAnouncementMutationVariables>;\nexport const AdminDeliverBonusDocument = gql`\n    mutation AdminDeliverBonus($input: AdminDeliverBonusMutationInput!) {\n  adminDeliverBonus(input: $input) {\n    id\n    state\n  }\n}\n    `;\nexport type AdminDeliverBonusMutationFn = Apollo.MutationFunction<AdminDeliverBonusMutation, AdminDeliverBonusMutationVariables>;\n\n/**\n * __useAdminDeliverBonusMutation__\n *\n * To run a mutation, you first call `useAdminDeliverBonusMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminDeliverBonusMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminDeliverBonusMutation, { data, loading, error }] = useAdminDeliverBonusMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminDeliverBonusMutation(baseOptions?: Apollo.MutationHookOptions<AdminDeliverBonusMutation, AdminDeliverBonusMutationVariables>) {\n        return Apollo.useMutation<AdminDeliverBonusMutation, AdminDeliverBonusMutationVariables>(AdminDeliverBonusDocument, baseOptions);\n      }\nexport type AdminDeliverBonusMutationHookResult = ReturnType<typeof useAdminDeliverBonusMutation>;\nexport type AdminDeliverBonusMutationResult = Apollo.MutationResult<AdminDeliverBonusMutation>;\nexport type AdminDeliverBonusMutationOptions = Apollo.BaseMutationOptions<AdminDeliverBonusMutation, AdminDeliverBonusMutationVariables>;\nexport const AdminLoginDocument = gql`\n    mutation AdminLogin($input: AdminLoginMutationInput!) {\n  adminLogin(input: $input) {\n    error\n    success\n  }\n}\n    `;\nexport type AdminLoginMutationFn = Apollo.MutationFunction<AdminLoginMutation, AdminLoginMutationVariables>;\n\n/**\n * __useAdminLoginMutation__\n *\n * To run a mutation, you first call `useAdminLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminLoginMutation, { data, loading, error }] = useAdminLoginMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminLoginMutation(baseOptions?: Apollo.MutationHookOptions<AdminLoginMutation, AdminLoginMutationVariables>) {\n        return Apollo.useMutation<AdminLoginMutation, AdminLoginMutationVariables>(AdminLoginDocument, baseOptions);\n      }\nexport type AdminLoginMutationHookResult = ReturnType<typeof useAdminLoginMutation>;\nexport type AdminLoginMutationResult = Apollo.MutationResult<AdminLoginMutation>;\nexport type AdminLoginMutationOptions = Apollo.BaseMutationOptions<AdminLoginMutation, AdminLoginMutationVariables>;\nexport const AdminPreviewAnouncementDocument = gql`\n    mutation AdminPreviewAnouncement($input: AdminPreviewAnnouncementMutationInput!) {\n  adminPreviewAnnouncement(input: $input) {\n    error\n    success\n  }\n}\n    `;\nexport type AdminPreviewAnouncementMutationFn = Apollo.MutationFunction<AdminPreviewAnouncementMutation, AdminPreviewAnouncementMutationVariables>;\n\n/**\n * __useAdminPreviewAnouncementMutation__\n *\n * To run a mutation, you first call `useAdminPreviewAnouncementMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminPreviewAnouncementMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminPreviewAnouncementMutation, { data, loading, error }] = useAdminPreviewAnouncementMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminPreviewAnouncementMutation(baseOptions?: Apollo.MutationHookOptions<AdminPreviewAnouncementMutation, AdminPreviewAnouncementMutationVariables>) {\n        return Apollo.useMutation<AdminPreviewAnouncementMutation, AdminPreviewAnouncementMutationVariables>(AdminPreviewAnouncementDocument, baseOptions);\n      }\nexport type AdminPreviewAnouncementMutationHookResult = ReturnType<typeof useAdminPreviewAnouncementMutation>;\nexport type AdminPreviewAnouncementMutationResult = Apollo.MutationResult<AdminPreviewAnouncementMutation>;\nexport type AdminPreviewAnouncementMutationOptions = Apollo.BaseMutationOptions<AdminPreviewAnouncementMutation, AdminPreviewAnouncementMutationVariables>;\nexport const AdminRecoverCommentDocument = gql`\n    mutation AdminRecoverComment($input: AdminRecoverCommentMutationInput!) {\n  adminRecoverComment(input: $input) {\n    error\n    success\n  }\n}\n    `;\nexport type AdminRecoverCommentMutationFn = Apollo.MutationFunction<AdminRecoverCommentMutation, AdminRecoverCommentMutationVariables>;\n\n/**\n * __useAdminRecoverCommentMutation__\n *\n * To run a mutation, you first call `useAdminRecoverCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminRecoverCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminRecoverCommentMutation, { data, loading, error }] = useAdminRecoverCommentMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminRecoverCommentMutation(baseOptions?: Apollo.MutationHookOptions<AdminRecoverCommentMutation, AdminRecoverCommentMutationVariables>) {\n        return Apollo.useMutation<AdminRecoverCommentMutation, AdminRecoverCommentMutationVariables>(AdminRecoverCommentDocument, baseOptions);\n      }\nexport type AdminRecoverCommentMutationHookResult = ReturnType<typeof useAdminRecoverCommentMutation>;\nexport type AdminRecoverCommentMutationResult = Apollo.MutationResult<AdminRecoverCommentMutation>;\nexport type AdminRecoverCommentMutationOptions = Apollo.BaseMutationOptions<AdminRecoverCommentMutation, AdminRecoverCommentMutationVariables>;\nexport const AdminUnbanUserDocument = gql`\n    mutation AdminUnbanUser($input: AdminUnbanUserMutationInput!) {\n  adminUnbanUser(input: $input) {\n    id\n    bannedAt\n  }\n}\n    `;\nexport type AdminUnbanUserMutationFn = Apollo.MutationFunction<AdminUnbanUserMutation, AdminUnbanUserMutationVariables>;\n\n/**\n * __useAdminUnbanUserMutation__\n *\n * To run a mutation, you first call `useAdminUnbanUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminUnbanUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminUnbanUserMutation, { data, loading, error }] = useAdminUnbanUserMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminUnbanUserMutation(baseOptions?: Apollo.MutationHookOptions<AdminUnbanUserMutation, AdminUnbanUserMutationVariables>) {\n        return Apollo.useMutation<AdminUnbanUserMutation, AdminUnbanUserMutationVariables>(AdminUnbanUserDocument, baseOptions);\n      }\nexport type AdminUnbanUserMutationHookResult = ReturnType<typeof useAdminUnbanUserMutation>;\nexport type AdminUnbanUserMutationResult = Apollo.MutationResult<AdminUnbanUserMutation>;\nexport type AdminUnbanUserMutationOptions = Apollo.BaseMutationOptions<AdminUnbanUserMutation, AdminUnbanUserMutationVariables>;\nexport const AdminUnblockArticleDocument = gql`\n    mutation AdminUnblockArticle($input: AdminUnblockArticleMutationInput!) {\n  adminUnblockArticle(input: $input) {\n    id\n    uuid\n    state\n  }\n}\n    `;\nexport type AdminUnblockArticleMutationFn = Apollo.MutationFunction<AdminUnblockArticleMutation, AdminUnblockArticleMutationVariables>;\n\n/**\n * __useAdminUnblockArticleMutation__\n *\n * To run a mutation, you first call `useAdminUnblockArticleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminUnblockArticleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminUnblockArticleMutation, { data, loading, error }] = useAdminUnblockArticleMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminUnblockArticleMutation(baseOptions?: Apollo.MutationHookOptions<AdminUnblockArticleMutation, AdminUnblockArticleMutationVariables>) {\n        return Apollo.useMutation<AdminUnblockArticleMutation, AdminUnblockArticleMutationVariables>(AdminUnblockArticleDocument, baseOptions);\n      }\nexport type AdminUnblockArticleMutationHookResult = ReturnType<typeof useAdminUnblockArticleMutation>;\nexport type AdminUnblockArticleMutationResult = Apollo.MutationResult<AdminUnblockArticleMutation>;\nexport type AdminUnblockArticleMutationOptions = Apollo.BaseMutationOptions<AdminUnblockArticleMutation, AdminUnblockArticleMutationVariables>;\nexport const AdminUpdateAnouncementDocument = gql`\n    mutation AdminUpdateAnouncement($input: AdminUpdateAnnouncementMutationInput!) {\n  adminUpdateAnnouncement(input: $input) {\n    error\n    success\n  }\n}\n    `;\nexport type AdminUpdateAnouncementMutationFn = Apollo.MutationFunction<AdminUpdateAnouncementMutation, AdminUpdateAnouncementMutationVariables>;\n\n/**\n * __useAdminUpdateAnouncementMutation__\n *\n * To run a mutation, you first call `useAdminUpdateAnouncementMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminUpdateAnouncementMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminUpdateAnouncementMutation, { data, loading, error }] = useAdminUpdateAnouncementMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminUpdateAnouncementMutation(baseOptions?: Apollo.MutationHookOptions<AdminUpdateAnouncementMutation, AdminUpdateAnouncementMutationVariables>) {\n        return Apollo.useMutation<AdminUpdateAnouncementMutation, AdminUpdateAnouncementMutationVariables>(AdminUpdateAnouncementDocument, baseOptions);\n      }\nexport type AdminUpdateAnouncementMutationHookResult = ReturnType<typeof useAdminUpdateAnouncementMutation>;\nexport type AdminUpdateAnouncementMutationResult = Apollo.MutationResult<AdminUpdateAnouncementMutation>;\nexport type AdminUpdateAnouncementMutationOptions = Apollo.BaseMutationOptions<AdminUpdateAnouncementMutation, AdminUpdateAnouncementMutationVariables>;\nexport const AdminUpdateBonusDocument = gql`\n    mutation AdminUpdateBonus($input: AdminUpdateBonusMutationInput!) {\n  adminUpdateBonus(input: $input) {\n    error\n  }\n}\n    `;\nexport type AdminUpdateBonusMutationFn = Apollo.MutationFunction<AdminUpdateBonusMutation, AdminUpdateBonusMutationVariables>;\n\n/**\n * __useAdminUpdateBonusMutation__\n *\n * To run a mutation, you first call `useAdminUpdateBonusMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminUpdateBonusMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminUpdateBonusMutation, { data, loading, error }] = useAdminUpdateBonusMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminUpdateBonusMutation(baseOptions?: Apollo.MutationHookOptions<AdminUpdateBonusMutation, AdminUpdateBonusMutationVariables>) {\n        return Apollo.useMutation<AdminUpdateBonusMutation, AdminUpdateBonusMutationVariables>(AdminUpdateBonusDocument, baseOptions);\n      }\nexport type AdminUpdateBonusMutationHookResult = ReturnType<typeof useAdminUpdateBonusMutation>;\nexport type AdminUpdateBonusMutationResult = Apollo.MutationResult<AdminUpdateBonusMutation>;\nexport type AdminUpdateBonusMutationOptions = Apollo.BaseMutationOptions<AdminUpdateBonusMutation, AdminUpdateBonusMutationVariables>;\nexport const AdminAnnouncementConnectionDocument = gql`\n    query AdminAnnouncementConnection($after: String) {\n  adminAnnouncementConnection(after: $after) {\n    nodes {\n      id\n      content\n      state\n      messageType\n      createdAt\n      deliveredAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminAnnouncementConnectionQuery__\n *\n * To run a query within a React component, call `useAdminAnnouncementConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminAnnouncementConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminAnnouncementConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminAnnouncementConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminAnnouncementConnectionQuery, AdminAnnouncementConnectionQueryVariables>) {\n        return Apollo.useQuery<AdminAnnouncementConnectionQuery, AdminAnnouncementConnectionQueryVariables>(AdminAnnouncementConnectionDocument, baseOptions);\n      }\nexport function useAdminAnnouncementConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminAnnouncementConnectionQuery, AdminAnnouncementConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<AdminAnnouncementConnectionQuery, AdminAnnouncementConnectionQueryVariables>(AdminAnnouncementConnectionDocument, baseOptions);\n        }\nexport type AdminAnnouncementConnectionQueryHookResult = ReturnType<typeof useAdminAnnouncementConnectionQuery>;\nexport type AdminAnnouncementConnectionLazyQueryHookResult = ReturnType<typeof useAdminAnnouncementConnectionLazyQuery>;\nexport type AdminAnnouncementConnectionQueryResult = Apollo.QueryResult<AdminAnnouncementConnectionQuery, AdminAnnouncementConnectionQueryVariables>;\nexport const ArticleChartDocument = gql`\n    query ArticleChart {\n  articleChart\n}\n    `;\n\n/**\n * __useArticleChartQuery__\n *\n * To run a query within a React component, call `useArticleChartQuery` and pass it any options that fit your needs.\n * When your component renders, `useArticleChartQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useArticleChartQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useArticleChartQuery(baseOptions?: Apollo.QueryHookOptions<ArticleChartQuery, ArticleChartQueryVariables>) {\n        return Apollo.useQuery<ArticleChartQuery, ArticleChartQueryVariables>(ArticleChartDocument, baseOptions);\n      }\nexport function useArticleChartLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ArticleChartQuery, ArticleChartQueryVariables>) {\n          return Apollo.useLazyQuery<ArticleChartQuery, ArticleChartQueryVariables>(ArticleChartDocument, baseOptions);\n        }\nexport type ArticleChartQueryHookResult = ReturnType<typeof useArticleChartQuery>;\nexport type ArticleChartLazyQueryHookResult = ReturnType<typeof useArticleChartLazyQuery>;\nexport type ArticleChartQueryResult = Apollo.QueryResult<ArticleChartQuery, ArticleChartQueryVariables>;\nexport const AdminArticleConnectionDocument = gql`\n    query AdminArticleConnection($query: String, $state: String, $after: String) {\n  adminArticleConnection(query: $query, state: $state, after: $after) {\n    nodes {\n      id\n      uuid\n      title\n      intro\n      price\n      revenue\n      ordersCount\n      commentsCount\n      state\n      wallet {\n        name\n        uuid\n      }\n      author {\n        name\n        avatarUrl\n      }\n      currency {\n        assetId\n        symbol\n        iconUrl\n      }\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminArticleConnectionQuery__\n *\n * To run a query within a React component, call `useAdminArticleConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminArticleConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminArticleConnectionQuery({\n *   variables: {\n *      query: // value for 'query'\n *      state: // value for 'state'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminArticleConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminArticleConnectionQuery, AdminArticleConnectionQueryVariables>) {\n        return Apollo.useQuery<AdminArticleConnectionQuery, AdminArticleConnectionQueryVariables>(AdminArticleConnectionDocument, baseOptions);\n      }\nexport function useAdminArticleConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminArticleConnectionQuery, AdminArticleConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<AdminArticleConnectionQuery, AdminArticleConnectionQueryVariables>(AdminArticleConnectionDocument, baseOptions);\n        }\nexport type AdminArticleConnectionQueryHookResult = ReturnType<typeof useAdminArticleConnectionQuery>;\nexport type AdminArticleConnectionLazyQueryHookResult = ReturnType<typeof useAdminArticleConnectionLazyQuery>;\nexport type AdminArticleConnectionQueryResult = Apollo.QueryResult<AdminArticleConnectionQuery, AdminArticleConnectionQueryVariables>;\nexport const AdminArticleDocument = gql`\n    query AdminArticle($uuid: ID!) {\n  adminArticle(uuid: $uuid) {\n    id\n    uuid\n    title\n    intro\n    price\n    revenue\n    ordersCount\n    commentsCount\n    state\n    walletId\n    author {\n      name\n      avatarUrl\n    }\n    createdAt\n  }\n}\n    `;\n\n/**\n * __useAdminArticleQuery__\n *\n * To run a query within a React component, call `useAdminArticleQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminArticleQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminArticleQuery({\n *   variables: {\n *      uuid: // value for 'uuid'\n *   },\n * });\n */\nexport function useAdminArticleQuery(baseOptions: Apollo.QueryHookOptions<AdminArticleQuery, AdminArticleQueryVariables>) {\n        return Apollo.useQuery<AdminArticleQuery, AdminArticleQueryVariables>(AdminArticleDocument, baseOptions);\n      }\nexport function useAdminArticleLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminArticleQuery, AdminArticleQueryVariables>) {\n          return Apollo.useLazyQuery<AdminArticleQuery, AdminArticleQueryVariables>(AdminArticleDocument, baseOptions);\n        }\nexport type AdminArticleQueryHookResult = ReturnType<typeof useAdminArticleQuery>;\nexport type AdminArticleLazyQueryHookResult = ReturnType<typeof useAdminArticleLazyQuery>;\nexport type AdminArticleQueryResult = Apollo.QueryResult<AdminArticleQuery, AdminArticleQueryVariables>;\nexport const AdminBonusConnectionDocument = gql`\n    query AdminBonusConnection($after: String) {\n  adminBonusConnection(after: $after) {\n    nodes {\n      id\n      title\n      description\n      amount\n      assetId\n      state\n      createdAt\n      user {\n        id\n        avatarUrl\n        name\n        mixinId\n      }\n      transfer {\n        snapshotId\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminBonusConnectionQuery__\n *\n * To run a query within a React component, call `useAdminBonusConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminBonusConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminBonusConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminBonusConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminBonusConnectionQuery, AdminBonusConnectionQueryVariables>) {\n        return Apollo.useQuery<AdminBonusConnectionQuery, AdminBonusConnectionQueryVariables>(AdminBonusConnectionDocument, baseOptions);\n      }\nexport function useAdminBonusConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminBonusConnectionQuery, AdminBonusConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<AdminBonusConnectionQuery, AdminBonusConnectionQueryVariables>(AdminBonusConnectionDocument, baseOptions);\n        }\nexport type AdminBonusConnectionQueryHookResult = ReturnType<typeof useAdminBonusConnectionQuery>;\nexport type AdminBonusConnectionLazyQueryHookResult = ReturnType<typeof useAdminBonusConnectionLazyQuery>;\nexport type AdminBonusConnectionQueryResult = Apollo.QueryResult<AdminBonusConnectionQuery, AdminBonusConnectionQueryVariables>;\nexport const AdminMixinMessageConnectionDocument = gql`\n    query AdminMixinMessageConnection($after: String) {\n  adminMixinMessageConnection(after: $after) {\n    nodes {\n      id\n      action\n      category\n      content\n      userId\n      user {\n        name\n        avatarUrl\n      }\n      createdAt\n      processedAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminMixinMessageConnectionQuery__\n *\n * To run a query within a React component, call `useAdminMixinMessageConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminMixinMessageConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminMixinMessageConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminMixinMessageConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminMixinMessageConnectionQuery, AdminMixinMessageConnectionQueryVariables>) {\n        return Apollo.useQuery<AdminMixinMessageConnectionQuery, AdminMixinMessageConnectionQueryVariables>(AdminMixinMessageConnectionDocument, baseOptions);\n      }\nexport function useAdminMixinMessageConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminMixinMessageConnectionQuery, AdminMixinMessageConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<AdminMixinMessageConnectionQuery, AdminMixinMessageConnectionQueryVariables>(AdminMixinMessageConnectionDocument, baseOptions);\n        }\nexport type AdminMixinMessageConnectionQueryHookResult = ReturnType<typeof useAdminMixinMessageConnectionQuery>;\nexport type AdminMixinMessageConnectionLazyQueryHookResult = ReturnType<typeof useAdminMixinMessageConnectionLazyQuery>;\nexport type AdminMixinMessageConnectionQueryResult = Apollo.QueryResult<AdminMixinMessageConnectionQuery, AdminMixinMessageConnectionQueryVariables>;\nexport const AdminMixinNetworkSnapshotConnectionDocument = gql`\n    query AdminMixinNetworkSnapshotConnection($filter: String, $userId: String, $after: String) {\n  adminMixinNetworkSnapshotConnection(\n    filter: $filter\n    userId: $userId\n    after: $after\n  ) {\n    nodes {\n      id\n      traceId\n      snapshotId\n      assetId\n      userId\n      amount\n      data\n      opponentId\n      opponent {\n        name\n        avatarUrl\n        mixinId\n      }\n      article {\n        id\n        uuid\n        title\n      }\n      createdAt\n      processedAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminMixinNetworkSnapshotConnectionQuery__\n *\n * To run a query within a React component, call `useAdminMixinNetworkSnapshotConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminMixinNetworkSnapshotConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminMixinNetworkSnapshotConnectionQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      userId: // value for 'userId'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminMixinNetworkSnapshotConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminMixinNetworkSnapshotConnectionQuery, AdminMixinNetworkSnapshotConnectionQueryVariables>) {\n        return Apollo.useQuery<AdminMixinNetworkSnapshotConnectionQuery, AdminMixinNetworkSnapshotConnectionQueryVariables>(AdminMixinNetworkSnapshotConnectionDocument, baseOptions);\n      }\nexport function useAdminMixinNetworkSnapshotConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminMixinNetworkSnapshotConnectionQuery, AdminMixinNetworkSnapshotConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<AdminMixinNetworkSnapshotConnectionQuery, AdminMixinNetworkSnapshotConnectionQueryVariables>(AdminMixinNetworkSnapshotConnectionDocument, baseOptions);\n        }\nexport type AdminMixinNetworkSnapshotConnectionQueryHookResult = ReturnType<typeof useAdminMixinNetworkSnapshotConnectionQuery>;\nexport type AdminMixinNetworkSnapshotConnectionLazyQueryHookResult = ReturnType<typeof useAdminMixinNetworkSnapshotConnectionLazyQuery>;\nexport type AdminMixinNetworkSnapshotConnectionQueryResult = Apollo.QueryResult<AdminMixinNetworkSnapshotConnectionQuery, AdminMixinNetworkSnapshotConnectionQueryVariables>;\nexport const AdminOrderConnectionDocument = gql`\n    query AdminOrderConnection($itemId: ID, $itemType: String, $after: String) {\n  adminOrderConnection(itemId: $itemId, itemType: $itemType, after: $after) {\n    nodes {\n      id\n      traceId\n      orderType\n      itemId\n      itemType\n      state\n      total\n      seller {\n        name\n        avatarUrl\n        mixinId\n      }\n      buyer {\n        name\n        avatarUrl\n        mixinId\n      }\n      currency {\n        assetId\n        iconUrl\n        symbol\n      }\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminOrderConnectionQuery__\n *\n * To run a query within a React component, call `useAdminOrderConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminOrderConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminOrderConnectionQuery({\n *   variables: {\n *      itemId: // value for 'itemId'\n *      itemType: // value for 'itemType'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminOrderConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminOrderConnectionQuery, AdminOrderConnectionQueryVariables>) {\n        return Apollo.useQuery<AdminOrderConnectionQuery, AdminOrderConnectionQueryVariables>(AdminOrderConnectionDocument, baseOptions);\n      }\nexport function useAdminOrderConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminOrderConnectionQuery, AdminOrderConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<AdminOrderConnectionQuery, AdminOrderConnectionQueryVariables>(AdminOrderConnectionDocument, baseOptions);\n        }\nexport type AdminOrderConnectionQueryHookResult = ReturnType<typeof useAdminOrderConnectionQuery>;\nexport type AdminOrderConnectionLazyQueryHookResult = ReturnType<typeof useAdminOrderConnectionLazyQuery>;\nexport type AdminOrderConnectionQueryResult = Apollo.QueryResult<AdminOrderConnectionQuery, AdminOrderConnectionQueryVariables>;\nexport const AdminPaymentConnectionDocument = gql`\n    query AdminPaymentConnection($after: String) {\n  adminPaymentConnection(after: $after) {\n    nodes {\n      traceId\n      snapshotId\n      amount\n      state\n      assetId\n      payer {\n        name\n        mixinId\n        avatarUrl\n      }\n      order {\n        orderType\n      }\n      currency {\n        assetId\n        iconUrl\n        symbol\n      }\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminPaymentConnectionQuery__\n *\n * To run a query within a React component, call `useAdminPaymentConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminPaymentConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminPaymentConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminPaymentConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminPaymentConnectionQuery, AdminPaymentConnectionQueryVariables>) {\n        return Apollo.useQuery<AdminPaymentConnectionQuery, AdminPaymentConnectionQueryVariables>(AdminPaymentConnectionDocument, baseOptions);\n      }\nexport function useAdminPaymentConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminPaymentConnectionQuery, AdminPaymentConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<AdminPaymentConnectionQuery, AdminPaymentConnectionQueryVariables>(AdminPaymentConnectionDocument, baseOptions);\n        }\nexport type AdminPaymentConnectionQueryHookResult = ReturnType<typeof useAdminPaymentConnectionQuery>;\nexport type AdminPaymentConnectionLazyQueryHookResult = ReturnType<typeof useAdminPaymentConnectionLazyQuery>;\nexport type AdminPaymentConnectionQueryResult = Apollo.QueryResult<AdminPaymentConnectionQuery, AdminPaymentConnectionQueryVariables>;\nexport const RevenueChartDocument = gql`\n    query RevenueChart {\n  revenueChart\n}\n    `;\n\n/**\n * __useRevenueChartQuery__\n *\n * To run a query within a React component, call `useRevenueChartQuery` and pass it any options that fit your needs.\n * When your component renders, `useRevenueChartQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useRevenueChartQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useRevenueChartQuery(baseOptions?: Apollo.QueryHookOptions<RevenueChartQuery, RevenueChartQueryVariables>) {\n        return Apollo.useQuery<RevenueChartQuery, RevenueChartQueryVariables>(RevenueChartDocument, baseOptions);\n      }\nexport function useRevenueChartLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<RevenueChartQuery, RevenueChartQueryVariables>) {\n          return Apollo.useLazyQuery<RevenueChartQuery, RevenueChartQueryVariables>(RevenueChartDocument, baseOptions);\n        }\nexport type RevenueChartQueryHookResult = ReturnType<typeof useRevenueChartQuery>;\nexport type RevenueChartLazyQueryHookResult = ReturnType<typeof useRevenueChartLazyQuery>;\nexport type RevenueChartQueryResult = Apollo.QueryResult<RevenueChartQuery, RevenueChartQueryVariables>;\nexport const AdminSwapOrderConnectionDocument = gql`\n    query AdminSwapOrderConnection($userId: ID, $after: String) {\n  adminSwapOrderConnection(userId: $userId, after: $after) {\n    nodes {\n      id\n      traceId\n      state\n      funds\n      amount\n      minAmount\n      fillAssetId\n      payAssetId\n      article {\n        uuid\n        title\n        price\n      }\n      payer {\n        name\n        avatarUrl\n        mixinId\n      }\n      payAsset {\n        assetId\n        iconUrl\n        symbol\n      }\n      fillAsset {\n        assetId\n        iconUrl\n        symbol\n      }\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminSwapOrderConnectionQuery__\n *\n * To run a query within a React component, call `useAdminSwapOrderConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminSwapOrderConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminSwapOrderConnectionQuery({\n *   variables: {\n *      userId: // value for 'userId'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminSwapOrderConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminSwapOrderConnectionQuery, AdminSwapOrderConnectionQueryVariables>) {\n        return Apollo.useQuery<AdminSwapOrderConnectionQuery, AdminSwapOrderConnectionQueryVariables>(AdminSwapOrderConnectionDocument, baseOptions);\n      }\nexport function useAdminSwapOrderConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminSwapOrderConnectionQuery, AdminSwapOrderConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<AdminSwapOrderConnectionQuery, AdminSwapOrderConnectionQueryVariables>(AdminSwapOrderConnectionDocument, baseOptions);\n        }\nexport type AdminSwapOrderConnectionQueryHookResult = ReturnType<typeof useAdminSwapOrderConnectionQuery>;\nexport type AdminSwapOrderConnectionLazyQueryHookResult = ReturnType<typeof useAdminSwapOrderConnectionLazyQuery>;\nexport type AdminSwapOrderConnectionQueryResult = Apollo.QueryResult<AdminSwapOrderConnectionQuery, AdminSwapOrderConnectionQueryVariables>;\nexport const AdminTransferConnectionDocument = gql`\n    query AdminTransferConnection($itemId: ID, $itemType: String, $souceId: ID, $souceType: String, $after: String) {\n  adminTransferConnection(\n    itemId: $itemId\n    itemType: $itemType\n    sourceId: $souceId\n    sourceType: $souceType\n    after: $after\n  ) {\n    nodes {\n      traceId\n      snapshotId\n      amount\n      memo\n      transferType\n      assetId\n      opponentId\n      walletId\n      recipient {\n        name\n        avatarUrl\n        mixinId\n      }\n      currency {\n        assetId\n        iconUrl\n        symbol\n      }\n      processedAt\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminTransferConnectionQuery__\n *\n * To run a query within a React component, call `useAdminTransferConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminTransferConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminTransferConnectionQuery({\n *   variables: {\n *      itemId: // value for 'itemId'\n *      itemType: // value for 'itemType'\n *      souceId: // value for 'souceId'\n *      souceType: // value for 'souceType'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminTransferConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminTransferConnectionQuery, AdminTransferConnectionQueryVariables>) {\n        return Apollo.useQuery<AdminTransferConnectionQuery, AdminTransferConnectionQueryVariables>(AdminTransferConnectionDocument, baseOptions);\n      }\nexport function useAdminTransferConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminTransferConnectionQuery, AdminTransferConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<AdminTransferConnectionQuery, AdminTransferConnectionQueryVariables>(AdminTransferConnectionDocument, baseOptions);\n        }\nexport type AdminTransferConnectionQueryHookResult = ReturnType<typeof useAdminTransferConnectionQuery>;\nexport type AdminTransferConnectionLazyQueryHookResult = ReturnType<typeof useAdminTransferConnectionLazyQuery>;\nexport type AdminTransferConnectionQueryResult = Apollo.QueryResult<AdminTransferConnectionQuery, AdminTransferConnectionQueryVariables>;\nexport const UserChartDocument = gql`\n    query UserChart {\n  userChart\n}\n    `;\n\n/**\n * __useUserChartQuery__\n *\n * To run a query within a React component, call `useUserChartQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserChartQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserChartQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useUserChartQuery(baseOptions?: Apollo.QueryHookOptions<UserChartQuery, UserChartQueryVariables>) {\n        return Apollo.useQuery<UserChartQuery, UserChartQueryVariables>(UserChartDocument, baseOptions);\n      }\nexport function useUserChartLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserChartQuery, UserChartQueryVariables>) {\n          return Apollo.useLazyQuery<UserChartQuery, UserChartQueryVariables>(UserChartDocument, baseOptions);\n        }\nexport type UserChartQueryHookResult = ReturnType<typeof useUserChartQuery>;\nexport type UserChartLazyQueryHookResult = ReturnType<typeof useUserChartLazyQuery>;\nexport type UserChartQueryResult = Apollo.QueryResult<UserChartQuery, UserChartQueryVariables>;\nexport const AdminUserConnectionDocument = gql`\n    query AdminUserConnection($query: String, $orderBy: String, $filter: String, $after: String) {\n  adminUserConnection(\n    query: $query\n    orderBy: $orderBy\n    filter: $filter\n    after: $after\n  ) {\n    nodes {\n      id\n      name\n      mixinId\n      mixinUuid\n      avatarUrl\n      statistics {\n        articlesCount\n        commentsCount\n        revenueTotalUsd\n        paymentTotalUsd\n      }\n      createdAt\n      bannedAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminUserConnectionQuery__\n *\n * To run a query within a React component, call `useAdminUserConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminUserConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminUserConnectionQuery({\n *   variables: {\n *      query: // value for 'query'\n *      orderBy: // value for 'orderBy'\n *      filter: // value for 'filter'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminUserConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>) {\n        return Apollo.useQuery<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>(AdminUserConnectionDocument, baseOptions);\n      }\nexport function useAdminUserConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>(AdminUserConnectionDocument, baseOptions);\n        }\nexport type AdminUserConnectionQueryHookResult = ReturnType<typeof useAdminUserConnectionQuery>;\nexport type AdminUserConnectionLazyQueryHookResult = ReturnType<typeof useAdminUserConnectionLazyQuery>;\nexport type AdminUserConnectionQueryResult = Apollo.QueryResult<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>;\nexport const AdminUserDocument = gql`\n    query AdminUser($mixinId: ID!) {\n  adminUser(mixinId: $mixinId) {\n    id\n    name\n    mixinId\n    mixinUuid\n    avatarUrl\n    bio\n    walletId\n    statistics {\n      articlesCount\n      authorRevenueTotalUsd\n      readerRevenueTotalUsd\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminUserQuery__\n *\n * To run a query within a React component, call `useAdminUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminUserQuery({\n *   variables: {\n *      mixinId: // value for 'mixinId'\n *   },\n * });\n */\nexport function useAdminUserQuery(baseOptions: Apollo.QueryHookOptions<AdminUserQuery, AdminUserQueryVariables>) {\n        return Apollo.useQuery<AdminUserQuery, AdminUserQueryVariables>(AdminUserDocument, baseOptions);\n      }\nexport function useAdminUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminUserQuery, AdminUserQueryVariables>) {\n          return Apollo.useLazyQuery<AdminUserQuery, AdminUserQueryVariables>(AdminUserDocument, baseOptions);\n        }\nexport type AdminUserQueryHookResult = ReturnType<typeof useAdminUserQuery>;\nexport type AdminUserLazyQueryHookResult = ReturnType<typeof useAdminUserLazyQuery>;\nexport type AdminUserQueryResult = Apollo.QueryResult<AdminUserQuery, AdminUserQueryVariables>;\nexport const AdminWalletBalanceDocument = gql`\n    query AdminWalletBalance($userId: String) {\n  adminWalletBalance(userId: $userId) {\n    assetId\n    name\n    symbol\n    iconUrl\n    balance\n    priceUsd\n    priceBtc\n  }\n}\n    `;\n\n/**\n * __useAdminWalletBalanceQuery__\n *\n * To run a query within a React component, call `useAdminWalletBalanceQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminWalletBalanceQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminWalletBalanceQuery({\n *   variables: {\n *      userId: // value for 'userId'\n *   },\n * });\n */\nexport function useAdminWalletBalanceQuery(baseOptions?: Apollo.QueryHookOptions<AdminWalletBalanceQuery, AdminWalletBalanceQueryVariables>) {\n        return Apollo.useQuery<AdminWalletBalanceQuery, AdminWalletBalanceQueryVariables>(AdminWalletBalanceDocument, baseOptions);\n      }\nexport function useAdminWalletBalanceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminWalletBalanceQuery, AdminWalletBalanceQueryVariables>) {\n          return Apollo.useLazyQuery<AdminWalletBalanceQuery, AdminWalletBalanceQueryVariables>(AdminWalletBalanceDocument, baseOptions);\n        }\nexport type AdminWalletBalanceQueryHookResult = ReturnType<typeof useAdminWalletBalanceQuery>;\nexport type AdminWalletBalanceLazyQueryHookResult = ReturnType<typeof useAdminWalletBalanceLazyQuery>;\nexport type AdminWalletBalanceQueryResult = Apollo.QueryResult<AdminWalletBalanceQuery, AdminWalletBalanceQueryVariables>;\nexport const CreateCommentDocument = gql`\n    mutation CreateComment($input: CreateCommentMutationInput!) {\n  createComment(input: $input) {\n    error\n    commentable {\n      id\n      commentingSubscribed\n    }\n  }\n}\n    `;\nexport type CreateCommentMutationFn = Apollo.MutationFunction<CreateCommentMutation, CreateCommentMutationVariables>;\n\n/**\n * __useCreateCommentMutation__\n *\n * To run a mutation, you first call `useCreateCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createCommentMutation, { data, loading, error }] = useCreateCommentMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCreateCommentMutation(baseOptions?: Apollo.MutationHookOptions<CreateCommentMutation, CreateCommentMutationVariables>) {\n        return Apollo.useMutation<CreateCommentMutation, CreateCommentMutationVariables>(CreateCommentDocument, baseOptions);\n      }\nexport type CreateCommentMutationHookResult = ReturnType<typeof useCreateCommentMutation>;\nexport type CreateCommentMutationResult = Apollo.MutationResult<CreateCommentMutation>;\nexport type CreateCommentMutationOptions = Apollo.BaseMutationOptions<CreateCommentMutation, CreateCommentMutationVariables>;\nexport const DownvoteArticleDocument = gql`\n    mutation DownvoteArticle($input: DownvoteArticleMutationInput!) {\n  downvoteArticle(input: $input) {\n    id\n    uuid\n    upvotesCount\n    downvotesCount\n    upvoted\n    downvoted\n  }\n}\n    `;\nexport type DownvoteArticleMutationFn = Apollo.MutationFunction<DownvoteArticleMutation, DownvoteArticleMutationVariables>;\n\n/**\n * __useDownvoteArticleMutation__\n *\n * To run a mutation, you first call `useDownvoteArticleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDownvoteArticleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [downvoteArticleMutation, { data, loading, error }] = useDownvoteArticleMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useDownvoteArticleMutation(baseOptions?: Apollo.MutationHookOptions<DownvoteArticleMutation, DownvoteArticleMutationVariables>) {\n        return Apollo.useMutation<DownvoteArticleMutation, DownvoteArticleMutationVariables>(DownvoteArticleDocument, baseOptions);\n      }\nexport type DownvoteArticleMutationHookResult = ReturnType<typeof useDownvoteArticleMutation>;\nexport type DownvoteArticleMutationResult = Apollo.MutationResult<DownvoteArticleMutation>;\nexport type DownvoteArticleMutationOptions = Apollo.BaseMutationOptions<DownvoteArticleMutation, DownvoteArticleMutationVariables>;\nexport const DownvoteCommentDocument = gql`\n    mutation DownvoteComment($input: DownvoteCommentMutationInput!) {\n  downvoteComment(input: $input) {\n    id\n    upvoted\n    downvoted\n    upvotesCount\n    downvotesCount\n  }\n}\n    `;\nexport type DownvoteCommentMutationFn = Apollo.MutationFunction<DownvoteCommentMutation, DownvoteCommentMutationVariables>;\n\n/**\n * __useDownvoteCommentMutation__\n *\n * To run a mutation, you first call `useDownvoteCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDownvoteCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [downvoteCommentMutation, { data, loading, error }] = useDownvoteCommentMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useDownvoteCommentMutation(baseOptions?: Apollo.MutationHookOptions<DownvoteCommentMutation, DownvoteCommentMutationVariables>) {\n        return Apollo.useMutation<DownvoteCommentMutation, DownvoteCommentMutationVariables>(DownvoteCommentDocument, baseOptions);\n      }\nexport type DownvoteCommentMutationHookResult = ReturnType<typeof useDownvoteCommentMutation>;\nexport type DownvoteCommentMutationResult = Apollo.MutationResult<DownvoteCommentMutation>;\nexport type DownvoteCommentMutationOptions = Apollo.BaseMutationOptions<DownvoteCommentMutation, DownvoteCommentMutationVariables>;\nexport const ToggleAuthoringSubscribeUserActionDocument = gql`\n    mutation ToggleAuthoringSubscribeUserAction($input: ToggleAuthoringSubscribeUserActionMutationInput!) {\n  toggleAuthoringSubscribeUserAction(input: $input) {\n    error\n  }\n}\n    `;\nexport type ToggleAuthoringSubscribeUserActionMutationFn = Apollo.MutationFunction<ToggleAuthoringSubscribeUserActionMutation, ToggleAuthoringSubscribeUserActionMutationVariables>;\n\n/**\n * __useToggleAuthoringSubscribeUserActionMutation__\n *\n * To run a mutation, you first call `useToggleAuthoringSubscribeUserActionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useToggleAuthoringSubscribeUserActionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [toggleAuthoringSubscribeUserActionMutation, { data, loading, error }] = useToggleAuthoringSubscribeUserActionMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useToggleAuthoringSubscribeUserActionMutation(baseOptions?: Apollo.MutationHookOptions<ToggleAuthoringSubscribeUserActionMutation, ToggleAuthoringSubscribeUserActionMutationVariables>) {\n        return Apollo.useMutation<ToggleAuthoringSubscribeUserActionMutation, ToggleAuthoringSubscribeUserActionMutationVariables>(ToggleAuthoringSubscribeUserActionDocument, baseOptions);\n      }\nexport type ToggleAuthoringSubscribeUserActionMutationHookResult = ReturnType<typeof useToggleAuthoringSubscribeUserActionMutation>;\nexport type ToggleAuthoringSubscribeUserActionMutationResult = Apollo.MutationResult<ToggleAuthoringSubscribeUserActionMutation>;\nexport type ToggleAuthoringSubscribeUserActionMutationOptions = Apollo.BaseMutationOptions<ToggleAuthoringSubscribeUserActionMutation, ToggleAuthoringSubscribeUserActionMutationVariables>;\nexport const ToggleCommentingSubscribeArticleActionDocument = gql`\n    mutation ToggleCommentingSubscribeArticleAction($input: ToggleCommentingSubscribeArticleActionMutationInput!) {\n  toggleCommentingSubscribeArticleAction(input: $input) {\n    id\n    uuid\n    commentingSubscribed\n  }\n}\n    `;\nexport type ToggleCommentingSubscribeArticleActionMutationFn = Apollo.MutationFunction<ToggleCommentingSubscribeArticleActionMutation, ToggleCommentingSubscribeArticleActionMutationVariables>;\n\n/**\n * __useToggleCommentingSubscribeArticleActionMutation__\n *\n * To run a mutation, you first call `useToggleCommentingSubscribeArticleActionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useToggleCommentingSubscribeArticleActionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [toggleCommentingSubscribeArticleActionMutation, { data, loading, error }] = useToggleCommentingSubscribeArticleActionMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useToggleCommentingSubscribeArticleActionMutation(baseOptions?: Apollo.MutationHookOptions<ToggleCommentingSubscribeArticleActionMutation, ToggleCommentingSubscribeArticleActionMutationVariables>) {\n        return Apollo.useMutation<ToggleCommentingSubscribeArticleActionMutation, ToggleCommentingSubscribeArticleActionMutationVariables>(ToggleCommentingSubscribeArticleActionDocument, baseOptions);\n      }\nexport type ToggleCommentingSubscribeArticleActionMutationHookResult = ReturnType<typeof useToggleCommentingSubscribeArticleActionMutation>;\nexport type ToggleCommentingSubscribeArticleActionMutationResult = Apollo.MutationResult<ToggleCommentingSubscribeArticleActionMutation>;\nexport type ToggleCommentingSubscribeArticleActionMutationOptions = Apollo.BaseMutationOptions<ToggleCommentingSubscribeArticleActionMutation, ToggleCommentingSubscribeArticleActionMutationVariables>;\nexport const ToggleReadingSubscribeUserActionDocument = gql`\n    mutation ToggleReadingSubscribeUserAction($input: ToggleReadingSubscribeUserActionMutationInput!) {\n  toggleReadingSubscribeUserAction(input: $input) {\n    error\n  }\n}\n    `;\nexport type ToggleReadingSubscribeUserActionMutationFn = Apollo.MutationFunction<ToggleReadingSubscribeUserActionMutation, ToggleReadingSubscribeUserActionMutationVariables>;\n\n/**\n * __useToggleReadingSubscribeUserActionMutation__\n *\n * To run a mutation, you first call `useToggleReadingSubscribeUserActionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useToggleReadingSubscribeUserActionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [toggleReadingSubscribeUserActionMutation, { data, loading, error }] = useToggleReadingSubscribeUserActionMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useToggleReadingSubscribeUserActionMutation(baseOptions?: Apollo.MutationHookOptions<ToggleReadingSubscribeUserActionMutation, ToggleReadingSubscribeUserActionMutationVariables>) {\n        return Apollo.useMutation<ToggleReadingSubscribeUserActionMutation, ToggleReadingSubscribeUserActionMutationVariables>(ToggleReadingSubscribeUserActionDocument, baseOptions);\n      }\nexport type ToggleReadingSubscribeUserActionMutationHookResult = ReturnType<typeof useToggleReadingSubscribeUserActionMutation>;\nexport type ToggleReadingSubscribeUserActionMutationResult = Apollo.MutationResult<ToggleReadingSubscribeUserActionMutation>;\nexport type ToggleReadingSubscribeUserActionMutationOptions = Apollo.BaseMutationOptions<ToggleReadingSubscribeUserActionMutation, ToggleReadingSubscribeUserActionMutationVariables>;\nexport const ToggleSubscribeTagActionDocument = gql`\n    mutation ToggleSubscribeTagAction($input: ToggleSubscribeTagActionMutationInput!) {\n  toggleSubscribeTagAction(input: $input) {\n    id\n    subscribed\n    subscribersCount\n  }\n}\n    `;\nexport type ToggleSubscribeTagActionMutationFn = Apollo.MutationFunction<ToggleSubscribeTagActionMutation, ToggleSubscribeTagActionMutationVariables>;\n\n/**\n * __useToggleSubscribeTagActionMutation__\n *\n * To run a mutation, you first call `useToggleSubscribeTagActionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useToggleSubscribeTagActionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [toggleSubscribeTagActionMutation, { data, loading, error }] = useToggleSubscribeTagActionMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useToggleSubscribeTagActionMutation(baseOptions?: Apollo.MutationHookOptions<ToggleSubscribeTagActionMutation, ToggleSubscribeTagActionMutationVariables>) {\n        return Apollo.useMutation<ToggleSubscribeTagActionMutation, ToggleSubscribeTagActionMutationVariables>(ToggleSubscribeTagActionDocument, baseOptions);\n      }\nexport type ToggleSubscribeTagActionMutationHookResult = ReturnType<typeof useToggleSubscribeTagActionMutation>;\nexport type ToggleSubscribeTagActionMutationResult = Apollo.MutationResult<ToggleSubscribeTagActionMutation>;\nexport type ToggleSubscribeTagActionMutationOptions = Apollo.BaseMutationOptions<ToggleSubscribeTagActionMutation, ToggleSubscribeTagActionMutationVariables>;\nexport const UpvoteArticleDocument = gql`\n    mutation UpvoteArticle($input: UpvoteArticleMutationInput!) {\n  upvoteArticle(input: $input) {\n    id\n    uuid\n    upvotesCount\n    downvotesCount\n    upvoted\n    downvoted\n  }\n}\n    `;\nexport type UpvoteArticleMutationFn = Apollo.MutationFunction<UpvoteArticleMutation, UpvoteArticleMutationVariables>;\n\n/**\n * __useUpvoteArticleMutation__\n *\n * To run a mutation, you first call `useUpvoteArticleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpvoteArticleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [upvoteArticleMutation, { data, loading, error }] = useUpvoteArticleMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUpvoteArticleMutation(baseOptions?: Apollo.MutationHookOptions<UpvoteArticleMutation, UpvoteArticleMutationVariables>) {\n        return Apollo.useMutation<UpvoteArticleMutation, UpvoteArticleMutationVariables>(UpvoteArticleDocument, baseOptions);\n      }\nexport type UpvoteArticleMutationHookResult = ReturnType<typeof useUpvoteArticleMutation>;\nexport type UpvoteArticleMutationResult = Apollo.MutationResult<UpvoteArticleMutation>;\nexport type UpvoteArticleMutationOptions = Apollo.BaseMutationOptions<UpvoteArticleMutation, UpvoteArticleMutationVariables>;\nexport const UpvoteCommentDocument = gql`\n    mutation UpvoteComment($input: UpvoteCommentMutationInput!) {\n  upvoteComment(input: $input) {\n    id\n    upvoted\n    downvoted\n    upvotesCount\n    downvotesCount\n  }\n}\n    `;\nexport type UpvoteCommentMutationFn = Apollo.MutationFunction<UpvoteCommentMutation, UpvoteCommentMutationVariables>;\n\n/**\n * __useUpvoteCommentMutation__\n *\n * To run a mutation, you first call `useUpvoteCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpvoteCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [upvoteCommentMutation, { data, loading, error }] = useUpvoteCommentMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUpvoteCommentMutation(baseOptions?: Apollo.MutationHookOptions<UpvoteCommentMutation, UpvoteCommentMutationVariables>) {\n        return Apollo.useMutation<UpvoteCommentMutation, UpvoteCommentMutationVariables>(UpvoteCommentDocument, baseOptions);\n      }\nexport type UpvoteCommentMutationHookResult = ReturnType<typeof useUpvoteCommentMutation>;\nexport type UpvoteCommentMutationResult = Apollo.MutationResult<UpvoteCommentMutation>;\nexport type UpvoteCommentMutationOptions = Apollo.BaseMutationOptions<UpvoteCommentMutation, UpvoteCommentMutationVariables>;\nexport const ArticleConnectionDocument = gql`\n    query ArticleConnection($order: String!, $query: String, $after: String) {\n  articleConnection(order: $order, query: $query, after: $after) {\n    nodes {\n      uuid\n      title\n      intro\n      price\n      priceUsd\n      revenue\n      revenueUsd\n      ordersCount\n      commentsCount\n      upvoteRatio\n      tags {\n        id\n        name\n        color\n      }\n      author {\n        name\n        avatarUrl\n        mixinId\n        bio\n      }\n      currency {\n        assetId\n        symbol\n        iconUrl\n      }\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useArticleConnectionQuery__\n *\n * To run a query within a React component, call `useArticleConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useArticleConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useArticleConnectionQuery({\n *   variables: {\n *      order: // value for 'order'\n *      query: // value for 'query'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useArticleConnectionQuery(baseOptions: Apollo.QueryHookOptions<ArticleConnectionQuery, ArticleConnectionQueryVariables>) {\n        return Apollo.useQuery<ArticleConnectionQuery, ArticleConnectionQueryVariables>(ArticleConnectionDocument, baseOptions);\n      }\nexport function useArticleConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ArticleConnectionQuery, ArticleConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<ArticleConnectionQuery, ArticleConnectionQueryVariables>(ArticleConnectionDocument, baseOptions);\n        }\nexport type ArticleConnectionQueryHookResult = ReturnType<typeof useArticleConnectionQuery>;\nexport type ArticleConnectionLazyQueryHookResult = ReturnType<typeof useArticleConnectionLazyQuery>;\nexport type ArticleConnectionQueryResult = Apollo.QueryResult<ArticleConnectionQuery, ArticleConnectionQueryVariables>;\nexport const ArticleDocument = gql`\n    query Article($uuid: ID!) {\n  article(uuid: $uuid) {\n    id\n    uuid\n    title\n    intro\n    content\n    price\n    priceUsd\n    assetId\n    authorized\n    ordersCount\n    commentsCount\n    myShare\n    revenue\n    commentingSubscribed\n    paymentTraceId\n    upvoted\n    downvoted\n    upvotesCount\n    downvotesCount\n    wordsCount\n    partialContent\n    walletId\n    swappable\n    tags {\n      id\n      name\n      color\n    }\n    author {\n      name\n      avatarUrl\n      mixinId\n      bio\n    }\n    randomReaders {\n      name\n      avatarUrl\n      mixinId\n    }\n    readers {\n      totalCount\n    }\n    buyOrders {\n      totalCount\n    }\n    rewardOrders {\n      totalCount\n    }\n    currency {\n      assetId\n      symbol\n      iconUrl\n      priceUsd\n    }\n    createdAt\n  }\n  swappableCurrencies {\n    id\n    assetId\n    name\n    symbol\n    iconUrl\n    priceUsd\n    priceBtc\n  }\n}\n    `;\n\n/**\n * __useArticleQuery__\n *\n * To run a query within a React component, call `useArticleQuery` and pass it any options that fit your needs.\n * When your component renders, `useArticleQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useArticleQuery({\n *   variables: {\n *      uuid: // value for 'uuid'\n *   },\n * });\n */\nexport function useArticleQuery(baseOptions: Apollo.QueryHookOptions<ArticleQuery, ArticleQueryVariables>) {\n        return Apollo.useQuery<ArticleQuery, ArticleQueryVariables>(ArticleDocument, baseOptions);\n      }\nexport function useArticleLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ArticleQuery, ArticleQueryVariables>) {\n          return Apollo.useLazyQuery<ArticleQuery, ArticleQueryVariables>(ArticleDocument, baseOptions);\n        }\nexport type ArticleQueryHookResult = ReturnType<typeof useArticleQuery>;\nexport type ArticleLazyQueryHookResult = ReturnType<typeof useArticleLazyQuery>;\nexport type ArticleQueryResult = Apollo.QueryResult<ArticleQuery, ArticleQueryVariables>;\nexport const CommentConnectionDocument = gql`\n    query CommentConnection($commentableType: String, $commentableId: ID, $authorMixinId: String, $orderBy: String, $after: String) {\n  commentConnection(\n    commentableType: $commentableType\n    commentableId: $commentableId\n    authorMixinId: $authorMixinId\n    orderBy: $orderBy\n    after: $after\n  ) {\n    nodes {\n      id\n      content\n      deletedAt\n      upvotesCount\n      downvotesCount\n      upvoted\n      downvoted\n      author {\n        name\n        avatarUrl\n        mixinId\n        bio\n        createdAt\n      }\n      commentable {\n        uuid\n        title\n      }\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useCommentConnectionQuery__\n *\n * To run a query within a React component, call `useCommentConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useCommentConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCommentConnectionQuery({\n *   variables: {\n *      commentableType: // value for 'commentableType'\n *      commentableId: // value for 'commentableId'\n *      authorMixinId: // value for 'authorMixinId'\n *      orderBy: // value for 'orderBy'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useCommentConnectionQuery(baseOptions?: Apollo.QueryHookOptions<CommentConnectionQuery, CommentConnectionQueryVariables>) {\n        return Apollo.useQuery<CommentConnectionQuery, CommentConnectionQueryVariables>(CommentConnectionDocument, baseOptions);\n      }\nexport function useCommentConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CommentConnectionQuery, CommentConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<CommentConnectionQuery, CommentConnectionQueryVariables>(CommentConnectionDocument, baseOptions);\n        }\nexport type CommentConnectionQueryHookResult = ReturnType<typeof useCommentConnectionQuery>;\nexport type CommentConnectionLazyQueryHookResult = ReturnType<typeof useCommentConnectionLazyQuery>;\nexport type CommentConnectionQueryResult = Apollo.QueryResult<CommentConnectionQuery, CommentConnectionQueryVariables>;\nexport const PaymentDocument = gql`\n    query Payment($traceId: ID!) {\n  payment(traceId: $traceId) {\n    traceId\n    amount\n    assetId\n    state\n  }\n}\n    `;\n\n/**\n * __usePaymentQuery__\n *\n * To run a query within a React component, call `usePaymentQuery` and pass it any options that fit your needs.\n * When your component renders, `usePaymentQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePaymentQuery({\n *   variables: {\n *      traceId: // value for 'traceId'\n *   },\n * });\n */\nexport function usePaymentQuery(baseOptions: Apollo.QueryHookOptions<PaymentQuery, PaymentQueryVariables>) {\n        return Apollo.useQuery<PaymentQuery, PaymentQueryVariables>(PaymentDocument, baseOptions);\n      }\nexport function usePaymentLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PaymentQuery, PaymentQueryVariables>) {\n          return Apollo.useLazyQuery<PaymentQuery, PaymentQueryVariables>(PaymentDocument, baseOptions);\n        }\nexport type PaymentQueryHookResult = ReturnType<typeof usePaymentQuery>;\nexport type PaymentLazyQueryHookResult = ReturnType<typeof usePaymentLazyQuery>;\nexport type PaymentQueryResult = Apollo.QueryResult<PaymentQuery, PaymentQueryVariables>;\nexport const StatisticsDocument = gql`\n    query Statistics {\n  statistics {\n    usersCount\n    articlesCount\n    authorRevenueTotal\n    readerRevenueTotal\n  }\n}\n    `;\n\n/**\n * __useStatisticsQuery__\n *\n * To run a query within a React component, call `useStatisticsQuery` and pass it any options that fit your needs.\n * When your component renders, `useStatisticsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useStatisticsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useStatisticsQuery(baseOptions?: Apollo.QueryHookOptions<StatisticsQuery, StatisticsQueryVariables>) {\n        return Apollo.useQuery<StatisticsQuery, StatisticsQueryVariables>(StatisticsDocument, baseOptions);\n      }\nexport function useStatisticsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<StatisticsQuery, StatisticsQueryVariables>) {\n          return Apollo.useLazyQuery<StatisticsQuery, StatisticsQueryVariables>(StatisticsDocument, baseOptions);\n        }\nexport type StatisticsQueryHookResult = ReturnType<typeof useStatisticsQuery>;\nexport type StatisticsLazyQueryHookResult = ReturnType<typeof useStatisticsLazyQuery>;\nexport type StatisticsQueryResult = Apollo.QueryResult<StatisticsQuery, StatisticsQueryVariables>;\nexport const SwapPreOrderDocument = gql`\n    query SwapPreOrder($payAssetId: String!, $fillAssetId: String!, $amount: Float!) {\n  swapPreOrder(\n    payAssetId: $payAssetId\n    fillAssetId: $fillAssetId\n    amount: $amount\n  ) {\n    state\n    funds\n    amount\n    minAmount\n    fillAssetId\n    payAssetId\n    priceImpact\n    routePrice\n  }\n}\n    `;\n\n/**\n * __useSwapPreOrderQuery__\n *\n * To run a query within a React component, call `useSwapPreOrderQuery` and pass it any options that fit your needs.\n * When your component renders, `useSwapPreOrderQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSwapPreOrderQuery({\n *   variables: {\n *      payAssetId: // value for 'payAssetId'\n *      fillAssetId: // value for 'fillAssetId'\n *      amount: // value for 'amount'\n *   },\n * });\n */\nexport function useSwapPreOrderQuery(baseOptions: Apollo.QueryHookOptions<SwapPreOrderQuery, SwapPreOrderQueryVariables>) {\n        return Apollo.useQuery<SwapPreOrderQuery, SwapPreOrderQueryVariables>(SwapPreOrderDocument, baseOptions);\n      }\nexport function useSwapPreOrderLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SwapPreOrderQuery, SwapPreOrderQueryVariables>) {\n          return Apollo.useLazyQuery<SwapPreOrderQuery, SwapPreOrderQueryVariables>(SwapPreOrderDocument, baseOptions);\n        }\nexport type SwapPreOrderQueryHookResult = ReturnType<typeof useSwapPreOrderQuery>;\nexport type SwapPreOrderLazyQueryHookResult = ReturnType<typeof useSwapPreOrderLazyQuery>;\nexport type SwapPreOrderQueryResult = Apollo.QueryResult<SwapPreOrderQuery, SwapPreOrderQueryVariables>;\nexport const TagConnectionDocument = gql`\n    query TagConnection($after: String) {\n  tagConnection(after: $after) {\n    nodes {\n      id\n      name\n      color\n      articlesCount\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useTagConnectionQuery__\n *\n * To run a query within a React component, call `useTagConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useTagConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTagConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useTagConnectionQuery(baseOptions?: Apollo.QueryHookOptions<TagConnectionQuery, TagConnectionQueryVariables>) {\n        return Apollo.useQuery<TagConnectionQuery, TagConnectionQueryVariables>(TagConnectionDocument, baseOptions);\n      }\nexport function useTagConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TagConnectionQuery, TagConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<TagConnectionQuery, TagConnectionQueryVariables>(TagConnectionDocument, baseOptions);\n        }\nexport type TagConnectionQueryHookResult = ReturnType<typeof useTagConnectionQuery>;\nexport type TagConnectionLazyQueryHookResult = ReturnType<typeof useTagConnectionLazyQuery>;\nexport type TagConnectionQueryResult = Apollo.QueryResult<TagConnectionQuery, TagConnectionQueryVariables>;\nexport const TaggedArticleConnectionDocument = gql`\n    query TaggedArticleConnection($tagId: ID!, $order: String!, $query: String, $after: String) {\n  tag(id: $tagId) {\n    id\n    name\n    color\n    articlesCount\n    subscribersCount\n    subscribed\n  }\n  articleConnection(order: $order, query: $query, tagId: $tagId, after: $after) {\n    nodes {\n      uuid\n      title\n      intro\n      price\n      priceUsd\n      revenue\n      revenueUsd\n      ordersCount\n      commentsCount\n      upvoteRatio\n      tags {\n        id\n        name\n        color\n      }\n      author {\n        name\n        avatarUrl\n        mixinId\n        bio\n      }\n      currency {\n        assetId\n        symbol\n        iconUrl\n      }\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useTaggedArticleConnectionQuery__\n *\n * To run a query within a React component, call `useTaggedArticleConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useTaggedArticleConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTaggedArticleConnectionQuery({\n *   variables: {\n *      tagId: // value for 'tagId'\n *      order: // value for 'order'\n *      query: // value for 'query'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useTaggedArticleConnectionQuery(baseOptions: Apollo.QueryHookOptions<TaggedArticleConnectionQuery, TaggedArticleConnectionQueryVariables>) {\n        return Apollo.useQuery<TaggedArticleConnectionQuery, TaggedArticleConnectionQueryVariables>(TaggedArticleConnectionDocument, baseOptions);\n      }\nexport function useTaggedArticleConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TaggedArticleConnectionQuery, TaggedArticleConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<TaggedArticleConnectionQuery, TaggedArticleConnectionQueryVariables>(TaggedArticleConnectionDocument, baseOptions);\n        }\nexport type TaggedArticleConnectionQueryHookResult = ReturnType<typeof useTaggedArticleConnectionQuery>;\nexport type TaggedArticleConnectionLazyQueryHookResult = ReturnType<typeof useTaggedArticleConnectionLazyQuery>;\nexport type TaggedArticleConnectionQueryResult = Apollo.QueryResult<TaggedArticleConnectionQuery, TaggedArticleConnectionQueryVariables>;\nexport const TransferConnectionDocument = gql`\n    query TransferConnection($after: String) {\n  transferConnection(after: $after) {\n    nodes {\n      traceId\n      snapshotId\n      amount\n      assetId\n      transferType\n      createdAt\n      currency {\n        assetId\n        symbol\n        iconUrl\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useTransferConnectionQuery__\n *\n * To run a query within a React component, call `useTransferConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useTransferConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTransferConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useTransferConnectionQuery(baseOptions?: Apollo.QueryHookOptions<TransferConnectionQuery, TransferConnectionQueryVariables>) {\n        return Apollo.useQuery<TransferConnectionQuery, TransferConnectionQueryVariables>(TransferConnectionDocument, baseOptions);\n      }\nexport function useTransferConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TransferConnectionQuery, TransferConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<TransferConnectionQuery, TransferConnectionQueryVariables>(TransferConnectionDocument, baseOptions);\n        }\nexport type TransferConnectionQueryHookResult = ReturnType<typeof useTransferConnectionQuery>;\nexport type TransferConnectionLazyQueryHookResult = ReturnType<typeof useTransferConnectionLazyQuery>;\nexport type TransferConnectionQueryResult = Apollo.QueryResult<TransferConnectionQuery, TransferConnectionQueryVariables>;\nexport const UserArticleConnectionDocument = gql`\n    query UserArticleConnection($mixinId: ID!, $type: String!, $after: String) {\n  userArticleConnection(mixinId: $mixinId, type: $type, after: $after) {\n    nodes {\n      uuid\n      title\n      intro\n      price\n      revenue\n      ordersCount\n      state\n      author {\n        name\n        avatarUrl\n      }\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useUserArticleConnectionQuery__\n *\n * To run a query within a React component, call `useUserArticleConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserArticleConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserArticleConnectionQuery({\n *   variables: {\n *      mixinId: // value for 'mixinId'\n *      type: // value for 'type'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useUserArticleConnectionQuery(baseOptions: Apollo.QueryHookOptions<UserArticleConnectionQuery, UserArticleConnectionQueryVariables>) {\n        return Apollo.useQuery<UserArticleConnectionQuery, UserArticleConnectionQueryVariables>(UserArticleConnectionDocument, baseOptions);\n      }\nexport function useUserArticleConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserArticleConnectionQuery, UserArticleConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<UserArticleConnectionQuery, UserArticleConnectionQueryVariables>(UserArticleConnectionDocument, baseOptions);\n        }\nexport type UserArticleConnectionQueryHookResult = ReturnType<typeof useUserArticleConnectionQuery>;\nexport type UserArticleConnectionLazyQueryHookResult = ReturnType<typeof useUserArticleConnectionLazyQuery>;\nexport type UserArticleConnectionQueryResult = Apollo.QueryResult<UserArticleConnectionQuery, UserArticleConnectionQueryVariables>;\nexport const UserDocument = gql`\n    query User($mixinId: ID!) {\n  user(mixinId: $mixinId) {\n    id\n    name\n    mixinId\n    mixinUuid\n    avatarUrl\n    bio\n    authoringSubscribed\n    readingSubscribed\n    statistics {\n      articlesCount\n      authorRevenueTotalUsd\n      readerRevenueTotalUsd\n    }\n  }\n}\n    `;\n\n/**\n * __useUserQuery__\n *\n * To run a query within a React component, call `useUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserQuery({\n *   variables: {\n *      mixinId: // value for 'mixinId'\n *   },\n * });\n */\nexport function useUserQuery(baseOptions: Apollo.QueryHookOptions<UserQuery, UserQueryVariables>) {\n        return Apollo.useQuery<UserQuery, UserQueryVariables>(UserDocument, baseOptions);\n      }\nexport function useUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserQuery, UserQueryVariables>) {\n          return Apollo.useLazyQuery<UserQuery, UserQueryVariables>(UserDocument, baseOptions);\n        }\nexport type UserQueryHookResult = ReturnType<typeof useUserQuery>;\nexport type UserLazyQueryHookResult = ReturnType<typeof useUserLazyQuery>;\nexport type UserQueryResult = Apollo.QueryResult<UserQuery, UserQueryVariables>;\nexport const ClearNotificationsDocument = gql`\n    mutation ClearNotifications($input: ClearNotificationsMutationInput!) {\n  clearNotifications(input: $input)\n}\n    `;\nexport type ClearNotificationsMutationFn = Apollo.MutationFunction<ClearNotificationsMutation, ClearNotificationsMutationVariables>;\n\n/**\n * __useClearNotificationsMutation__\n *\n * To run a mutation, you first call `useClearNotificationsMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useClearNotificationsMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [clearNotificationsMutation, { data, loading, error }] = useClearNotificationsMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useClearNotificationsMutation(baseOptions?: Apollo.MutationHookOptions<ClearNotificationsMutation, ClearNotificationsMutationVariables>) {\n        return Apollo.useMutation<ClearNotificationsMutation, ClearNotificationsMutationVariables>(ClearNotificationsDocument, baseOptions);\n      }\nexport type ClearNotificationsMutationHookResult = ReturnType<typeof useClearNotificationsMutation>;\nexport type ClearNotificationsMutationResult = Apollo.MutationResult<ClearNotificationsMutation>;\nexport type ClearNotificationsMutationOptions = Apollo.BaseMutationOptions<ClearNotificationsMutation, ClearNotificationsMutationVariables>;\nexport const CreateAccessTokenDocument = gql`\n    mutation CreateAccessToken($input: CreateAccessTokenMutationInput!) {\n  createAccessToken(input: $input) {\n    id\n    value\n    memo\n  }\n}\n    `;\nexport type CreateAccessTokenMutationFn = Apollo.MutationFunction<CreateAccessTokenMutation, CreateAccessTokenMutationVariables>;\n\n/**\n * __useCreateAccessTokenMutation__\n *\n * To run a mutation, you first call `useCreateAccessTokenMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateAccessTokenMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createAccessTokenMutation, { data, loading, error }] = useCreateAccessTokenMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCreateAccessTokenMutation(baseOptions?: Apollo.MutationHookOptions<CreateAccessTokenMutation, CreateAccessTokenMutationVariables>) {\n        return Apollo.useMutation<CreateAccessTokenMutation, CreateAccessTokenMutationVariables>(CreateAccessTokenDocument, baseOptions);\n      }\nexport type CreateAccessTokenMutationHookResult = ReturnType<typeof useCreateAccessTokenMutation>;\nexport type CreateAccessTokenMutationResult = Apollo.MutationResult<CreateAccessTokenMutation>;\nexport type CreateAccessTokenMutationOptions = Apollo.BaseMutationOptions<CreateAccessTokenMutation, CreateAccessTokenMutationVariables>;\nexport const CreateArticleDocument = gql`\n    mutation CreateArticle($input: CreateArticleMutationInput!) {\n  createArticle(input: $input) {\n    error\n  }\n}\n    `;\nexport type CreateArticleMutationFn = Apollo.MutationFunction<CreateArticleMutation, CreateArticleMutationVariables>;\n\n/**\n * __useCreateArticleMutation__\n *\n * To run a mutation, you first call `useCreateArticleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateArticleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createArticleMutation, { data, loading, error }] = useCreateArticleMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCreateArticleMutation(baseOptions?: Apollo.MutationHookOptions<CreateArticleMutation, CreateArticleMutationVariables>) {\n        return Apollo.useMutation<CreateArticleMutation, CreateArticleMutationVariables>(CreateArticleDocument, baseOptions);\n      }\nexport type CreateArticleMutationHookResult = ReturnType<typeof useCreateArticleMutation>;\nexport type CreateArticleMutationResult = Apollo.MutationResult<CreateArticleMutation>;\nexport type CreateArticleMutationOptions = Apollo.BaseMutationOptions<CreateArticleMutation, CreateArticleMutationVariables>;\nexport const DeleteAccessTokenDocument = gql`\n    mutation DeleteAccessToken($input: DeleteAccessTokenMutationInput!) {\n  deleteAccessToken(input: $input)\n}\n    `;\nexport type DeleteAccessTokenMutationFn = Apollo.MutationFunction<DeleteAccessTokenMutation, DeleteAccessTokenMutationVariables>;\n\n/**\n * __useDeleteAccessTokenMutation__\n *\n * To run a mutation, you first call `useDeleteAccessTokenMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteAccessTokenMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteAccessTokenMutation, { data, loading, error }] = useDeleteAccessTokenMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useDeleteAccessTokenMutation(baseOptions?: Apollo.MutationHookOptions<DeleteAccessTokenMutation, DeleteAccessTokenMutationVariables>) {\n        return Apollo.useMutation<DeleteAccessTokenMutation, DeleteAccessTokenMutationVariables>(DeleteAccessTokenDocument, baseOptions);\n      }\nexport type DeleteAccessTokenMutationHookResult = ReturnType<typeof useDeleteAccessTokenMutation>;\nexport type DeleteAccessTokenMutationResult = Apollo.MutationResult<DeleteAccessTokenMutation>;\nexport type DeleteAccessTokenMutationOptions = Apollo.BaseMutationOptions<DeleteAccessTokenMutation, DeleteAccessTokenMutationVariables>;\nexport const HideArticleDocument = gql`\n    mutation HideArticle($input: HideArticleMutationInput!) {\n  hideArticle(input: $input) {\n    error\n    success\n  }\n}\n    `;\nexport type HideArticleMutationFn = Apollo.MutationFunction<HideArticleMutation, HideArticleMutationVariables>;\n\n/**\n * __useHideArticleMutation__\n *\n * To run a mutation, you first call `useHideArticleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useHideArticleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [hideArticleMutation, { data, loading, error }] = useHideArticleMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useHideArticleMutation(baseOptions?: Apollo.MutationHookOptions<HideArticleMutation, HideArticleMutationVariables>) {\n        return Apollo.useMutation<HideArticleMutation, HideArticleMutationVariables>(HideArticleDocument, baseOptions);\n      }\nexport type HideArticleMutationHookResult = ReturnType<typeof useHideArticleMutation>;\nexport type HideArticleMutationResult = Apollo.MutationResult<HideArticleMutation>;\nexport type HideArticleMutationOptions = Apollo.BaseMutationOptions<HideArticleMutation, HideArticleMutationVariables>;\nexport const PublishArticleDocument = gql`\n    mutation PublishArticle($input: PublishArticleMutationInput!) {\n  publishArticle(input: $input) {\n    error\n    success\n  }\n}\n    `;\nexport type PublishArticleMutationFn = Apollo.MutationFunction<PublishArticleMutation, PublishArticleMutationVariables>;\n\n/**\n * __usePublishArticleMutation__\n *\n * To run a mutation, you first call `usePublishArticleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `usePublishArticleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [publishArticleMutation, { data, loading, error }] = usePublishArticleMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function usePublishArticleMutation(baseOptions?: Apollo.MutationHookOptions<PublishArticleMutation, PublishArticleMutationVariables>) {\n        return Apollo.useMutation<PublishArticleMutation, PublishArticleMutationVariables>(PublishArticleDocument, baseOptions);\n      }\nexport type PublishArticleMutationHookResult = ReturnType<typeof usePublishArticleMutation>;\nexport type PublishArticleMutationResult = Apollo.MutationResult<PublishArticleMutation>;\nexport type PublishArticleMutationOptions = Apollo.BaseMutationOptions<PublishArticleMutation, PublishArticleMutationVariables>;\nexport const ReadNotificationDocument = gql`\n    mutation ReadNotification($input: ReadNotificationMutationInput!) {\n  readNotification(input: $input) {\n    id\n    readAt\n  }\n}\n    `;\nexport type ReadNotificationMutationFn = Apollo.MutationFunction<ReadNotificationMutation, ReadNotificationMutationVariables>;\n\n/**\n * __useReadNotificationMutation__\n *\n * To run a mutation, you first call `useReadNotificationMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useReadNotificationMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [readNotificationMutation, { data, loading, error }] = useReadNotificationMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useReadNotificationMutation(baseOptions?: Apollo.MutationHookOptions<ReadNotificationMutation, ReadNotificationMutationVariables>) {\n        return Apollo.useMutation<ReadNotificationMutation, ReadNotificationMutationVariables>(ReadNotificationDocument, baseOptions);\n      }\nexport type ReadNotificationMutationHookResult = ReturnType<typeof useReadNotificationMutation>;\nexport type ReadNotificationMutationResult = Apollo.MutationResult<ReadNotificationMutation>;\nexport type ReadNotificationMutationOptions = Apollo.BaseMutationOptions<ReadNotificationMutation, ReadNotificationMutationVariables>;\nexport const ReadNotificationsDocument = gql`\n    mutation ReadNotifications($input: ReadNotificationsMutationInput!) {\n  readNotifications(input: $input)\n}\n    `;\nexport type ReadNotificationsMutationFn = Apollo.MutationFunction<ReadNotificationsMutation, ReadNotificationsMutationVariables>;\n\n/**\n * __useReadNotificationsMutation__\n *\n * To run a mutation, you first call `useReadNotificationsMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useReadNotificationsMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [readNotificationsMutation, { data, loading, error }] = useReadNotificationsMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useReadNotificationsMutation(baseOptions?: Apollo.MutationHookOptions<ReadNotificationsMutation, ReadNotificationsMutationVariables>) {\n        return Apollo.useMutation<ReadNotificationsMutation, ReadNotificationsMutationVariables>(ReadNotificationsDocument, baseOptions);\n      }\nexport type ReadNotificationsMutationHookResult = ReturnType<typeof useReadNotificationsMutation>;\nexport type ReadNotificationsMutationResult = Apollo.MutationResult<ReadNotificationsMutation>;\nexport type ReadNotificationsMutationOptions = Apollo.BaseMutationOptions<ReadNotificationsMutation, ReadNotificationsMutationVariables>;\nexport const SwitchLocaleDocument = gql`\n    mutation SwitchLocale($input: SwitchLocaleMutationInput!) {\n  switchLocale(input: $input)\n}\n    `;\nexport type SwitchLocaleMutationFn = Apollo.MutationFunction<SwitchLocaleMutation, SwitchLocaleMutationVariables>;\n\n/**\n * __useSwitchLocaleMutation__\n *\n * To run a mutation, you first call `useSwitchLocaleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSwitchLocaleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [switchLocaleMutation, { data, loading, error }] = useSwitchLocaleMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useSwitchLocaleMutation(baseOptions?: Apollo.MutationHookOptions<SwitchLocaleMutation, SwitchLocaleMutationVariables>) {\n        return Apollo.useMutation<SwitchLocaleMutation, SwitchLocaleMutationVariables>(SwitchLocaleDocument, baseOptions);\n      }\nexport type SwitchLocaleMutationHookResult = ReturnType<typeof useSwitchLocaleMutation>;\nexport type SwitchLocaleMutationResult = Apollo.MutationResult<SwitchLocaleMutation>;\nexport type SwitchLocaleMutationOptions = Apollo.BaseMutationOptions<SwitchLocaleMutation, SwitchLocaleMutationVariables>;\nexport const UpdateArticleDocument = gql`\n    mutation UpdateArticle($input: UpdateArticleMutationInput!) {\n  updateArticle(input: $input) {\n    error\n  }\n}\n    `;\nexport type UpdateArticleMutationFn = Apollo.MutationFunction<UpdateArticleMutation, UpdateArticleMutationVariables>;\n\n/**\n * __useUpdateArticleMutation__\n *\n * To run a mutation, you first call `useUpdateArticleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateArticleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateArticleMutation, { data, loading, error }] = useUpdateArticleMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUpdateArticleMutation(baseOptions?: Apollo.MutationHookOptions<UpdateArticleMutation, UpdateArticleMutationVariables>) {\n        return Apollo.useMutation<UpdateArticleMutation, UpdateArticleMutationVariables>(UpdateArticleDocument, baseOptions);\n      }\nexport type UpdateArticleMutationHookResult = ReturnType<typeof useUpdateArticleMutation>;\nexport type UpdateArticleMutationResult = Apollo.MutationResult<UpdateArticleMutation>;\nexport type UpdateArticleMutationOptions = Apollo.BaseMutationOptions<UpdateArticleMutation, UpdateArticleMutationVariables>;\nexport const UpdateNotificationSettingDocument = gql`\n    mutation UpdateNotificationSetting($input: UpdateNotificationSettingMutationInput!) {\n  updateNotificationSetting(input: $input) {\n    id\n    webhookUrl\n    articlePublishedWeb\n    articlePublishedMixinBot\n    articlePublishedWebhook\n    articleBoughtWeb\n    articleBoughtMixinBot\n    articleBoughtWebhook\n    articleRewardedWeb\n    articleRewardedMixinBot\n    articleRewardedWebhook\n    commentCreatedWeb\n    commentCreatedMixinBot\n    commentCreatedWebhook\n    taggingCreatedWeb\n    taggingCreatedMixinBot\n    taggingCreatedWebhook\n    transferProcessedWeb\n    transferProcessedMixinBot\n    transferProcessedWebhook\n  }\n}\n    `;\nexport type UpdateNotificationSettingMutationFn = Apollo.MutationFunction<UpdateNotificationSettingMutation, UpdateNotificationSettingMutationVariables>;\n\n/**\n * __useUpdateNotificationSettingMutation__\n *\n * To run a mutation, you first call `useUpdateNotificationSettingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateNotificationSettingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateNotificationSettingMutation, { data, loading, error }] = useUpdateNotificationSettingMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUpdateNotificationSettingMutation(baseOptions?: Apollo.MutationHookOptions<UpdateNotificationSettingMutation, UpdateNotificationSettingMutationVariables>) {\n        return Apollo.useMutation<UpdateNotificationSettingMutation, UpdateNotificationSettingMutationVariables>(UpdateNotificationSettingDocument, baseOptions);\n      }\nexport type UpdateNotificationSettingMutationHookResult = ReturnType<typeof useUpdateNotificationSettingMutation>;\nexport type UpdateNotificationSettingMutationResult = Apollo.MutationResult<UpdateNotificationSettingMutation>;\nexport type UpdateNotificationSettingMutationOptions = Apollo.BaseMutationOptions<UpdateNotificationSettingMutation, UpdateNotificationSettingMutationVariables>;\nexport const MyAccessTokenConnectionDocument = gql`\n    query MyAccessTokenConnection($after: String) {\n  myAccessTokenConnection(after: $after) {\n    nodes {\n      id\n      memo\n      desensitizedValue\n      lastRequestAt\n      lastRequestIp\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useMyAccessTokenConnectionQuery__\n *\n * To run a query within a React component, call `useMyAccessTokenConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyAccessTokenConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyAccessTokenConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useMyAccessTokenConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MyAccessTokenConnectionQuery, MyAccessTokenConnectionQueryVariables>) {\n        return Apollo.useQuery<MyAccessTokenConnectionQuery, MyAccessTokenConnectionQueryVariables>(MyAccessTokenConnectionDocument, baseOptions);\n      }\nexport function useMyAccessTokenConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyAccessTokenConnectionQuery, MyAccessTokenConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<MyAccessTokenConnectionQuery, MyAccessTokenConnectionQueryVariables>(MyAccessTokenConnectionDocument, baseOptions);\n        }\nexport type MyAccessTokenConnectionQueryHookResult = ReturnType<typeof useMyAccessTokenConnectionQuery>;\nexport type MyAccessTokenConnectionLazyQueryHookResult = ReturnType<typeof useMyAccessTokenConnectionLazyQuery>;\nexport type MyAccessTokenConnectionQueryResult = Apollo.QueryResult<MyAccessTokenConnectionQuery, MyAccessTokenConnectionQueryVariables>;\nexport const MyArticleConnectionDocument = gql`\n    query MyArticleConnection($type: String!, $after: String) {\n  myArticleConnection(type: $type, after: $after) {\n    nodes {\n      uuid\n      title\n      intro\n      price\n      revenue\n      ordersCount\n      state\n      author {\n        name\n        avatarUrl\n      }\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useMyArticleConnectionQuery__\n *\n * To run a query within a React component, call `useMyArticleConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyArticleConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyArticleConnectionQuery({\n *   variables: {\n *      type: // value for 'type'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useMyArticleConnectionQuery(baseOptions: Apollo.QueryHookOptions<MyArticleConnectionQuery, MyArticleConnectionQueryVariables>) {\n        return Apollo.useQuery<MyArticleConnectionQuery, MyArticleConnectionQueryVariables>(MyArticleConnectionDocument, baseOptions);\n      }\nexport function useMyArticleConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyArticleConnectionQuery, MyArticleConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<MyArticleConnectionQuery, MyArticleConnectionQueryVariables>(MyArticleConnectionDocument, baseOptions);\n        }\nexport type MyArticleConnectionQueryHookResult = ReturnType<typeof useMyArticleConnectionQuery>;\nexport type MyArticleConnectionLazyQueryHookResult = ReturnType<typeof useMyArticleConnectionLazyQuery>;\nexport type MyArticleConnectionQueryResult = Apollo.QueryResult<MyArticleConnectionQuery, MyArticleConnectionQueryVariables>;\nexport const MyArticleOrderConnectionDocument = gql`\n    query MyArticleOrderConnection($uuid: ID!, $orderType: String!, $after: String) {\n  myArticleOrderConnection(uuid: $uuid, orderType: $orderType, after: $after) {\n    nodes {\n      traceId\n      buyer {\n        avatarUrl\n        name\n      }\n      orderType\n      state\n      total\n      currency {\n        assetId\n        symbol\n        iconUrl\n      }\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useMyArticleOrderConnectionQuery__\n *\n * To run a query within a React component, call `useMyArticleOrderConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyArticleOrderConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyArticleOrderConnectionQuery({\n *   variables: {\n *      uuid: // value for 'uuid'\n *      orderType: // value for 'orderType'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useMyArticleOrderConnectionQuery(baseOptions: Apollo.QueryHookOptions<MyArticleOrderConnectionQuery, MyArticleOrderConnectionQueryVariables>) {\n        return Apollo.useQuery<MyArticleOrderConnectionQuery, MyArticleOrderConnectionQueryVariables>(MyArticleOrderConnectionDocument, baseOptions);\n      }\nexport function useMyArticleOrderConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyArticleOrderConnectionQuery, MyArticleOrderConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<MyArticleOrderConnectionQuery, MyArticleOrderConnectionQueryVariables>(MyArticleOrderConnectionDocument, baseOptions);\n        }\nexport type MyArticleOrderConnectionQueryHookResult = ReturnType<typeof useMyArticleOrderConnectionQuery>;\nexport type MyArticleOrderConnectionLazyQueryHookResult = ReturnType<typeof useMyArticleOrderConnectionLazyQuery>;\nexport type MyArticleOrderConnectionQueryResult = Apollo.QueryResult<MyArticleOrderConnectionQuery, MyArticleOrderConnectionQueryVariables>;\nexport const MyArticleDocument = gql`\n    query MyArticle($uuid: ID!) {\n  myArticle(uuid: $uuid) {\n    id\n    uuid\n    title\n    intro\n    content\n    state\n    price\n    assetId\n    ordersCount\n    commentsCount\n    revenue\n    authorRevenueTotal\n    readerRevenueTotal\n    commentingSubscribed\n    upvotesCount\n    downvotesCount\n    wordsCount\n    tagsCount\n    tagNames\n    createdAt\n    updatedAt\n    buyers {\n      totalCount\n    }\n    buyOrders {\n      totalCount\n    }\n    rewarders {\n      totalCount\n    }\n    rewardOrders {\n      totalCount\n    }\n    comments {\n      totalCount\n    }\n    currency {\n      assetId\n      symbol\n      iconUrl\n      priceUsd\n      priceBtc\n    }\n  }\n}\n    `;\n\n/**\n * __useMyArticleQuery__\n *\n * To run a query within a React component, call `useMyArticleQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyArticleQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyArticleQuery({\n *   variables: {\n *      uuid: // value for 'uuid'\n *   },\n * });\n */\nexport function useMyArticleQuery(baseOptions: Apollo.QueryHookOptions<MyArticleQuery, MyArticleQueryVariables>) {\n        return Apollo.useQuery<MyArticleQuery, MyArticleQueryVariables>(MyArticleDocument, baseOptions);\n      }\nexport function useMyArticleLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyArticleQuery, MyArticleQueryVariables>) {\n          return Apollo.useLazyQuery<MyArticleQuery, MyArticleQueryVariables>(MyArticleDocument, baseOptions);\n        }\nexport type MyArticleQueryHookResult = ReturnType<typeof useMyArticleQuery>;\nexport type MyArticleLazyQueryHookResult = ReturnType<typeof useMyArticleLazyQuery>;\nexport type MyArticleQueryResult = Apollo.QueryResult<MyArticleQuery, MyArticleQueryVariables>;\nexport const MyAuthoringSubscriptionConnectionDocument = gql`\n    query MyAuthoringSubscriptionConnection($after: String) {\n  myAuthoringSubscriptionConnection(after: $after) {\n    nodes {\n      id\n      mixinId\n      name\n      avatarUrl\n      bio\n      statistics {\n        articlesCount\n        authorRevenueTotalUsd\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useMyAuthoringSubscriptionConnectionQuery__\n *\n * To run a query within a React component, call `useMyAuthoringSubscriptionConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyAuthoringSubscriptionConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyAuthoringSubscriptionConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useMyAuthoringSubscriptionConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MyAuthoringSubscriptionConnectionQuery, MyAuthoringSubscriptionConnectionQueryVariables>) {\n        return Apollo.useQuery<MyAuthoringSubscriptionConnectionQuery, MyAuthoringSubscriptionConnectionQueryVariables>(MyAuthoringSubscriptionConnectionDocument, baseOptions);\n      }\nexport function useMyAuthoringSubscriptionConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyAuthoringSubscriptionConnectionQuery, MyAuthoringSubscriptionConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<MyAuthoringSubscriptionConnectionQuery, MyAuthoringSubscriptionConnectionQueryVariables>(MyAuthoringSubscriptionConnectionDocument, baseOptions);\n        }\nexport type MyAuthoringSubscriptionConnectionQueryHookResult = ReturnType<typeof useMyAuthoringSubscriptionConnectionQuery>;\nexport type MyAuthoringSubscriptionConnectionLazyQueryHookResult = ReturnType<typeof useMyAuthoringSubscriptionConnectionLazyQuery>;\nexport type MyAuthoringSubscriptionConnectionQueryResult = Apollo.QueryResult<MyAuthoringSubscriptionConnectionQuery, MyAuthoringSubscriptionConnectionQueryVariables>;\nexport const MyCommentingSubscriptionConnectionDocument = gql`\n    query MyCommentingSubscriptionConnection($after: String) {\n  myCommentingSubscriptionConnection(after: $after) {\n    nodes {\n      id\n      uuid\n      title\n      revenue\n      intro\n      commentsCount\n      author {\n        name\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useMyCommentingSubscriptionConnectionQuery__\n *\n * To run a query within a React component, call `useMyCommentingSubscriptionConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyCommentingSubscriptionConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyCommentingSubscriptionConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useMyCommentingSubscriptionConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MyCommentingSubscriptionConnectionQuery, MyCommentingSubscriptionConnectionQueryVariables>) {\n        return Apollo.useQuery<MyCommentingSubscriptionConnectionQuery, MyCommentingSubscriptionConnectionQueryVariables>(MyCommentingSubscriptionConnectionDocument, baseOptions);\n      }\nexport function useMyCommentingSubscriptionConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyCommentingSubscriptionConnectionQuery, MyCommentingSubscriptionConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<MyCommentingSubscriptionConnectionQuery, MyCommentingSubscriptionConnectionQueryVariables>(MyCommentingSubscriptionConnectionDocument, baseOptions);\n        }\nexport type MyCommentingSubscriptionConnectionQueryHookResult = ReturnType<typeof useMyCommentingSubscriptionConnectionQuery>;\nexport type MyCommentingSubscriptionConnectionLazyQueryHookResult = ReturnType<typeof useMyCommentingSubscriptionConnectionLazyQuery>;\nexport type MyCommentingSubscriptionConnectionQueryResult = Apollo.QueryResult<MyCommentingSubscriptionConnectionQuery, MyCommentingSubscriptionConnectionQueryVariables>;\nexport const MyNotificationConnectionDocument = gql`\n    query MyNotificationConnection($after: String, $type: String) {\n  myNotificationConnection(after: $after, type: $type) {\n    nodes {\n      id\n      type\n      message\n      url\n      readAt\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useMyNotificationConnectionQuery__\n *\n * To run a query within a React component, call `useMyNotificationConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyNotificationConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyNotificationConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *      type: // value for 'type'\n *   },\n * });\n */\nexport function useMyNotificationConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MyNotificationConnectionQuery, MyNotificationConnectionQueryVariables>) {\n        return Apollo.useQuery<MyNotificationConnectionQuery, MyNotificationConnectionQueryVariables>(MyNotificationConnectionDocument, baseOptions);\n      }\nexport function useMyNotificationConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyNotificationConnectionQuery, MyNotificationConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<MyNotificationConnectionQuery, MyNotificationConnectionQueryVariables>(MyNotificationConnectionDocument, baseOptions);\n        }\nexport type MyNotificationConnectionQueryHookResult = ReturnType<typeof useMyNotificationConnectionQuery>;\nexport type MyNotificationConnectionLazyQueryHookResult = ReturnType<typeof useMyNotificationConnectionLazyQuery>;\nexport type MyNotificationConnectionQueryResult = Apollo.QueryResult<MyNotificationConnectionQuery, MyNotificationConnectionQueryVariables>;\nexport const MyNotificationSettingDocument = gql`\n    query MyNotificationSetting {\n  myNotificationSetting {\n    id\n    webhookUrl\n    articlePublishedWeb\n    articlePublishedMixinBot\n    articlePublishedWebhook\n    articleBoughtWeb\n    articleBoughtMixinBot\n    articleBoughtWebhook\n    articleRewardedWeb\n    articleRewardedMixinBot\n    articleRewardedWebhook\n    commentCreatedWeb\n    commentCreatedMixinBot\n    commentCreatedWebhook\n    taggingCreatedWeb\n    taggingCreatedMixinBot\n    taggingCreatedWebhook\n    transferProcessedWeb\n    transferProcessedMixinBot\n    transferProcessedWebhook\n  }\n}\n    `;\n\n/**\n * __useMyNotificationSettingQuery__\n *\n * To run a query within a React component, call `useMyNotificationSettingQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyNotificationSettingQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyNotificationSettingQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMyNotificationSettingQuery(baseOptions?: Apollo.QueryHookOptions<MyNotificationSettingQuery, MyNotificationSettingQueryVariables>) {\n        return Apollo.useQuery<MyNotificationSettingQuery, MyNotificationSettingQueryVariables>(MyNotificationSettingDocument, baseOptions);\n      }\nexport function useMyNotificationSettingLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyNotificationSettingQuery, MyNotificationSettingQueryVariables>) {\n          return Apollo.useLazyQuery<MyNotificationSettingQuery, MyNotificationSettingQueryVariables>(MyNotificationSettingDocument, baseOptions);\n        }\nexport type MyNotificationSettingQueryHookResult = ReturnType<typeof useMyNotificationSettingQuery>;\nexport type MyNotificationSettingLazyQueryHookResult = ReturnType<typeof useMyNotificationSettingLazyQuery>;\nexport type MyNotificationSettingQueryResult = Apollo.QueryResult<MyNotificationSettingQuery, MyNotificationSettingQueryVariables>;\nexport const MyPaymentConnectionDocument = gql`\n    query MyPaymentConnection($after: String) {\n  myPaymentConnection(after: $after) {\n    nodes {\n      traceId\n      snapshotId\n      amount\n      assetId\n      state\n      createdAt\n      order {\n        item {\n          ... on Article {\n            title\n            uuid\n          }\n        }\n      }\n      currency {\n        assetId\n        iconUrl\n        symbol\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useMyPaymentConnectionQuery__\n *\n * To run a query within a React component, call `useMyPaymentConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyPaymentConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyPaymentConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useMyPaymentConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MyPaymentConnectionQuery, MyPaymentConnectionQueryVariables>) {\n        return Apollo.useQuery<MyPaymentConnectionQuery, MyPaymentConnectionQueryVariables>(MyPaymentConnectionDocument, baseOptions);\n      }\nexport function useMyPaymentConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyPaymentConnectionQuery, MyPaymentConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<MyPaymentConnectionQuery, MyPaymentConnectionQueryVariables>(MyPaymentConnectionDocument, baseOptions);\n        }\nexport type MyPaymentConnectionQueryHookResult = ReturnType<typeof useMyPaymentConnectionQuery>;\nexport type MyPaymentConnectionLazyQueryHookResult = ReturnType<typeof useMyPaymentConnectionLazyQuery>;\nexport type MyPaymentConnectionQueryResult = Apollo.QueryResult<MyPaymentConnectionQuery, MyPaymentConnectionQueryVariables>;\nexport const MyReadingSubscriptionConnectionDocument = gql`\n    query MyReadingSubscriptionConnection($after: String) {\n  myReadingSubscriptionConnection(after: $after) {\n    nodes {\n      id\n      mixinId\n      name\n      avatarUrl\n      bio\n      statistics {\n        boughtArticlesCount\n        readerRevenueTotalUsd\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useMyReadingSubscriptionConnectionQuery__\n *\n * To run a query within a React component, call `useMyReadingSubscriptionConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyReadingSubscriptionConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyReadingSubscriptionConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useMyReadingSubscriptionConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MyReadingSubscriptionConnectionQuery, MyReadingSubscriptionConnectionQueryVariables>) {\n        return Apollo.useQuery<MyReadingSubscriptionConnectionQuery, MyReadingSubscriptionConnectionQueryVariables>(MyReadingSubscriptionConnectionDocument, baseOptions);\n      }\nexport function useMyReadingSubscriptionConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyReadingSubscriptionConnectionQuery, MyReadingSubscriptionConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<MyReadingSubscriptionConnectionQuery, MyReadingSubscriptionConnectionQueryVariables>(MyReadingSubscriptionConnectionDocument, baseOptions);\n        }\nexport type MyReadingSubscriptionConnectionQueryHookResult = ReturnType<typeof useMyReadingSubscriptionConnectionQuery>;\nexport type MyReadingSubscriptionConnectionLazyQueryHookResult = ReturnType<typeof useMyReadingSubscriptionConnectionLazyQuery>;\nexport type MyReadingSubscriptionConnectionQueryResult = Apollo.QueryResult<MyReadingSubscriptionConnectionQuery, MyReadingSubscriptionConnectionQueryVariables>;\nexport const MyStatisticsDocument = gql`\n    query MyStatistics {\n  myStatistics {\n    articlesCount\n    boughtArticlesCount\n    authorRevenueTotalPrs\n    readerRevenueTotalPrs\n    authorRevenueTotalBtc\n    readerRevenueTotalBtc\n    authorRevenueTotalUsd\n    readerRevenueTotalUsd\n  }\n}\n    `;\n\n/**\n * __useMyStatisticsQuery__\n *\n * To run a query within a React component, call `useMyStatisticsQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyStatisticsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyStatisticsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMyStatisticsQuery(baseOptions?: Apollo.QueryHookOptions<MyStatisticsQuery, MyStatisticsQueryVariables>) {\n        return Apollo.useQuery<MyStatisticsQuery, MyStatisticsQueryVariables>(MyStatisticsDocument, baseOptions);\n      }\nexport function useMyStatisticsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyStatisticsQuery, MyStatisticsQueryVariables>) {\n          return Apollo.useLazyQuery<MyStatisticsQuery, MyStatisticsQueryVariables>(MyStatisticsDocument, baseOptions);\n        }\nexport type MyStatisticsQueryHookResult = ReturnType<typeof useMyStatisticsQuery>;\nexport type MyStatisticsLazyQueryHookResult = ReturnType<typeof useMyStatisticsLazyQuery>;\nexport type MyStatisticsQueryResult = Apollo.QueryResult<MyStatisticsQuery, MyStatisticsQueryVariables>;\nexport const MySwapOrderConnectionDocument = gql`\n    query MySwapOrderConnection($after: String) {\n  mySwapOrderConnection(after: $after) {\n    nodes {\n      id\n      traceId\n      state\n      funds\n      amount\n      minAmount\n      fillAssetId\n      payAssetId\n      article {\n        uuid\n        title\n        price\n      }\n      payAsset {\n        assetId\n        iconUrl\n        symbol\n      }\n      fillAsset {\n        assetId\n        iconUrl\n        symbol\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useMySwapOrderConnectionQuery__\n *\n * To run a query within a React component, call `useMySwapOrderConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useMySwapOrderConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMySwapOrderConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useMySwapOrderConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MySwapOrderConnectionQuery, MySwapOrderConnectionQueryVariables>) {\n        return Apollo.useQuery<MySwapOrderConnectionQuery, MySwapOrderConnectionQueryVariables>(MySwapOrderConnectionDocument, baseOptions);\n      }\nexport function useMySwapOrderConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MySwapOrderConnectionQuery, MySwapOrderConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<MySwapOrderConnectionQuery, MySwapOrderConnectionQueryVariables>(MySwapOrderConnectionDocument, baseOptions);\n        }\nexport type MySwapOrderConnectionQueryHookResult = ReturnType<typeof useMySwapOrderConnectionQuery>;\nexport type MySwapOrderConnectionLazyQueryHookResult = ReturnType<typeof useMySwapOrderConnectionLazyQuery>;\nexport type MySwapOrderConnectionQueryResult = Apollo.QueryResult<MySwapOrderConnectionQuery, MySwapOrderConnectionQueryVariables>;\nexport const MyTagSubscriptionConnectionDocument = gql`\n    query MyTagSubscriptionConnection($after: String) {\n  myTagSubscriptionConnection(after: $after) {\n    nodes {\n      id\n      name\n      color\n      articlesCount\n      subscribersCount\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useMyTagSubscriptionConnectionQuery__\n *\n * To run a query within a React component, call `useMyTagSubscriptionConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyTagSubscriptionConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyTagSubscriptionConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useMyTagSubscriptionConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MyTagSubscriptionConnectionQuery, MyTagSubscriptionConnectionQueryVariables>) {\n        return Apollo.useQuery<MyTagSubscriptionConnectionQuery, MyTagSubscriptionConnectionQueryVariables>(MyTagSubscriptionConnectionDocument, baseOptions);\n      }\nexport function useMyTagSubscriptionConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyTagSubscriptionConnectionQuery, MyTagSubscriptionConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<MyTagSubscriptionConnectionQuery, MyTagSubscriptionConnectionQueryVariables>(MyTagSubscriptionConnectionDocument, baseOptions);\n        }\nexport type MyTagSubscriptionConnectionQueryHookResult = ReturnType<typeof useMyTagSubscriptionConnectionQuery>;\nexport type MyTagSubscriptionConnectionLazyQueryHookResult = ReturnType<typeof useMyTagSubscriptionConnectionLazyQuery>;\nexport type MyTagSubscriptionConnectionQueryResult = Apollo.QueryResult<MyTagSubscriptionConnectionQuery, MyTagSubscriptionConnectionQueryVariables>;\nexport const MyTransferConnectionDocument = gql`\n    query MyTransferConnection($transferType: String, $after: String) {\n  myTransferConnection(transferType: $transferType, after: $after) {\n    nodes {\n      traceId\n      snapshotId\n      amount\n      assetId\n      transferType\n      createdAt\n      article {\n        uuid\n        title\n      }\n      currency {\n        assetId\n        iconUrl\n        symbol\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useMyTransferConnectionQuery__\n *\n * To run a query within a React component, call `useMyTransferConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyTransferConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyTransferConnectionQuery({\n *   variables: {\n *      transferType: // value for 'transferType'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useMyTransferConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MyTransferConnectionQuery, MyTransferConnectionQueryVariables>) {\n        return Apollo.useQuery<MyTransferConnectionQuery, MyTransferConnectionQueryVariables>(MyTransferConnectionDocument, baseOptions);\n      }\nexport function useMyTransferConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyTransferConnectionQuery, MyTransferConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<MyTransferConnectionQuery, MyTransferConnectionQueryVariables>(MyTransferConnectionDocument, baseOptions);\n        }\nexport type MyTransferConnectionQueryHookResult = ReturnType<typeof useMyTransferConnectionQuery>;\nexport type MyTransferConnectionLazyQueryHookResult = ReturnType<typeof useMyTransferConnectionLazyQuery>;\nexport type MyTransferConnectionQueryResult = Apollo.QueryResult<MyTransferConnectionQuery, MyTransferConnectionQueryVariables>;\nexport const PricableCurrenciesDocument = gql`\n    query PricableCurrencies {\n  pricableCurrencies {\n    id\n    assetId\n    name\n    symbol\n    iconUrl\n    priceUsd\n    priceBtc\n  }\n}\n    `;\n\n/**\n * __usePricableCurrenciesQuery__\n *\n * To run a query within a React component, call `usePricableCurrenciesQuery` and pass it any options that fit your needs.\n * When your component renders, `usePricableCurrenciesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePricableCurrenciesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function usePricableCurrenciesQuery(baseOptions?: Apollo.QueryHookOptions<PricableCurrenciesQuery, PricableCurrenciesQueryVariables>) {\n        return Apollo.useQuery<PricableCurrenciesQuery, PricableCurrenciesQueryVariables>(PricableCurrenciesDocument, baseOptions);\n      }\nexport function usePricableCurrenciesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PricableCurrenciesQuery, PricableCurrenciesQueryVariables>) {\n          return Apollo.useLazyQuery<PricableCurrenciesQuery, PricableCurrenciesQueryVariables>(PricableCurrenciesDocument, baseOptions);\n        }\nexport type PricableCurrenciesQueryHookResult = ReturnType<typeof usePricableCurrenciesQuery>;\nexport type PricableCurrenciesLazyQueryHookResult = ReturnType<typeof usePricableCurrenciesLazyQuery>;\nexport type PricableCurrenciesQueryResult = Apollo.QueryResult<PricableCurrenciesQuery, PricableCurrenciesQueryVariables>;","import MDEditor from '@uiw/react-md-editor';\nimport { Image } from 'antd';\nimport React from 'react';\n\nexport function MarkdownRendererComponent(props: { source: string }) {\n  return (\n    <MDEditor.Markdown\n      source={props.source}\n      transformLinkUri={(uri: string) => {\n        // https://github.com/remarkjs/react-markdown/blob/main/src/uri-transformer.js\n        // add the 'mixin://' scheme\n        const protocols = ['http', 'https', 'mailto', 'tel', 'mixin'];\n        const url = (uri || '').trim();\n        const first = url.charAt(0);\n\n        if (first === '#' || first === '/') {\n          return url;\n        }\n\n        const colon = url.indexOf(':');\n        if (colon === -1) {\n          return url;\n        }\n\n        const length = protocols.length;\n        let index = -1;\n\n        while (++index < length) {\n          const protocol = protocols[index];\n\n          if (\n            colon === protocol.length &&\n            url.slice(0, protocol.length).toLowerCase() === protocol\n          ) {\n            return url;\n          }\n        }\n\n        index = url.indexOf('?');\n        if (index !== -1 && colon > index) {\n          return url;\n        }\n\n        index = url.indexOf('#');\n        if (index !== -1 && colon > index) {\n          return url;\n        }\n\n        return 'javascript:void(0)';\n      }}\n      renderers={{\n        image: ({ src, alt }) => (\n          <Image\n            wrapperClassName='w-full'\n            className='w-auto max-w-full m-auto'\n            preview={false}\n            alt={alt}\n            src={src}\n          />\n        ),\n        paragraph: ({ node, ...otherProps }) => (\n          <div className='mb-4'>{otherProps.children}</div>\n        ),\n      }}\n    />\n  );\n}\n","export const FOXSWAP_APP_ID = 'a753e0eb-3010-4c4a-a7b2-a7bda4063f62';\nexport const FOXSWAP_CODE_ID = '2140515d-b77f-4476-92f6-39d953c74cc5';\n","import React, { useContext } from 'react';\n\nexport const CurrentUserContext = React.createContext(null);\nexport function useCurrentUser() {\n  return useContext(CurrentUserContext);\n}\n","import React, { useContext } from 'react';\n\nexport const PrsdiggContext = React.createContext(null);\nexport function usePrsdigg() {\n  return useContext(PrsdiggContext);\n}\n","import React, { useContext } from 'react';\n\nexport const UserAgentContext = React.createContext(null);\nexport function useUserAgent() {\n  return useContext(UserAgentContext);\n}\n","import { ApolloClient, InMemoryCache } from '@apollo/client';\n\nconst customizedConnectionMergeFunction = (\n  keyArgs: false | string[] = false,\n): {\n  keyArgs: any;\n  merge: (existing: any, incoming: any, options?: any) => any;\n} => {\n  return {\n    keyArgs,\n    merge(existing: any, incoming: any, { args }) {\n      if (args?.after === existing?.pageInfo?.endCursor) {\n        const nodes = existing ? [...existing.nodes] : [];\n        return {\n          ...incoming,\n          nodes: [...nodes, ...incoming.nodes],\n        };\n      } else {\n        return incoming;\n      }\n    },\n  };\n};\n\nexport const apolloClient = (uri: string, csrfToken?: string) => {\n  const cache = new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          adminAnnouncementConnection: customizedConnectionMergeFunction(),\n          adminArticleConnection: customizedConnectionMergeFunction([\n            'query',\n            'state',\n          ]),\n          adminBonusConnection: customizedConnectionMergeFunction(),\n          adminMixinMessageConnection: customizedConnectionMergeFunction(),\n          adminMixinNetworkSnapshotConnection: customizedConnectionMergeFunction(\n            ['filter', 'userId'],\n          ),\n          adminOrderConnection: customizedConnectionMergeFunction([\n            'itemId',\n            'itemType',\n          ]),\n          adminPaymentConnection: customizedConnectionMergeFunction(),\n          adminSwapOrderConnection: customizedConnectionMergeFunction(),\n          adminTransferConnection: customizedConnectionMergeFunction([\n            'itemId',\n            'itemType',\n            'sourceId',\n            'sourceType',\n          ]),\n          adminUserConnection: customizedConnectionMergeFunction([\n            'filter',\n            'query',\n            'orderBy',\n          ]),\n          articleConnection: customizedConnectionMergeFunction([\n            'tagId',\n            'order',\n            'query',\n          ]),\n          commentConnection: customizedConnectionMergeFunction([\n            'commentableId',\n            'commentableType',\n            'authorMixinId',\n            'orderBy',\n          ]),\n          myAccessTokenConnection: customizedConnectionMergeFunction(),\n          myAuthoringSubscriptionConnection: customizedConnectionMergeFunction(),\n          myReadingSubscriptionConnection: customizedConnectionMergeFunction(),\n          myCommentingSubscriptionConnection: customizedConnectionMergeFunction(),\n          myNotificationConnection: customizedConnectionMergeFunction(),\n          myTransferConnection: customizedConnectionMergeFunction([\n            'transferType',\n          ]),\n          myArticleOrderConnection: customizedConnectionMergeFunction([\n            'uuid',\n            'orderType',\n          ]),\n          mySwapOrderConnection: customizedConnectionMergeFunction(),\n          myPaymentConnection: customizedConnectionMergeFunction(),\n          myArticleConnection: customizedConnectionMergeFunction(['type']),\n          userArticleConnection: customizedConnectionMergeFunction([\n            'type',\n            'mixinId',\n          ]),\n          tagConnection: customizedConnectionMergeFunction(),\n          transferConnection: customizedConnectionMergeFunction(),\n        },\n      },\n    },\n  });\n\n  return new ApolloClient({\n    uri,\n    cache,\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-CSRF-Token':\n        csrfToken ||\n        ((document.querySelector(\"meta[name='csrf-token']\") as any) || {})\n          .content,\n    },\n  });\n};\n","export function hideLoader() {\n  const ele: any = document.querySelector('.loader-wrapper');\n  if (Boolean(ele)) {\n    ele.style.display = 'none';\n  }\n}\n","const getMixinContext: () => {\n  appVersion?: string;\n  immersive?: boolean;\n  appearance?: 'dark' | 'light';\n  currency?:\n    | 'USD'\n    | 'CNY'\n    | 'JPY'\n    | 'EUR'\n    | 'KRW'\n    | 'HKD'\n    | 'GBP'\n    | 'AUD'\n    | 'SGD'\n    | 'MYR';\n  locale: string;\n  platform: 'iOS' | 'Android' | 'Desktop';\n  conversationId: string;\n} = () => {\n  let ctx: any = {};\n  if (\n    (window as any).webkit &&\n    (window as any).webkit.messageHandlers &&\n    (window as any).webkit.messageHandlers.MixinContext\n  ) {\n    ctx = JSON.parse(prompt('MixinContext.getContext()'));\n    ctx.platform = ctx.platform || 'iOS';\n  } else if (\n    (window as any).MixinContext &&\n    typeof (window as any).MixinContext.getContext === 'function'\n  ) {\n    ctx = JSON.parse((window as any).MixinContext.getContext());\n    ctx.platform = ctx.platform || 'Android';\n  }\n  ctx.appVersion = ctx.app_version;\n  ctx.conversationId = ctx.conversation_id;\n  return ctx;\n};\n\nexport const mixinContext = getMixinContext();\n","export * from './components';\nexport * from './constants';\nexport * from './contexts';\nexport * from './utils';\n\nexport const imagePath = (name: string) => require('@/images/' + name);\n","var map = {\n\t\"./prism-abap\": [\n\t\t86405,\n\t\t6405\n\t],\n\t\"./prism-abap.js\": [\n\t\t86405,\n\t\t6405\n\t],\n\t\"./prism-abap.min\": [\n\t\t7062,\n\t\t7062\n\t],\n\t\"./prism-abap.min.js\": [\n\t\t7062,\n\t\t7062\n\t],\n\t\"./prism-abnf\": [\n\t\t68758,\n\t\t8758\n\t],\n\t\"./prism-abnf.js\": [\n\t\t68758,\n\t\t8758\n\t],\n\t\"./prism-abnf.min\": [\n\t\t48121,\n\t\t8121\n\t],\n\t\"./prism-abnf.min.js\": [\n\t\t48121,\n\t\t8121\n\t],\n\t\"./prism-actionscript\": [\n\t\t35249,\n\t\t5249\n\t],\n\t\"./prism-actionscript.js\": [\n\t\t35249,\n\t\t5249\n\t],\n\t\"./prism-actionscript.min\": [\n\t\t53896,\n\t\t3896\n\t],\n\t\"./prism-actionscript.min.js\": [\n\t\t53896,\n\t\t3896\n\t],\n\t\"./prism-ada\": [\n\t\t85795,\n\t\t5795\n\t],\n\t\"./prism-ada.js\": [\n\t\t85795,\n\t\t5795\n\t],\n\t\"./prism-ada.min\": [\n\t\t92497,\n\t\t2497\n\t],\n\t\"./prism-ada.min.js\": [\n\t\t92497,\n\t\t2497\n\t],\n\t\"./prism-agda\": [\n\t\t47231,\n\t\t7231\n\t],\n\t\"./prism-agda.js\": [\n\t\t47231,\n\t\t7231\n\t],\n\t\"./prism-agda.min\": [\n\t\t14552,\n\t\t4552\n\t],\n\t\"./prism-agda.min.js\": [\n\t\t14552,\n\t\t4552\n\t],\n\t\"./prism-al\": [\n\t\t42273,\n\t\t2273\n\t],\n\t\"./prism-al.js\": [\n\t\t42273,\n\t\t2273\n\t],\n\t\"./prism-al.min\": [\n\t\t47347,\n\t\t7347\n\t],\n\t\"./prism-al.min.js\": [\n\t\t47347,\n\t\t7347\n\t],\n\t\"./prism-antlr4\": [\n\t\t44852,\n\t\t4852\n\t],\n\t\"./prism-antlr4.js\": [\n\t\t44852,\n\t\t4852\n\t],\n\t\"./prism-antlr4.min\": [\n\t\t5527,\n\t\t5527\n\t],\n\t\"./prism-antlr4.min.js\": [\n\t\t5527,\n\t\t5527\n\t],\n\t\"./prism-apacheconf\": [\n\t\t77533,\n\t\t7533\n\t],\n\t\"./prism-apacheconf.js\": [\n\t\t77533,\n\t\t7533\n\t],\n\t\"./prism-apacheconf.min\": [\n\t\t24242,\n\t\t4242\n\t],\n\t\"./prism-apacheconf.min.js\": [\n\t\t24242,\n\t\t4242\n\t],\n\t\"./prism-apl\": [\n\t\t18508,\n\t\t8508\n\t],\n\t\"./prism-apl.js\": [\n\t\t18508,\n\t\t8508\n\t],\n\t\"./prism-apl.min\": [\n\t\t38162,\n\t\t8162\n\t],\n\t\"./prism-apl.min.js\": [\n\t\t38162,\n\t\t8162\n\t],\n\t\"./prism-applescript\": [\n\t\t31093,\n\t\t1093\n\t],\n\t\"./prism-applescript.js\": [\n\t\t31093,\n\t\t1093\n\t],\n\t\"./prism-applescript.min\": [\n\t\t39943,\n\t\t9943\n\t],\n\t\"./prism-applescript.min.js\": [\n\t\t39943,\n\t\t9943\n\t],\n\t\"./prism-aql\": [\n\t\t25691,\n\t\t5691\n\t],\n\t\"./prism-aql.js\": [\n\t\t25691,\n\t\t5691\n\t],\n\t\"./prism-aql.min\": [\n\t\t29846,\n\t\t9846\n\t],\n\t\"./prism-aql.min.js\": [\n\t\t29846,\n\t\t9846\n\t],\n\t\"./prism-arduino\": [\n\t\t51849,\n\t\t1849\n\t],\n\t\"./prism-arduino.js\": [\n\t\t51849,\n\t\t1849\n\t],\n\t\"./prism-arduino.min\": [\n\t\t71335,\n\t\t1335\n\t],\n\t\"./prism-arduino.min.js\": [\n\t\t71335,\n\t\t1335\n\t],\n\t\"./prism-arff\": [\n\t\t73253,\n\t\t3253\n\t],\n\t\"./prism-arff.js\": [\n\t\t73253,\n\t\t3253\n\t],\n\t\"./prism-arff.min\": [\n\t\t13955,\n\t\t3955\n\t],\n\t\"./prism-arff.min.js\": [\n\t\t13955,\n\t\t3955\n\t],\n\t\"./prism-asciidoc\": [\n\t\t10856,\n\t\t856\n\t],\n\t\"./prism-asciidoc.js\": [\n\t\t10856,\n\t\t856\n\t],\n\t\"./prism-asciidoc.min\": [\n\t\t55692,\n\t\t5692\n\t],\n\t\"./prism-asciidoc.min.js\": [\n\t\t55692,\n\t\t5692\n\t],\n\t\"./prism-asm6502\": [\n\t\t36972,\n\t\t6972\n\t],\n\t\"./prism-asm6502.js\": [\n\t\t36972,\n\t\t6972\n\t],\n\t\"./prism-asm6502.min\": [\n\t\t68409,\n\t\t8409\n\t],\n\t\"./prism-asm6502.min.js\": [\n\t\t68409,\n\t\t8409\n\t],\n\t\"./prism-aspnet\": [\n\t\t54019,\n\t\t4019\n\t],\n\t\"./prism-aspnet.js\": [\n\t\t54019,\n\t\t4019\n\t],\n\t\"./prism-aspnet.min\": [\n\t\t54780,\n\t\t4780\n\t],\n\t\"./prism-aspnet.min.js\": [\n\t\t54780,\n\t\t4780\n\t],\n\t\"./prism-autohotkey\": [\n\t\t92776,\n\t\t2776\n\t],\n\t\"./prism-autohotkey.js\": [\n\t\t92776,\n\t\t2776\n\t],\n\t\"./prism-autohotkey.min\": [\n\t\t531,\n\t\t531\n\t],\n\t\"./prism-autohotkey.min.js\": [\n\t\t531,\n\t\t531\n\t],\n\t\"./prism-autoit\": [\n\t\t24940,\n\t\t4940\n\t],\n\t\"./prism-autoit.js\": [\n\t\t24940,\n\t\t4940\n\t],\n\t\"./prism-autoit.min\": [\n\t\t20021,\n\t\t21\n\t],\n\t\"./prism-autoit.min.js\": [\n\t\t20021,\n\t\t21\n\t],\n\t\"./prism-bash\": [\n\t\t57874,\n\t\t7874\n\t],\n\t\"./prism-bash.js\": [\n\t\t57874,\n\t\t7874\n\t],\n\t\"./prism-bash.min\": [\n\t\t87013,\n\t\t7013\n\t],\n\t\"./prism-bash.min.js\": [\n\t\t87013,\n\t\t7013\n\t],\n\t\"./prism-basic\": [\n\t\t94446,\n\t\t4446\n\t],\n\t\"./prism-basic.js\": [\n\t\t94446,\n\t\t4446\n\t],\n\t\"./prism-basic.min\": [\n\t\t47098,\n\t\t7098\n\t],\n\t\"./prism-basic.min.js\": [\n\t\t47098,\n\t\t7098\n\t],\n\t\"./prism-batch\": [\n\t\t53292,\n\t\t3292\n\t],\n\t\"./prism-batch.js\": [\n\t\t53292,\n\t\t3292\n\t],\n\t\"./prism-batch.min\": [\n\t\t65965,\n\t\t5965\n\t],\n\t\"./prism-batch.min.js\": [\n\t\t65965,\n\t\t5965\n\t],\n\t\"./prism-bbcode\": [\n\t\t46428,\n\t\t6428\n\t],\n\t\"./prism-bbcode.js\": [\n\t\t46428,\n\t\t6428\n\t],\n\t\"./prism-bbcode.min\": [\n\t\t22661,\n\t\t2661\n\t],\n\t\"./prism-bbcode.min.js\": [\n\t\t22661,\n\t\t2661\n\t],\n\t\"./prism-birb\": [\n\t\t69104,\n\t\t9104\n\t],\n\t\"./prism-birb.js\": [\n\t\t69104,\n\t\t9104\n\t],\n\t\"./prism-birb.min\": [\n\t\t16997,\n\t\t6997\n\t],\n\t\"./prism-birb.min.js\": [\n\t\t16997,\n\t\t6997\n\t],\n\t\"./prism-bison\": [\n\t\t97861,\n\t\t7861\n\t],\n\t\"./prism-bison.js\": [\n\t\t97861,\n\t\t7861\n\t],\n\t\"./prism-bison.min\": [\n\t\t41248,\n\t\t1248\n\t],\n\t\"./prism-bison.min.js\": [\n\t\t41248,\n\t\t1248\n\t],\n\t\"./prism-bnf\": [\n\t\t24115,\n\t\t4115\n\t],\n\t\"./prism-bnf.js\": [\n\t\t24115,\n\t\t4115\n\t],\n\t\"./prism-bnf.min\": [\n\t\t86751,\n\t\t6751\n\t],\n\t\"./prism-bnf.min.js\": [\n\t\t86751,\n\t\t6751\n\t],\n\t\"./prism-brainfuck\": [\n\t\t15827,\n\t\t5827\n\t],\n\t\"./prism-brainfuck.js\": [\n\t\t15827,\n\t\t5827\n\t],\n\t\"./prism-brainfuck.min\": [\n\t\t99676,\n\t\t9676\n\t],\n\t\"./prism-brainfuck.min.js\": [\n\t\t99676,\n\t\t9676\n\t],\n\t\"./prism-brightscript\": [\n\t\t76366,\n\t\t1275\n\t],\n\t\"./prism-brightscript.js\": [\n\t\t76366,\n\t\t1275\n\t],\n\t\"./prism-brightscript.min\": [\n\t\t39455,\n\t\t9455\n\t],\n\t\"./prism-brightscript.min.js\": [\n\t\t39455,\n\t\t9455\n\t],\n\t\"./prism-bro\": [\n\t\t76609,\n\t\t6609\n\t],\n\t\"./prism-bro.js\": [\n\t\t76609,\n\t\t6609\n\t],\n\t\"./prism-bro.min\": [\n\t\t28708,\n\t\t8708\n\t],\n\t\"./prism-bro.min.js\": [\n\t\t28708,\n\t\t8708\n\t],\n\t\"./prism-bsl\": [\n\t\t61354,\n\t\t1354\n\t],\n\t\"./prism-bsl.js\": [\n\t\t61354,\n\t\t1354\n\t],\n\t\"./prism-bsl.min\": [\n\t\t29402,\n\t\t9402\n\t],\n\t\"./prism-bsl.min.js\": [\n\t\t29402,\n\t\t9402\n\t],\n\t\"./prism-c\": [\n\t\t4279,\n\t\t4279\n\t],\n\t\"./prism-c.js\": [\n\t\t4279,\n\t\t4279\n\t],\n\t\"./prism-c.min\": [\n\t\t36551,\n\t\t6551\n\t],\n\t\"./prism-c.min.js\": [\n\t\t36551,\n\t\t6551\n\t],\n\t\"./prism-cil\": [\n\t\t4677,\n\t\t4677\n\t],\n\t\"./prism-cil.js\": [\n\t\t4677,\n\t\t4677\n\t],\n\t\"./prism-cil.min\": [\n\t\t54002,\n\t\t6120\n\t],\n\t\"./prism-cil.min.js\": [\n\t\t54002,\n\t\t6120\n\t],\n\t\"./prism-clike\": [\n\t\t35433,\n\t\t5433\n\t],\n\t\"./prism-clike.js\": [\n\t\t35433,\n\t\t5433\n\t],\n\t\"./prism-clike.min\": [\n\t\t58080,\n\t\t8080\n\t],\n\t\"./prism-clike.min.js\": [\n\t\t58080,\n\t\t8080\n\t],\n\t\"./prism-clojure\": [\n\t\t52812,\n\t\t2812\n\t],\n\t\"./prism-clojure.js\": [\n\t\t52812,\n\t\t2812\n\t],\n\t\"./prism-clojure.min\": [\n\t\t14821,\n\t\t4821\n\t],\n\t\"./prism-clojure.min.js\": [\n\t\t14821,\n\t\t4821\n\t],\n\t\"./prism-cmake\": [\n\t\t44225,\n\t\t4225\n\t],\n\t\"./prism-cmake.js\": [\n\t\t44225,\n\t\t4225\n\t],\n\t\"./prism-cmake.min\": [\n\t\t79278,\n\t\t9278\n\t],\n\t\"./prism-cmake.min.js\": [\n\t\t79278,\n\t\t9278\n\t],\n\t\"./prism-coffeescript\": [\n\t\t46213,\n\t\t6213\n\t],\n\t\"./prism-coffeescript.js\": [\n\t\t46213,\n\t\t6213\n\t],\n\t\"./prism-coffeescript.min\": [\n\t\t37271,\n\t\t7271\n\t],\n\t\"./prism-coffeescript.min.js\": [\n\t\t37271,\n\t\t7271\n\t],\n\t\"./prism-concurnas\": [\n\t\t29467,\n\t\t9467\n\t],\n\t\"./prism-concurnas.js\": [\n\t\t29467,\n\t\t9467\n\t],\n\t\"./prism-concurnas.min\": [\n\t\t2836,\n\t\t2836\n\t],\n\t\"./prism-concurnas.min.js\": [\n\t\t2836,\n\t\t2836\n\t],\n\t\"./prism-core\": [\n\t\t28325,\n\t\t8325\n\t],\n\t\"./prism-core.js\": [\n\t\t28325,\n\t\t8325\n\t],\n\t\"./prism-core.min\": [\n\t\t2251,\n\t\t2251\n\t],\n\t\"./prism-core.min.js\": [\n\t\t2251,\n\t\t2251\n\t],\n\t\"./prism-cpp\": [\n\t\t2731,\n\t\t2731\n\t],\n\t\"./prism-cpp.js\": [\n\t\t2731,\n\t\t2731\n\t],\n\t\"./prism-cpp.min\": [\n\t\t54132,\n\t\t4132\n\t],\n\t\"./prism-cpp.min.js\": [\n\t\t54132,\n\t\t4132\n\t],\n\t\"./prism-crystal\": [\n\t\t18980,\n\t\t8980\n\t],\n\t\"./prism-crystal.js\": [\n\t\t18980,\n\t\t8980\n\t],\n\t\"./prism-crystal.min\": [\n\t\t77223,\n\t\t7223\n\t],\n\t\"./prism-crystal.min.js\": [\n\t\t77223,\n\t\t7223\n\t],\n\t\"./prism-csharp\": [\n\t\t79016,\n\t\t9016\n\t],\n\t\"./prism-csharp.js\": [\n\t\t79016,\n\t\t9016\n\t],\n\t\"./prism-csharp.min\": [\n\t\t53229,\n\t\t3229\n\t],\n\t\"./prism-csharp.min.js\": [\n\t\t53229,\n\t\t3229\n\t],\n\t\"./prism-csp\": [\n\t\t4412,\n\t\t4412\n\t],\n\t\"./prism-csp.js\": [\n\t\t4412,\n\t\t4412\n\t],\n\t\"./prism-csp.min\": [\n\t\t12926,\n\t\t2926\n\t],\n\t\"./prism-csp.min.js\": [\n\t\t12926,\n\t\t2926\n\t],\n\t\"./prism-css\": [\n\t\t15251,\n\t\t5251\n\t],\n\t\"./prism-css-extras\": [\n\t\t80871,\n\t\t871\n\t],\n\t\"./prism-css-extras.js\": [\n\t\t80871,\n\t\t871\n\t],\n\t\"./prism-css-extras.min\": [\n\t\t61710,\n\t\t1710\n\t],\n\t\"./prism-css-extras.min.js\": [\n\t\t61710,\n\t\t1710\n\t],\n\t\"./prism-css.js\": [\n\t\t15251,\n\t\t5251\n\t],\n\t\"./prism-css.min\": [\n\t\t12247,\n\t\t2247\n\t],\n\t\"./prism-css.min.js\": [\n\t\t12247,\n\t\t2247\n\t],\n\t\"./prism-cypher\": [\n\t\t30258,\n\t\t258\n\t],\n\t\"./prism-cypher.js\": [\n\t\t30258,\n\t\t258\n\t],\n\t\"./prism-cypher.min\": [\n\t\t99860,\n\t\t9860\n\t],\n\t\"./prism-cypher.min.js\": [\n\t\t99860,\n\t\t9860\n\t],\n\t\"./prism-d\": [\n\t\t58149,\n\t\t8149\n\t],\n\t\"./prism-d.js\": [\n\t\t58149,\n\t\t8149\n\t],\n\t\"./prism-d.min\": [\n\t\t3525,\n\t\t3525\n\t],\n\t\"./prism-d.min.js\": [\n\t\t3525,\n\t\t3525\n\t],\n\t\"./prism-dart\": [\n\t\t57065,\n\t\t4284\n\t],\n\t\"./prism-dart.js\": [\n\t\t57065,\n\t\t4284\n\t],\n\t\"./prism-dart.min\": [\n\t\t80974,\n\t\t974\n\t],\n\t\"./prism-dart.min.js\": [\n\t\t80974,\n\t\t974\n\t],\n\t\"./prism-dax\": [\n\t\t6454,\n\t\t827\n\t],\n\t\"./prism-dax.js\": [\n\t\t6454,\n\t\t827\n\t],\n\t\"./prism-dax.min\": [\n\t\t19486,\n\t\t9486\n\t],\n\t\"./prism-dax.min.js\": [\n\t\t19486,\n\t\t9486\n\t],\n\t\"./prism-dhall\": [\n\t\t24370,\n\t\t4370\n\t],\n\t\"./prism-dhall.js\": [\n\t\t24370,\n\t\t4370\n\t],\n\t\"./prism-dhall.min\": [\n\t\t87981,\n\t\t7981\n\t],\n\t\"./prism-dhall.min.js\": [\n\t\t87981,\n\t\t7981\n\t],\n\t\"./prism-diff\": [\n\t\t40728,\n\t\t728\n\t],\n\t\"./prism-diff.js\": [\n\t\t40728,\n\t\t728\n\t],\n\t\"./prism-diff.min\": [\n\t\t72734,\n\t\t2734\n\t],\n\t\"./prism-diff.min.js\": [\n\t\t72734,\n\t\t2734\n\t],\n\t\"./prism-django\": [\n\t\t54409,\n\t\t4409\n\t],\n\t\"./prism-django.js\": [\n\t\t54409,\n\t\t4409\n\t],\n\t\"./prism-django.min\": [\n\t\t85534,\n\t\t5534\n\t],\n\t\"./prism-django.min.js\": [\n\t\t85534,\n\t\t5534\n\t],\n\t\"./prism-dns-zone-file\": [\n\t\t68483,\n\t\t8483\n\t],\n\t\"./prism-dns-zone-file.js\": [\n\t\t68483,\n\t\t8483\n\t],\n\t\"./prism-dns-zone-file.min\": [\n\t\t67659,\n\t\t7659\n\t],\n\t\"./prism-dns-zone-file.min.js\": [\n\t\t67659,\n\t\t7659\n\t],\n\t\"./prism-docker\": [\n\t\t77158,\n\t\t7158\n\t],\n\t\"./prism-docker.js\": [\n\t\t77158,\n\t\t7158\n\t],\n\t\"./prism-docker.min\": [\n\t\t74280,\n\t\t4280\n\t],\n\t\"./prism-docker.min.js\": [\n\t\t74280,\n\t\t4280\n\t],\n\t\"./prism-ebnf\": [\n\t\t68232,\n\t\t8232\n\t],\n\t\"./prism-ebnf.js\": [\n\t\t68232,\n\t\t8232\n\t],\n\t\"./prism-ebnf.min\": [\n\t\t79543,\n\t\t9543\n\t],\n\t\"./prism-ebnf.min.js\": [\n\t\t79543,\n\t\t9543\n\t],\n\t\"./prism-editorconfig\": [\n\t\t22456,\n\t\t2456\n\t],\n\t\"./prism-editorconfig.js\": [\n\t\t22456,\n\t\t2456\n\t],\n\t\"./prism-editorconfig.min\": [\n\t\t41880,\n\t\t1880\n\t],\n\t\"./prism-editorconfig.min.js\": [\n\t\t41880,\n\t\t1880\n\t],\n\t\"./prism-eiffel\": [\n\t\t59979,\n\t\t9979\n\t],\n\t\"./prism-eiffel.js\": [\n\t\t59979,\n\t\t9979\n\t],\n\t\"./prism-eiffel.min\": [\n\t\t2891,\n\t\t2891\n\t],\n\t\"./prism-eiffel.min.js\": [\n\t\t2891,\n\t\t2891\n\t],\n\t\"./prism-ejs\": [\n\t\t70060,\n\t\t60\n\t],\n\t\"./prism-ejs.js\": [\n\t\t70060,\n\t\t60\n\t],\n\t\"./prism-ejs.min\": [\n\t\t65823,\n\t\t5823\n\t],\n\t\"./prism-ejs.min.js\": [\n\t\t65823,\n\t\t5823\n\t],\n\t\"./prism-elixir\": [\n\t\t68805,\n\t\t8805\n\t],\n\t\"./prism-elixir.js\": [\n\t\t68805,\n\t\t8805\n\t],\n\t\"./prism-elixir.min\": [\n\t\t43045,\n\t\t3045\n\t],\n\t\"./prism-elixir.min.js\": [\n\t\t43045,\n\t\t3045\n\t],\n\t\"./prism-elm\": [\n\t\t75041,\n\t\t5041\n\t],\n\t\"./prism-elm.js\": [\n\t\t75041,\n\t\t5041\n\t],\n\t\"./prism-elm.min\": [\n\t\t84269,\n\t\t4269\n\t],\n\t\"./prism-elm.min.js\": [\n\t\t84269,\n\t\t4269\n\t],\n\t\"./prism-erb\": [\n\t\t66512,\n\t\t6512\n\t],\n\t\"./prism-erb.js\": [\n\t\t66512,\n\t\t6512\n\t],\n\t\"./prism-erb.min\": [\n\t\t83000,\n\t\t3000\n\t],\n\t\"./prism-erb.min.js\": [\n\t\t83000,\n\t\t3000\n\t],\n\t\"./prism-erlang\": [\n\t\t8956,\n\t\t8956\n\t],\n\t\"./prism-erlang.js\": [\n\t\t8956,\n\t\t8956\n\t],\n\t\"./prism-erlang.min\": [\n\t\t39540,\n\t\t9540\n\t],\n\t\"./prism-erlang.min.js\": [\n\t\t39540,\n\t\t9540\n\t],\n\t\"./prism-etlua\": [\n\t\t79958,\n\t\t9958\n\t],\n\t\"./prism-etlua.js\": [\n\t\t79958,\n\t\t9958\n\t],\n\t\"./prism-etlua.min\": [\n\t\t16195,\n\t\t6195\n\t],\n\t\"./prism-etlua.min.js\": [\n\t\t16195,\n\t\t6195\n\t],\n\t\"./prism-excel-formula\": [\n\t\t51039,\n\t\t1039\n\t],\n\t\"./prism-excel-formula.js\": [\n\t\t51039,\n\t\t1039\n\t],\n\t\"./prism-excel-formula.min\": [\n\t\t78876,\n\t\t8876\n\t],\n\t\"./prism-excel-formula.min.js\": [\n\t\t78876,\n\t\t8876\n\t],\n\t\"./prism-factor\": [\n\t\t50171,\n\t\t171\n\t],\n\t\"./prism-factor.js\": [\n\t\t50171,\n\t\t171\n\t],\n\t\"./prism-factor.min\": [\n\t\t16302,\n\t\t6302\n\t],\n\t\"./prism-factor.min.js\": [\n\t\t16302,\n\t\t6302\n\t],\n\t\"./prism-firestore-security-rules\": [\n\t\t6634,\n\t\t6634\n\t],\n\t\"./prism-firestore-security-rules.js\": [\n\t\t6634,\n\t\t6634\n\t],\n\t\"./prism-firestore-security-rules.min\": [\n\t\t67128,\n\t\t7128\n\t],\n\t\"./prism-firestore-security-rules.min.js\": [\n\t\t67128,\n\t\t7128\n\t],\n\t\"./prism-flow\": [\n\t\t9220,\n\t\t9220\n\t],\n\t\"./prism-flow.js\": [\n\t\t9220,\n\t\t9220\n\t],\n\t\"./prism-flow.min\": [\n\t\t96017,\n\t\t6017\n\t],\n\t\"./prism-flow.min.js\": [\n\t\t96017,\n\t\t6017\n\t],\n\t\"./prism-fortran\": [\n\t\t27915,\n\t\t7915\n\t],\n\t\"./prism-fortran.js\": [\n\t\t27915,\n\t\t7915\n\t],\n\t\"./prism-fortran.min\": [\n\t\t70975,\n\t\t975\n\t],\n\t\"./prism-fortran.min.js\": [\n\t\t70975,\n\t\t975\n\t],\n\t\"./prism-fsharp\": [\n\t\t75045,\n\t\t5045\n\t],\n\t\"./prism-fsharp.js\": [\n\t\t75045,\n\t\t5045\n\t],\n\t\"./prism-fsharp.min\": [\n\t\t25001,\n\t\t5001\n\t],\n\t\"./prism-fsharp.min.js\": [\n\t\t25001,\n\t\t5001\n\t],\n\t\"./prism-ftl\": [\n\t\t72778,\n\t\t2778\n\t],\n\t\"./prism-ftl.js\": [\n\t\t72778,\n\t\t2778\n\t],\n\t\"./prism-ftl.min\": [\n\t\t76831,\n\t\t6831\n\t],\n\t\"./prism-ftl.min.js\": [\n\t\t76831,\n\t\t6831\n\t],\n\t\"./prism-gcode\": [\n\t\t28407,\n\t\t8407\n\t],\n\t\"./prism-gcode.js\": [\n\t\t28407,\n\t\t8407\n\t],\n\t\"./prism-gcode.min\": [\n\t\t9303,\n\t\t9303\n\t],\n\t\"./prism-gcode.min.js\": [\n\t\t9303,\n\t\t9303\n\t],\n\t\"./prism-gdscript\": [\n\t\t65276,\n\t\t5276\n\t],\n\t\"./prism-gdscript.js\": [\n\t\t65276,\n\t\t5276\n\t],\n\t\"./prism-gdscript.min\": [\n\t\t20563,\n\t\t563\n\t],\n\t\"./prism-gdscript.min.js\": [\n\t\t20563,\n\t\t563\n\t],\n\t\"./prism-gedcom\": [\n\t\t66857,\n\t\t6857\n\t],\n\t\"./prism-gedcom.js\": [\n\t\t66857,\n\t\t6857\n\t],\n\t\"./prism-gedcom.min\": [\n\t\t17065,\n\t\t7065\n\t],\n\t\"./prism-gedcom.min.js\": [\n\t\t17065,\n\t\t7065\n\t],\n\t\"./prism-gherkin\": [\n\t\t49472,\n\t\t9472\n\t],\n\t\"./prism-gherkin.js\": [\n\t\t49472,\n\t\t9472\n\t],\n\t\"./prism-gherkin.min\": [\n\t\t19876,\n\t\t9876\n\t],\n\t\"./prism-gherkin.min.js\": [\n\t\t19876,\n\t\t9876\n\t],\n\t\"./prism-git\": [\n\t\t79787,\n\t\t9787\n\t],\n\t\"./prism-git.js\": [\n\t\t79787,\n\t\t9787\n\t],\n\t\"./prism-git.min\": [\n\t\t93530,\n\t\t3530\n\t],\n\t\"./prism-git.min.js\": [\n\t\t93530,\n\t\t3530\n\t],\n\t\"./prism-glsl\": [\n\t\t79812,\n\t\t9812\n\t],\n\t\"./prism-glsl.js\": [\n\t\t79812,\n\t\t9812\n\t],\n\t\"./prism-glsl.min\": [\n\t\t58575,\n\t\t8575\n\t],\n\t\"./prism-glsl.min.js\": [\n\t\t58575,\n\t\t8575\n\t],\n\t\"./prism-gml\": [\n\t\t71828,\n\t\t1828\n\t],\n\t\"./prism-gml.js\": [\n\t\t71828,\n\t\t1828\n\t],\n\t\"./prism-gml.min\": [\n\t\t81813,\n\t\t1813\n\t],\n\t\"./prism-gml.min.js\": [\n\t\t81813,\n\t\t1813\n\t],\n\t\"./prism-go\": [\n\t\t27046,\n\t\t7046\n\t],\n\t\"./prism-go.js\": [\n\t\t27046,\n\t\t7046\n\t],\n\t\"./prism-go.min\": [\n\t\t50677,\n\t\t677\n\t],\n\t\"./prism-go.min.js\": [\n\t\t50677,\n\t\t677\n\t],\n\t\"./prism-graphql\": [\n\t\t17117,\n\t\t7117\n\t],\n\t\"./prism-graphql.js\": [\n\t\t17117,\n\t\t7117\n\t],\n\t\"./prism-graphql.min\": [\n\t\t11530,\n\t\t1530\n\t],\n\t\"./prism-graphql.min.js\": [\n\t\t11530,\n\t\t1530\n\t],\n\t\"./prism-groovy\": [\n\t\t40485,\n\t\t4165\n\t],\n\t\"./prism-groovy.js\": [\n\t\t40485,\n\t\t4165\n\t],\n\t\"./prism-groovy.min\": [\n\t\t29627,\n\t\t9627\n\t],\n\t\"./prism-groovy.min.js\": [\n\t\t29627,\n\t\t9627\n\t],\n\t\"./prism-haml\": [\n\t\t39181,\n\t\t9181\n\t],\n\t\"./prism-haml.js\": [\n\t\t39181,\n\t\t9181\n\t],\n\t\"./prism-haml.min\": [\n\t\t53025,\n\t\t3025\n\t],\n\t\"./prism-haml.min.js\": [\n\t\t53025,\n\t\t3025\n\t],\n\t\"./prism-handlebars\": [\n\t\t70110,\n\t\t110\n\t],\n\t\"./prism-handlebars.js\": [\n\t\t70110,\n\t\t110\n\t],\n\t\"./prism-handlebars.min\": [\n\t\t34329,\n\t\t4329\n\t],\n\t\"./prism-handlebars.min.js\": [\n\t\t34329,\n\t\t4329\n\t],\n\t\"./prism-haskell\": [\n\t\t81295,\n\t\t1295\n\t],\n\t\"./prism-haskell.js\": [\n\t\t81295,\n\t\t1295\n\t],\n\t\"./prism-haskell.min\": [\n\t\t12199,\n\t\t2199\n\t],\n\t\"./prism-haskell.min.js\": [\n\t\t12199,\n\t\t2199\n\t],\n\t\"./prism-haxe\": [\n\t\t14324,\n\t\t4324\n\t],\n\t\"./prism-haxe.js\": [\n\t\t14324,\n\t\t4324\n\t],\n\t\"./prism-haxe.min\": [\n\t\t40714,\n\t\t714\n\t],\n\t\"./prism-haxe.min.js\": [\n\t\t40714,\n\t\t714\n\t],\n\t\"./prism-hcl\": [\n\t\t24677,\n\t\t9337\n\t],\n\t\"./prism-hcl.js\": [\n\t\t24677,\n\t\t9337\n\t],\n\t\"./prism-hcl.min\": [\n\t\t7044,\n\t\t7044\n\t],\n\t\"./prism-hcl.min.js\": [\n\t\t7044,\n\t\t7044\n\t],\n\t\"./prism-hlsl\": [\n\t\t5578,\n\t\t5578\n\t],\n\t\"./prism-hlsl.js\": [\n\t\t5578,\n\t\t5578\n\t],\n\t\"./prism-hlsl.min\": [\n\t\t62058,\n\t\t2058\n\t],\n\t\"./prism-hlsl.min.js\": [\n\t\t62058,\n\t\t2058\n\t],\n\t\"./prism-hpkp\": [\n\t\t26203,\n\t\t6203\n\t],\n\t\"./prism-hpkp.js\": [\n\t\t26203,\n\t\t6203\n\t],\n\t\"./prism-hpkp.min\": [\n\t\t67623,\n\t\t7623\n\t],\n\t\"./prism-hpkp.min.js\": [\n\t\t67623,\n\t\t7623\n\t],\n\t\"./prism-hsts\": [\n\t\t17786,\n\t\t7786\n\t],\n\t\"./prism-hsts.js\": [\n\t\t17786,\n\t\t7786\n\t],\n\t\"./prism-hsts.min\": [\n\t\t23808,\n\t\t3808\n\t],\n\t\"./prism-hsts.min.js\": [\n\t\t23808,\n\t\t3808\n\t],\n\t\"./prism-http\": [\n\t\t50057,\n\t\t57\n\t],\n\t\"./prism-http.js\": [\n\t\t50057,\n\t\t57\n\t],\n\t\"./prism-http.min\": [\n\t\t587,\n\t\t587\n\t],\n\t\"./prism-http.min.js\": [\n\t\t587,\n\t\t587\n\t],\n\t\"./prism-ichigojam\": [\n\t\t77460,\n\t\t7460\n\t],\n\t\"./prism-ichigojam.js\": [\n\t\t77460,\n\t\t7460\n\t],\n\t\"./prism-ichigojam.min\": [\n\t\t54111,\n\t\t4111\n\t],\n\t\"./prism-ichigojam.min.js\": [\n\t\t54111,\n\t\t4111\n\t],\n\t\"./prism-icon\": [\n\t\t54263,\n\t\t4263\n\t],\n\t\"./prism-icon.js\": [\n\t\t54263,\n\t\t4263\n\t],\n\t\"./prism-icon.min\": [\n\t\t45477,\n\t\t5477\n\t],\n\t\"./prism-icon.min.js\": [\n\t\t45477,\n\t\t5477\n\t],\n\t\"./prism-iecst\": [\n\t\t55689,\n\t\t5689\n\t],\n\t\"./prism-iecst.js\": [\n\t\t55689,\n\t\t5689\n\t],\n\t\"./prism-iecst.min\": [\n\t\t89849,\n\t\t7238\n\t],\n\t\"./prism-iecst.min.js\": [\n\t\t89849,\n\t\t7238\n\t],\n\t\"./prism-ignore\": [\n\t\t10880,\n\t\t880\n\t],\n\t\"./prism-ignore.js\": [\n\t\t10880,\n\t\t880\n\t],\n\t\"./prism-ignore.min\": [\n\t\t47122,\n\t\t7122\n\t],\n\t\"./prism-ignore.min.js\": [\n\t\t47122,\n\t\t7122\n\t],\n\t\"./prism-inform7\": [\n\t\t56521,\n\t\t6521\n\t],\n\t\"./prism-inform7.js\": [\n\t\t56521,\n\t\t6521\n\t],\n\t\"./prism-inform7.min\": [\n\t\t26293,\n\t\t6293\n\t],\n\t\"./prism-inform7.min.js\": [\n\t\t26293,\n\t\t6293\n\t],\n\t\"./prism-ini\": [\n\t\t29525,\n\t\t9525\n\t],\n\t\"./prism-ini.js\": [\n\t\t29525,\n\t\t9525\n\t],\n\t\"./prism-ini.min\": [\n\t\t19475,\n\t\t9475\n\t],\n\t\"./prism-ini.min.js\": [\n\t\t19475,\n\t\t9475\n\t],\n\t\"./prism-io\": [\n\t\t48942,\n\t\t8942\n\t],\n\t\"./prism-io.js\": [\n\t\t48942,\n\t\t8942\n\t],\n\t\"./prism-io.min\": [\n\t\t93154,\n\t\t3154\n\t],\n\t\"./prism-io.min.js\": [\n\t\t93154,\n\t\t3154\n\t],\n\t\"./prism-j\": [\n\t\t18848,\n\t\t8848\n\t],\n\t\"./prism-j.js\": [\n\t\t18848,\n\t\t8848\n\t],\n\t\"./prism-j.min\": [\n\t\t78067,\n\t\t8067\n\t],\n\t\"./prism-j.min.js\": [\n\t\t78067,\n\t\t8067\n\t],\n\t\"./prism-java\": [\n\t\t52503,\n\t\t2503\n\t],\n\t\"./prism-java.js\": [\n\t\t52503,\n\t\t2503\n\t],\n\t\"./prism-java.min\": [\n\t\t17706,\n\t\t7706\n\t],\n\t\"./prism-java.min.js\": [\n\t\t17706,\n\t\t7706\n\t],\n\t\"./prism-javadoc\": [\n\t\t52008,\n\t\t2008\n\t],\n\t\"./prism-javadoc.js\": [\n\t\t52008,\n\t\t2008\n\t],\n\t\"./prism-javadoc.min\": [\n\t\t78792,\n\t\t8792\n\t],\n\t\"./prism-javadoc.min.js\": [\n\t\t78792,\n\t\t8792\n\t],\n\t\"./prism-javadoclike\": [\n\t\t54884,\n\t\t4884\n\t],\n\t\"./prism-javadoclike.js\": [\n\t\t54884,\n\t\t4884\n\t],\n\t\"./prism-javadoclike.min\": [\n\t\t97854,\n\t\t7854\n\t],\n\t\"./prism-javadoclike.min.js\": [\n\t\t97854,\n\t\t7854\n\t],\n\t\"./prism-javascript\": [\n\t\t39980,\n\t\t9980\n\t],\n\t\"./prism-javascript.js\": [\n\t\t39980,\n\t\t9980\n\t],\n\t\"./prism-javascript.min\": [\n\t\t30235,\n\t\t235\n\t],\n\t\"./prism-javascript.min.js\": [\n\t\t30235,\n\t\t235\n\t],\n\t\"./prism-javastacktrace\": [\n\t\t81454,\n\t\t1454\n\t],\n\t\"./prism-javastacktrace.js\": [\n\t\t81454,\n\t\t1454\n\t],\n\t\"./prism-javastacktrace.min\": [\n\t\t39837,\n\t\t9837\n\t],\n\t\"./prism-javastacktrace.min.js\": [\n\t\t39837,\n\t\t9837\n\t],\n\t\"./prism-jolie\": [\n\t\t68874,\n\t\t8874\n\t],\n\t\"./prism-jolie.js\": [\n\t\t68874,\n\t\t8874\n\t],\n\t\"./prism-jolie.min\": [\n\t\t91429,\n\t\t5594\n\t],\n\t\"./prism-jolie.min.js\": [\n\t\t91429,\n\t\t5594\n\t],\n\t\"./prism-jq\": [\n\t\t96342,\n\t\t6342\n\t],\n\t\"./prism-jq.js\": [\n\t\t96342,\n\t\t6342\n\t],\n\t\"./prism-jq.min\": [\n\t\t92771,\n\t\t2771\n\t],\n\t\"./prism-jq.min.js\": [\n\t\t92771,\n\t\t2771\n\t],\n\t\"./prism-js-extras\": [\n\t\t46690,\n\t\t6690\n\t],\n\t\"./prism-js-extras.js\": [\n\t\t46690,\n\t\t6690\n\t],\n\t\"./prism-js-extras.min\": [\n\t\t49273,\n\t\t9273\n\t],\n\t\"./prism-js-extras.min.js\": [\n\t\t49273,\n\t\t9273\n\t],\n\t\"./prism-js-templates\": [\n\t\t38885,\n\t\t8885\n\t],\n\t\"./prism-js-templates.js\": [\n\t\t38885,\n\t\t8885\n\t],\n\t\"./prism-js-templates.min\": [\n\t\t3908,\n\t\t3908\n\t],\n\t\"./prism-js-templates.min.js\": [\n\t\t3908,\n\t\t3908\n\t],\n\t\"./prism-jsdoc\": [\n\t\t68915,\n\t\t8915\n\t],\n\t\"./prism-jsdoc.js\": [\n\t\t68915,\n\t\t8915\n\t],\n\t\"./prism-jsdoc.min\": [\n\t\t27472,\n\t\t7472\n\t],\n\t\"./prism-jsdoc.min.js\": [\n\t\t27472,\n\t\t7472\n\t],\n\t\"./prism-json\": [\n\t\t74277,\n\t\t4277\n\t],\n\t\"./prism-json.js\": [\n\t\t74277,\n\t\t4277\n\t],\n\t\"./prism-json.min\": [\n\t\t8674,\n\t\t8674\n\t],\n\t\"./prism-json.min.js\": [\n\t\t8674,\n\t\t8674\n\t],\n\t\"./prism-json5\": [\n\t\t22444,\n\t\t2444\n\t],\n\t\"./prism-json5.js\": [\n\t\t22444,\n\t\t2444\n\t],\n\t\"./prism-json5.min\": [\n\t\t54001,\n\t\t4001\n\t],\n\t\"./prism-json5.min.js\": [\n\t\t54001,\n\t\t4001\n\t],\n\t\"./prism-jsonp\": [\n\t\t64488,\n\t\t4488\n\t],\n\t\"./prism-jsonp.js\": [\n\t\t64488,\n\t\t4488\n\t],\n\t\"./prism-jsonp.min\": [\n\t\t19442,\n\t\t1286\n\t],\n\t\"./prism-jsonp.min.js\": [\n\t\t19442,\n\t\t1286\n\t],\n\t\"./prism-jsstacktrace\": [\n\t\t81917,\n\t\t1917\n\t],\n\t\"./prism-jsstacktrace.js\": [\n\t\t81917,\n\t\t1917\n\t],\n\t\"./prism-jsstacktrace.min\": [\n\t\t68152,\n\t\t8152\n\t],\n\t\"./prism-jsstacktrace.min.js\": [\n\t\t68152,\n\t\t8152\n\t],\n\t\"./prism-jsx\": [\n\t\t62356,\n\t\t2356\n\t],\n\t\"./prism-jsx.js\": [\n\t\t62356,\n\t\t2356\n\t],\n\t\"./prism-jsx.min\": [\n\t\t81233,\n\t\t1233\n\t],\n\t\"./prism-jsx.min.js\": [\n\t\t81233,\n\t\t1233\n\t],\n\t\"./prism-julia\": [\n\t\t56543,\n\t\t6543\n\t],\n\t\"./prism-julia.js\": [\n\t\t56543,\n\t\t6543\n\t],\n\t\"./prism-julia.min\": [\n\t\t82580,\n\t\t2580\n\t],\n\t\"./prism-julia.min.js\": [\n\t\t82580,\n\t\t2580\n\t],\n\t\"./prism-keyman\": [\n\t\t82821,\n\t\t2821\n\t],\n\t\"./prism-keyman.js\": [\n\t\t82821,\n\t\t2821\n\t],\n\t\"./prism-keyman.min\": [\n\t\t51064,\n\t\t1064\n\t],\n\t\"./prism-keyman.min.js\": [\n\t\t51064,\n\t\t1064\n\t],\n\t\"./prism-kotlin\": [\n\t\t32334,\n\t\t2334\n\t],\n\t\"./prism-kotlin.js\": [\n\t\t32334,\n\t\t2334\n\t],\n\t\"./prism-kotlin.min\": [\n\t\t44002,\n\t\t4002\n\t],\n\t\"./prism-kotlin.min.js\": [\n\t\t44002,\n\t\t4002\n\t],\n\t\"./prism-latex\": [\n\t\t90319,\n\t\t319\n\t],\n\t\"./prism-latex.js\": [\n\t\t90319,\n\t\t319\n\t],\n\t\"./prism-latex.min\": [\n\t\t99119,\n\t\t9119\n\t],\n\t\"./prism-latex.min.js\": [\n\t\t99119,\n\t\t9119\n\t],\n\t\"./prism-latte\": [\n\t\t87442,\n\t\t7442\n\t],\n\t\"./prism-latte.js\": [\n\t\t87442,\n\t\t7442\n\t],\n\t\"./prism-latte.min\": [\n\t\t29908,\n\t\t9908\n\t],\n\t\"./prism-latte.min.js\": [\n\t\t29908,\n\t\t9908\n\t],\n\t\"./prism-less\": [\n\t\t37802,\n\t\t7802\n\t],\n\t\"./prism-less.js\": [\n\t\t37802,\n\t\t7802\n\t],\n\t\"./prism-less.min\": [\n\t\t64006,\n\t\t4006\n\t],\n\t\"./prism-less.min.js\": [\n\t\t64006,\n\t\t4006\n\t],\n\t\"./prism-lilypond\": [\n\t\t61719,\n\t\t1719\n\t],\n\t\"./prism-lilypond.js\": [\n\t\t61719,\n\t\t1719\n\t],\n\t\"./prism-lilypond.min\": [\n\t\t12555,\n\t\t2555\n\t],\n\t\"./prism-lilypond.min.js\": [\n\t\t12555,\n\t\t2555\n\t],\n\t\"./prism-liquid\": [\n\t\t150,\n\t\t150\n\t],\n\t\"./prism-liquid.js\": [\n\t\t150,\n\t\t150\n\t],\n\t\"./prism-liquid.min\": [\n\t\t55728,\n\t\t5728\n\t],\n\t\"./prism-liquid.min.js\": [\n\t\t55728,\n\t\t5728\n\t],\n\t\"./prism-lisp\": [\n\t\t36641,\n\t\t5520\n\t],\n\t\"./prism-lisp.js\": [\n\t\t36641,\n\t\t5520\n\t],\n\t\"./prism-lisp.min\": [\n\t\t87770,\n\t\t7770\n\t],\n\t\"./prism-lisp.min.js\": [\n\t\t87770,\n\t\t7770\n\t],\n\t\"./prism-livescript\": [\n\t\t76347,\n\t\t6347\n\t],\n\t\"./prism-livescript.js\": [\n\t\t76347,\n\t\t6347\n\t],\n\t\"./prism-livescript.min\": [\n\t\t41163,\n\t\t1163\n\t],\n\t\"./prism-livescript.min.js\": [\n\t\t41163,\n\t\t1163\n\t],\n\t\"./prism-llvm\": [\n\t\t85153,\n\t\t5153\n\t],\n\t\"./prism-llvm.js\": [\n\t\t85153,\n\t\t5153\n\t],\n\t\"./prism-llvm.min\": [\n\t\t82932,\n\t\t2932\n\t],\n\t\"./prism-llvm.min.js\": [\n\t\t82932,\n\t\t2932\n\t],\n\t\"./prism-lolcode\": [\n\t\t26555,\n\t\t6555\n\t],\n\t\"./prism-lolcode.js\": [\n\t\t26555,\n\t\t6555\n\t],\n\t\"./prism-lolcode.min\": [\n\t\t10076,\n\t\t76\n\t],\n\t\"./prism-lolcode.min.js\": [\n\t\t10076,\n\t\t76\n\t],\n\t\"./prism-lua\": [\n\t\t66841,\n\t\t6841\n\t],\n\t\"./prism-lua.js\": [\n\t\t66841,\n\t\t6841\n\t],\n\t\"./prism-lua.min\": [\n\t\t63047,\n\t\t3047\n\t],\n\t\"./prism-lua.min.js\": [\n\t\t63047,\n\t\t3047\n\t],\n\t\"./prism-makefile\": [\n\t\t48443,\n\t\t8443\n\t],\n\t\"./prism-makefile.js\": [\n\t\t48443,\n\t\t8443\n\t],\n\t\"./prism-makefile.min\": [\n\t\t75151,\n\t\t5151\n\t],\n\t\"./prism-makefile.min.js\": [\n\t\t75151,\n\t\t5151\n\t],\n\t\"./prism-markdown\": [\n\t\t24064\n\t],\n\t\"./prism-markdown.js\": [\n\t\t24064\n\t],\n\t\"./prism-markdown.min\": [\n\t\t90047,\n\t\t47\n\t],\n\t\"./prism-markdown.min.js\": [\n\t\t90047,\n\t\t47\n\t],\n\t\"./prism-markup\": [\n\t\t24335\n\t],\n\t\"./prism-markup-templating\": [\n\t\t96854,\n\t\t6854\n\t],\n\t\"./prism-markup-templating.js\": [\n\t\t96854,\n\t\t6854\n\t],\n\t\"./prism-markup-templating.min\": [\n\t\t48929,\n\t\t8929\n\t],\n\t\"./prism-markup-templating.min.js\": [\n\t\t48929,\n\t\t8929\n\t],\n\t\"./prism-markup.js\": [\n\t\t24335\n\t],\n\t\"./prism-markup.min\": [\n\t\t74060,\n\t\t4060\n\t],\n\t\"./prism-markup.min.js\": [\n\t\t74060,\n\t\t4060\n\t],\n\t\"./prism-matlab\": [\n\t\t61169,\n\t\t1169\n\t],\n\t\"./prism-matlab.js\": [\n\t\t61169,\n\t\t1169\n\t],\n\t\"./prism-matlab.min\": [\n\t\t55354,\n\t\t5354\n\t],\n\t\"./prism-matlab.min.js\": [\n\t\t55354,\n\t\t5354\n\t],\n\t\"./prism-mel\": [\n\t\t16185,\n\t\t6185\n\t],\n\t\"./prism-mel.js\": [\n\t\t16185,\n\t\t6185\n\t],\n\t\"./prism-mel.min\": [\n\t\t52357,\n\t\t2357\n\t],\n\t\"./prism-mel.min.js\": [\n\t\t52357,\n\t\t2357\n\t],\n\t\"./prism-mizar\": [\n\t\t15101,\n\t\t5101\n\t],\n\t\"./prism-mizar.js\": [\n\t\t15101,\n\t\t5101\n\t],\n\t\"./prism-mizar.min\": [\n\t\t79310,\n\t\t9310\n\t],\n\t\"./prism-mizar.min.js\": [\n\t\t79310,\n\t\t9310\n\t],\n\t\"./prism-mongodb\": [\n\t\t89134,\n\t\t9134\n\t],\n\t\"./prism-mongodb.js\": [\n\t\t89134,\n\t\t9134\n\t],\n\t\"./prism-mongodb.min\": [\n\t\t85584,\n\t\t5584\n\t],\n\t\"./prism-mongodb.min.js\": [\n\t\t85584,\n\t\t5584\n\t],\n\t\"./prism-monkey\": [\n\t\t80676,\n\t\t676\n\t],\n\t\"./prism-monkey.js\": [\n\t\t80676,\n\t\t676\n\t],\n\t\"./prism-monkey.min\": [\n\t\t7259,\n\t\t7259\n\t],\n\t\"./prism-monkey.min.js\": [\n\t\t7259,\n\t\t7259\n\t],\n\t\"./prism-moonscript\": [\n\t\t61899,\n\t\t1899\n\t],\n\t\"./prism-moonscript.js\": [\n\t\t61899,\n\t\t1899\n\t],\n\t\"./prism-moonscript.min\": [\n\t\t65298,\n\t\t5298\n\t],\n\t\"./prism-moonscript.min.js\": [\n\t\t65298,\n\t\t5298\n\t],\n\t\"./prism-n1ql\": [\n\t\t55949,\n\t\t5949\n\t],\n\t\"./prism-n1ql.js\": [\n\t\t55949,\n\t\t5949\n\t],\n\t\"./prism-n1ql.min\": [\n\t\t86985,\n\t\t6985\n\t],\n\t\"./prism-n1ql.min.js\": [\n\t\t86985,\n\t\t6985\n\t],\n\t\"./prism-n4js\": [\n\t\t88651,\n\t\t8651\n\t],\n\t\"./prism-n4js.js\": [\n\t\t88651,\n\t\t8651\n\t],\n\t\"./prism-n4js.min\": [\n\t\t50169,\n\t\t169\n\t],\n\t\"./prism-n4js.min.js\": [\n\t\t50169,\n\t\t169\n\t],\n\t\"./prism-nand2tetris-hdl\": [\n\t\t80454,\n\t\t454\n\t],\n\t\"./prism-nand2tetris-hdl.js\": [\n\t\t80454,\n\t\t454\n\t],\n\t\"./prism-nand2tetris-hdl.min\": [\n\t\t48974,\n\t\t8974\n\t],\n\t\"./prism-nand2tetris-hdl.min.js\": [\n\t\t48974,\n\t\t8974\n\t],\n\t\"./prism-naniscript\": [\n\t\t17898,\n\t\t7898\n\t],\n\t\"./prism-naniscript.js\": [\n\t\t17898,\n\t\t7898\n\t],\n\t\"./prism-naniscript.min\": [\n\t\t42743,\n\t\t2743\n\t],\n\t\"./prism-naniscript.min.js\": [\n\t\t42743,\n\t\t2743\n\t],\n\t\"./prism-nasm\": [\n\t\t52353,\n\t\t2353\n\t],\n\t\"./prism-nasm.js\": [\n\t\t52353,\n\t\t2353\n\t],\n\t\"./prism-nasm.min\": [\n\t\t10603,\n\t\t603\n\t],\n\t\"./prism-nasm.min.js\": [\n\t\t10603,\n\t\t603\n\t],\n\t\"./prism-neon\": [\n\t\t77661,\n\t\t7661\n\t],\n\t\"./prism-neon.js\": [\n\t\t77661,\n\t\t7661\n\t],\n\t\"./prism-neon.min\": [\n\t\t98832,\n\t\t8832\n\t],\n\t\"./prism-neon.min.js\": [\n\t\t98832,\n\t\t8832\n\t],\n\t\"./prism-nginx\": [\n\t\t33436,\n\t\t3436\n\t],\n\t\"./prism-nginx.js\": [\n\t\t33436,\n\t\t3436\n\t],\n\t\"./prism-nginx.min\": [\n\t\t49503,\n\t\t9503\n\t],\n\t\"./prism-nginx.min.js\": [\n\t\t49503,\n\t\t9503\n\t],\n\t\"./prism-nim\": [\n\t\t35743,\n\t\t5743\n\t],\n\t\"./prism-nim.js\": [\n\t\t35743,\n\t\t5743\n\t],\n\t\"./prism-nim.min\": [\n\t\t61663,\n\t\t1663\n\t],\n\t\"./prism-nim.min.js\": [\n\t\t61663,\n\t\t1663\n\t],\n\t\"./prism-nix\": [\n\t\t58704,\n\t\t8704\n\t],\n\t\"./prism-nix.js\": [\n\t\t58704,\n\t\t8704\n\t],\n\t\"./prism-nix.min\": [\n\t\t34232,\n\t\t4232\n\t],\n\t\"./prism-nix.min.js\": [\n\t\t34232,\n\t\t4232\n\t],\n\t\"./prism-nsis\": [\n\t\t74876,\n\t\t4876\n\t],\n\t\"./prism-nsis.js\": [\n\t\t74876,\n\t\t4876\n\t],\n\t\"./prism-nsis.min\": [\n\t\t68617,\n\t\t8617\n\t],\n\t\"./prism-nsis.min.js\": [\n\t\t68617,\n\t\t8617\n\t],\n\t\"./prism-objectivec\": [\n\t\t11426,\n\t\t1426\n\t],\n\t\"./prism-objectivec.js\": [\n\t\t11426,\n\t\t1426\n\t],\n\t\"./prism-objectivec.min\": [\n\t\t51637,\n\t\t1637\n\t],\n\t\"./prism-objectivec.min.js\": [\n\t\t51637,\n\t\t1637\n\t],\n\t\"./prism-ocaml\": [\n\t\t24371,\n\t\t4371\n\t],\n\t\"./prism-ocaml.js\": [\n\t\t24371,\n\t\t4371\n\t],\n\t\"./prism-ocaml.min\": [\n\t\t37610,\n\t\t7610\n\t],\n\t\"./prism-ocaml.min.js\": [\n\t\t37610,\n\t\t7610\n\t],\n\t\"./prism-opencl\": [\n\t\t13144,\n\t\t3144\n\t],\n\t\"./prism-opencl.js\": [\n\t\t13144,\n\t\t3144\n\t],\n\t\"./prism-opencl.min\": [\n\t\t52818,\n\t\t2818\n\t],\n\t\"./prism-opencl.min.js\": [\n\t\t52818,\n\t\t2818\n\t],\n\t\"./prism-oz\": [\n\t\t903,\n\t\t903\n\t],\n\t\"./prism-oz.js\": [\n\t\t903,\n\t\t903\n\t],\n\t\"./prism-oz.min\": [\n\t\t87553,\n\t\t7553\n\t],\n\t\"./prism-oz.min.js\": [\n\t\t87553,\n\t\t7553\n\t],\n\t\"./prism-parigp\": [\n\t\t47511,\n\t\t7511\n\t],\n\t\"./prism-parigp.js\": [\n\t\t47511,\n\t\t7511\n\t],\n\t\"./prism-parigp.min\": [\n\t\t90575,\n\t\t575\n\t],\n\t\"./prism-parigp.min.js\": [\n\t\t90575,\n\t\t575\n\t],\n\t\"./prism-parser\": [\n\t\t50605,\n\t\t780\n\t],\n\t\"./prism-parser.js\": [\n\t\t50605,\n\t\t780\n\t],\n\t\"./prism-parser.min\": [\n\t\t97410,\n\t\t7410\n\t],\n\t\"./prism-parser.min.js\": [\n\t\t97410,\n\t\t7410\n\t],\n\t\"./prism-pascal\": [\n\t\t13210,\n\t\t3210\n\t],\n\t\"./prism-pascal.js\": [\n\t\t13210,\n\t\t3210\n\t],\n\t\"./prism-pascal.min\": [\n\t\t53484,\n\t\t3484\n\t],\n\t\"./prism-pascal.min.js\": [\n\t\t53484,\n\t\t3484\n\t],\n\t\"./prism-pascaligo\": [\n\t\t54332,\n\t\t4332\n\t],\n\t\"./prism-pascaligo.js\": [\n\t\t54332,\n\t\t4332\n\t],\n\t\"./prism-pascaligo.min\": [\n\t\t68000,\n\t\t8000\n\t],\n\t\"./prism-pascaligo.min.js\": [\n\t\t68000,\n\t\t8000\n\t],\n\t\"./prism-pcaxis\": [\n\t\t52892,\n\t\t2892\n\t],\n\t\"./prism-pcaxis.js\": [\n\t\t52892,\n\t\t2892\n\t],\n\t\"./prism-pcaxis.min\": [\n\t\t55863,\n\t\t5863\n\t],\n\t\"./prism-pcaxis.min.js\": [\n\t\t55863,\n\t\t5863\n\t],\n\t\"./prism-peoplecode\": [\n\t\t74984,\n\t\t4984\n\t],\n\t\"./prism-peoplecode.js\": [\n\t\t74984,\n\t\t4984\n\t],\n\t\"./prism-peoplecode.min\": [\n\t\t11025,\n\t\t1025\n\t],\n\t\"./prism-peoplecode.min.js\": [\n\t\t11025,\n\t\t1025\n\t],\n\t\"./prism-perl\": [\n\t\t20288,\n\t\t288\n\t],\n\t\"./prism-perl.js\": [\n\t\t20288,\n\t\t288\n\t],\n\t\"./prism-perl.min\": [\n\t\t93972,\n\t\t3972\n\t],\n\t\"./prism-perl.min.js\": [\n\t\t93972,\n\t\t3972\n\t],\n\t\"./prism-php\": [\n\t\t99945,\n\t\t9945\n\t],\n\t\"./prism-php-extras\": [\n\t\t89425,\n\t\t9425\n\t],\n\t\"./prism-php-extras.js\": [\n\t\t89425,\n\t\t9425\n\t],\n\t\"./prism-php-extras.min\": [\n\t\t66200,\n\t\t6200\n\t],\n\t\"./prism-php-extras.min.js\": [\n\t\t66200,\n\t\t6200\n\t],\n\t\"./prism-php.js\": [\n\t\t99945,\n\t\t9945\n\t],\n\t\"./prism-php.min\": [\n\t\t37675,\n\t\t7675\n\t],\n\t\"./prism-php.min.js\": [\n\t\t37675,\n\t\t7675\n\t],\n\t\"./prism-phpdoc\": [\n\t\t26280,\n\t\t6280\n\t],\n\t\"./prism-phpdoc.js\": [\n\t\t26280,\n\t\t6280\n\t],\n\t\"./prism-phpdoc.min\": [\n\t\t49724,\n\t\t9724\n\t],\n\t\"./prism-phpdoc.min.js\": [\n\t\t49724,\n\t\t9724\n\t],\n\t\"./prism-plsql\": [\n\t\t92927,\n\t\t2927\n\t],\n\t\"./prism-plsql.js\": [\n\t\t92927,\n\t\t2927\n\t],\n\t\"./prism-plsql.min\": [\n\t\t93771,\n\t\t3771\n\t],\n\t\"./prism-plsql.min.js\": [\n\t\t93771,\n\t\t3771\n\t],\n\t\"./prism-powerquery\": [\n\t\t63887,\n\t\t3887\n\t],\n\t\"./prism-powerquery.js\": [\n\t\t63887,\n\t\t3887\n\t],\n\t\"./prism-powerquery.min\": [\n\t\t43171,\n\t\t3171\n\t],\n\t\"./prism-powerquery.min.js\": [\n\t\t43171,\n\t\t3171\n\t],\n\t\"./prism-powershell\": [\n\t\t86862,\n\t\t6862\n\t],\n\t\"./prism-powershell.js\": [\n\t\t86862,\n\t\t6862\n\t],\n\t\"./prism-powershell.min\": [\n\t\t77424,\n\t\t7424\n\t],\n\t\"./prism-powershell.min.js\": [\n\t\t77424,\n\t\t7424\n\t],\n\t\"./prism-processing\": [\n\t\t97353,\n\t\t7353\n\t],\n\t\"./prism-processing.js\": [\n\t\t97353,\n\t\t7353\n\t],\n\t\"./prism-processing.min\": [\n\t\t15759,\n\t\t5759\n\t],\n\t\"./prism-processing.min.js\": [\n\t\t15759,\n\t\t5759\n\t],\n\t\"./prism-prolog\": [\n\t\t43932,\n\t\t3932\n\t],\n\t\"./prism-prolog.js\": [\n\t\t43932,\n\t\t3932\n\t],\n\t\"./prism-prolog.min\": [\n\t\t32517,\n\t\t2517\n\t],\n\t\"./prism-prolog.min.js\": [\n\t\t32517,\n\t\t2517\n\t],\n\t\"./prism-properties\": [\n\t\t45820,\n\t\t5820\n\t],\n\t\"./prism-properties.js\": [\n\t\t45820,\n\t\t5820\n\t],\n\t\"./prism-properties.min\": [\n\t\t31623,\n\t\t1623\n\t],\n\t\"./prism-properties.min.js\": [\n\t\t31623,\n\t\t1623\n\t],\n\t\"./prism-protobuf\": [\n\t\t37345,\n\t\t7345\n\t],\n\t\"./prism-protobuf.js\": [\n\t\t37345,\n\t\t7345\n\t],\n\t\"./prism-protobuf.min\": [\n\t\t98250,\n\t\t8250\n\t],\n\t\"./prism-protobuf.min.js\": [\n\t\t98250,\n\t\t8250\n\t],\n\t\"./prism-pug\": [\n\t\t93381,\n\t\t3381\n\t],\n\t\"./prism-pug.js\": [\n\t\t93381,\n\t\t3381\n\t],\n\t\"./prism-pug.min\": [\n\t\t63138,\n\t\t3138\n\t],\n\t\"./prism-pug.min.js\": [\n\t\t63138,\n\t\t3138\n\t],\n\t\"./prism-puppet\": [\n\t\t24319,\n\t\t4319\n\t],\n\t\"./prism-puppet.js\": [\n\t\t24319,\n\t\t4319\n\t],\n\t\"./prism-puppet.min\": [\n\t\t25834,\n\t\t5834\n\t],\n\t\"./prism-puppet.min.js\": [\n\t\t25834,\n\t\t5834\n\t],\n\t\"./prism-pure\": [\n\t\t9753,\n\t\t9753\n\t],\n\t\"./prism-pure.js\": [\n\t\t9753,\n\t\t9753\n\t],\n\t\"./prism-pure.min\": [\n\t\t44697,\n\t\t4697\n\t],\n\t\"./prism-pure.min.js\": [\n\t\t44697,\n\t\t4697\n\t],\n\t\"./prism-purebasic\": [\n\t\t92168,\n\t\t2168\n\t],\n\t\"./prism-purebasic.js\": [\n\t\t92168,\n\t\t2168\n\t],\n\t\"./prism-purebasic.min\": [\n\t\t57562,\n\t\t7562\n\t],\n\t\"./prism-purebasic.min.js\": [\n\t\t57562,\n\t\t7562\n\t],\n\t\"./prism-purescript\": [\n\t\t89485,\n\t\t9485\n\t],\n\t\"./prism-purescript.js\": [\n\t\t89485,\n\t\t9485\n\t],\n\t\"./prism-purescript.min\": [\n\t\t18472,\n\t\t8472\n\t],\n\t\"./prism-purescript.min.js\": [\n\t\t18472,\n\t\t8472\n\t],\n\t\"./prism-python\": [\n\t\t80366,\n\t\t366\n\t],\n\t\"./prism-python.js\": [\n\t\t80366,\n\t\t366\n\t],\n\t\"./prism-python.min\": [\n\t\t29208,\n\t\t9208\n\t],\n\t\"./prism-python.min.js\": [\n\t\t29208,\n\t\t9208\n\t],\n\t\"./prism-q\": [\n\t\t82939,\n\t\t2939\n\t],\n\t\"./prism-q.js\": [\n\t\t82939,\n\t\t2939\n\t],\n\t\"./prism-q.min\": [\n\t\t32055,\n\t\t2055\n\t],\n\t\"./prism-q.min.js\": [\n\t\t32055,\n\t\t2055\n\t],\n\t\"./prism-qml\": [\n\t\t84891,\n\t\t4891\n\t],\n\t\"./prism-qml.js\": [\n\t\t84891,\n\t\t4891\n\t],\n\t\"./prism-qml.min\": [\n\t\t81124,\n\t\t1124\n\t],\n\t\"./prism-qml.min.js\": [\n\t\t81124,\n\t\t1124\n\t],\n\t\"./prism-qore\": [\n\t\t94933,\n\t\t4933\n\t],\n\t\"./prism-qore.js\": [\n\t\t94933,\n\t\t4933\n\t],\n\t\"./prism-qore.min\": [\n\t\t93661,\n\t\t3661\n\t],\n\t\"./prism-qore.min.js\": [\n\t\t93661,\n\t\t3661\n\t],\n\t\"./prism-r\": [\n\t\t54803,\n\t\t4803\n\t],\n\t\"./prism-r.js\": [\n\t\t54803,\n\t\t4803\n\t],\n\t\"./prism-r.min\": [\n\t\t41704,\n\t\t1704\n\t],\n\t\"./prism-r.min.js\": [\n\t\t41704,\n\t\t1704\n\t],\n\t\"./prism-racket\": [\n\t\t24540,\n\t\t4540\n\t],\n\t\"./prism-racket.js\": [\n\t\t24540,\n\t\t4540\n\t],\n\t\"./prism-racket.min\": [\n\t\t87382,\n\t\t7382\n\t],\n\t\"./prism-racket.min.js\": [\n\t\t87382,\n\t\t7382\n\t],\n\t\"./prism-reason\": [\n\t\t28439,\n\t\t8439\n\t],\n\t\"./prism-reason.js\": [\n\t\t28439,\n\t\t8439\n\t],\n\t\"./prism-reason.min\": [\n\t\t47788,\n\t\t7788\n\t],\n\t\"./prism-reason.min.js\": [\n\t\t47788,\n\t\t7788\n\t],\n\t\"./prism-regex\": [\n\t\t49299,\n\t\t9299\n\t],\n\t\"./prism-regex.js\": [\n\t\t49299,\n\t\t9299\n\t],\n\t\"./prism-regex.min\": [\n\t\t64297,\n\t\t4297\n\t],\n\t\"./prism-regex.min.js\": [\n\t\t64297,\n\t\t4297\n\t],\n\t\"./prism-renpy\": [\n\t\t38512,\n\t\t8512\n\t],\n\t\"./prism-renpy.js\": [\n\t\t38512,\n\t\t8512\n\t],\n\t\"./prism-renpy.min\": [\n\t\t68169,\n\t\t8169\n\t],\n\t\"./prism-renpy.min.js\": [\n\t\t68169,\n\t\t8169\n\t],\n\t\"./prism-rest\": [\n\t\t76577,\n\t\t6577\n\t],\n\t\"./prism-rest.js\": [\n\t\t76577,\n\t\t6577\n\t],\n\t\"./prism-rest.min\": [\n\t\t22369,\n\t\t2369\n\t],\n\t\"./prism-rest.min.js\": [\n\t\t22369,\n\t\t2369\n\t],\n\t\"./prism-rip\": [\n\t\t40998,\n\t\t998\n\t],\n\t\"./prism-rip.js\": [\n\t\t40998,\n\t\t998\n\t],\n\t\"./prism-rip.min\": [\n\t\t44538,\n\t\t4538\n\t],\n\t\"./prism-rip.min.js\": [\n\t\t44538,\n\t\t4538\n\t],\n\t\"./prism-roboconf\": [\n\t\t94840,\n\t\t4840\n\t],\n\t\"./prism-roboconf.js\": [\n\t\t94840,\n\t\t4840\n\t],\n\t\"./prism-roboconf.min\": [\n\t\t33134,\n\t\t3134\n\t],\n\t\"./prism-roboconf.min.js\": [\n\t\t33134,\n\t\t3134\n\t],\n\t\"./prism-robotframework\": [\n\t\t23449,\n\t\t3449\n\t],\n\t\"./prism-robotframework.js\": [\n\t\t23449,\n\t\t3449\n\t],\n\t\"./prism-robotframework.min\": [\n\t\t9611,\n\t\t9611\n\t],\n\t\"./prism-robotframework.min.js\": [\n\t\t9611,\n\t\t9611\n\t],\n\t\"./prism-ruby\": [\n\t\t59385,\n\t\t9385\n\t],\n\t\"./prism-ruby.js\": [\n\t\t59385,\n\t\t9385\n\t],\n\t\"./prism-ruby.min\": [\n\t\t38751,\n\t\t8751\n\t],\n\t\"./prism-ruby.min.js\": [\n\t\t38751,\n\t\t8751\n\t],\n\t\"./prism-rust\": [\n\t\t70767,\n\t\t767\n\t],\n\t\"./prism-rust.js\": [\n\t\t70767,\n\t\t767\n\t],\n\t\"./prism-rust.min\": [\n\t\t60983,\n\t\t983\n\t],\n\t\"./prism-rust.min.js\": [\n\t\t60983,\n\t\t983\n\t],\n\t\"./prism-sas\": [\n\t\t71384,\n\t\t1384\n\t],\n\t\"./prism-sas.js\": [\n\t\t71384,\n\t\t1384\n\t],\n\t\"./prism-sas.min\": [\n\t\t8920,\n\t\t8920\n\t],\n\t\"./prism-sas.min.js\": [\n\t\t8920,\n\t\t8920\n\t],\n\t\"./prism-sass\": [\n\t\t89865,\n\t\t9865\n\t],\n\t\"./prism-sass.js\": [\n\t\t89865,\n\t\t9865\n\t],\n\t\"./prism-sass.min\": [\n\t\t23683,\n\t\t3683\n\t],\n\t\"./prism-sass.min.js\": [\n\t\t23683,\n\t\t3683\n\t],\n\t\"./prism-scala\": [\n\t\t12886,\n\t\t2886\n\t],\n\t\"./prism-scala.js\": [\n\t\t12886,\n\t\t2886\n\t],\n\t\"./prism-scala.min\": [\n\t\t57239,\n\t\t7239\n\t],\n\t\"./prism-scala.min.js\": [\n\t\t57239,\n\t\t7239\n\t],\n\t\"./prism-scheme\": [\n\t\t51412,\n\t\t1412\n\t],\n\t\"./prism-scheme.js\": [\n\t\t51412,\n\t\t1412\n\t],\n\t\"./prism-scheme.min\": [\n\t\t25781,\n\t\t5781\n\t],\n\t\"./prism-scheme.min.js\": [\n\t\t25781,\n\t\t5781\n\t],\n\t\"./prism-scss\": [\n\t\t92447,\n\t\t2447\n\t],\n\t\"./prism-scss.js\": [\n\t\t92447,\n\t\t2447\n\t],\n\t\"./prism-scss.min\": [\n\t\t9578,\n\t\t9578\n\t],\n\t\"./prism-scss.min.js\": [\n\t\t9578,\n\t\t9578\n\t],\n\t\"./prism-shell-session\": [\n\t\t42963,\n\t\t2963\n\t],\n\t\"./prism-shell-session.js\": [\n\t\t42963,\n\t\t2963\n\t],\n\t\"./prism-shell-session.min\": [\n\t\t98863,\n\t\t8863\n\t],\n\t\"./prism-shell-session.min.js\": [\n\t\t98863,\n\t\t8863\n\t],\n\t\"./prism-smali\": [\n\t\t10509,\n\t\t509\n\t],\n\t\"./prism-smali.js\": [\n\t\t10509,\n\t\t509\n\t],\n\t\"./prism-smali.min\": [\n\t\t51406,\n\t\t1406\n\t],\n\t\"./prism-smali.min.js\": [\n\t\t51406,\n\t\t1406\n\t],\n\t\"./prism-smalltalk\": [\n\t\t22738,\n\t\t2738\n\t],\n\t\"./prism-smalltalk.js\": [\n\t\t22738,\n\t\t2738\n\t],\n\t\"./prism-smalltalk.min\": [\n\t\t1122,\n\t\t1122\n\t],\n\t\"./prism-smalltalk.min.js\": [\n\t\t1122,\n\t\t1122\n\t],\n\t\"./prism-smarty\": [\n\t\t89281,\n\t\t9281\n\t],\n\t\"./prism-smarty.js\": [\n\t\t89281,\n\t\t9281\n\t],\n\t\"./prism-smarty.min\": [\n\t\t58794,\n\t\t8794\n\t],\n\t\"./prism-smarty.min.js\": [\n\t\t58794,\n\t\t8794\n\t],\n\t\"./prism-sml\": [\n\t\t9983,\n\t\t9983\n\t],\n\t\"./prism-sml.js\": [\n\t\t9983,\n\t\t9983\n\t],\n\t\"./prism-sml.min\": [\n\t\t60332,\n\t\t332\n\t],\n\t\"./prism-sml.min.js\": [\n\t\t60332,\n\t\t332\n\t],\n\t\"./prism-solidity\": [\n\t\t30893,\n\t\t893\n\t],\n\t\"./prism-solidity.js\": [\n\t\t30893,\n\t\t893\n\t],\n\t\"./prism-solidity.min\": [\n\t\t3648,\n\t\t3648\n\t],\n\t\"./prism-solidity.min.js\": [\n\t\t3648,\n\t\t3648\n\t],\n\t\"./prism-solution-file\": [\n\t\t37485,\n\t\t7485\n\t],\n\t\"./prism-solution-file.js\": [\n\t\t37485,\n\t\t7485\n\t],\n\t\"./prism-solution-file.min\": [\n\t\t44863,\n\t\t4863\n\t],\n\t\"./prism-solution-file.min.js\": [\n\t\t44863,\n\t\t4863\n\t],\n\t\"./prism-soy\": [\n\t\t84435,\n\t\t4435\n\t],\n\t\"./prism-soy.js\": [\n\t\t84435,\n\t\t4435\n\t],\n\t\"./prism-soy.min\": [\n\t\t95210,\n\t\t5210\n\t],\n\t\"./prism-soy.min.js\": [\n\t\t95210,\n\t\t5210\n\t],\n\t\"./prism-sparql\": [\n\t\t71327,\n\t\t1327\n\t],\n\t\"./prism-sparql.js\": [\n\t\t71327,\n\t\t1327\n\t],\n\t\"./prism-sparql.min\": [\n\t\t46811,\n\t\t6811\n\t],\n\t\"./prism-sparql.min.js\": [\n\t\t46811,\n\t\t6811\n\t],\n\t\"./prism-splunk-spl\": [\n\t\t612,\n\t\t612\n\t],\n\t\"./prism-splunk-spl.js\": [\n\t\t612,\n\t\t612\n\t],\n\t\"./prism-splunk-spl.min\": [\n\t\t34810,\n\t\t4810\n\t],\n\t\"./prism-splunk-spl.min.js\": [\n\t\t34810,\n\t\t4810\n\t],\n\t\"./prism-sqf\": [\n\t\t83113,\n\t\t3113\n\t],\n\t\"./prism-sqf.js\": [\n\t\t83113,\n\t\t3113\n\t],\n\t\"./prism-sqf.min\": [\n\t\t41970,\n\t\t1970\n\t],\n\t\"./prism-sqf.min.js\": [\n\t\t41970,\n\t\t1970\n\t],\n\t\"./prism-sql\": [\n\t\t35266,\n\t\t5266\n\t],\n\t\"./prism-sql.js\": [\n\t\t35266,\n\t\t5266\n\t],\n\t\"./prism-sql.min\": [\n\t\t82720,\n\t\t2720\n\t],\n\t\"./prism-sql.min.js\": [\n\t\t82720,\n\t\t2720\n\t],\n\t\"./prism-stan\": [\n\t\t65683,\n\t\t5683\n\t],\n\t\"./prism-stan.js\": [\n\t\t65683,\n\t\t5683\n\t],\n\t\"./prism-stan.min\": [\n\t\t54178,\n\t\t4178\n\t],\n\t\"./prism-stan.min.js\": [\n\t\t54178,\n\t\t4178\n\t],\n\t\"./prism-stylus\": [\n\t\t24906,\n\t\t4906\n\t],\n\t\"./prism-stylus.js\": [\n\t\t24906,\n\t\t4906\n\t],\n\t\"./prism-stylus.min\": [\n\t\t72660,\n\t\t2660\n\t],\n\t\"./prism-stylus.min.js\": [\n\t\t72660,\n\t\t2660\n\t],\n\t\"./prism-swift\": [\n\t\t90874,\n\t\t874\n\t],\n\t\"./prism-swift.js\": [\n\t\t90874,\n\t\t874\n\t],\n\t\"./prism-swift.min\": [\n\t\t39361,\n\t\t9361\n\t],\n\t\"./prism-swift.min.js\": [\n\t\t39361,\n\t\t9361\n\t],\n\t\"./prism-t4-cs\": [\n\t\t20601,\n\t\t601\n\t],\n\t\"./prism-t4-cs.js\": [\n\t\t20601,\n\t\t601\n\t],\n\t\"./prism-t4-cs.min\": [\n\t\t73233,\n\t\t3233\n\t],\n\t\"./prism-t4-cs.min.js\": [\n\t\t73233,\n\t\t3233\n\t],\n\t\"./prism-t4-templating\": [\n\t\t89239,\n\t\t9239\n\t],\n\t\"./prism-t4-templating.js\": [\n\t\t89239,\n\t\t9239\n\t],\n\t\"./prism-t4-templating.min\": [\n\t\t94413,\n\t\t4413\n\t],\n\t\"./prism-t4-templating.min.js\": [\n\t\t94413,\n\t\t4413\n\t],\n\t\"./prism-t4-vb\": [\n\t\t16241,\n\t\t6241\n\t],\n\t\"./prism-t4-vb.js\": [\n\t\t16241,\n\t\t6241\n\t],\n\t\"./prism-t4-vb.min\": [\n\t\t78305,\n\t\t8305\n\t],\n\t\"./prism-t4-vb.min.js\": [\n\t\t78305,\n\t\t8305\n\t],\n\t\"./prism-tap\": [\n\t\t46193,\n\t\t6193\n\t],\n\t\"./prism-tap.js\": [\n\t\t46193,\n\t\t6193\n\t],\n\t\"./prism-tap.min\": [\n\t\t85599,\n\t\t5599\n\t],\n\t\"./prism-tap.min.js\": [\n\t\t85599,\n\t\t5599\n\t],\n\t\"./prism-tcl\": [\n\t\t1607,\n\t\t1607\n\t],\n\t\"./prism-tcl.js\": [\n\t\t1607,\n\t\t1607\n\t],\n\t\"./prism-tcl.min\": [\n\t\t96195,\n\t\t5513\n\t],\n\t\"./prism-tcl.min.js\": [\n\t\t96195,\n\t\t5513\n\t],\n\t\"./prism-textile\": [\n\t\t60075,\n\t\t75\n\t],\n\t\"./prism-textile.js\": [\n\t\t60075,\n\t\t75\n\t],\n\t\"./prism-textile.min\": [\n\t\t34966,\n\t\t4966\n\t],\n\t\"./prism-textile.min.js\": [\n\t\t34966,\n\t\t4966\n\t],\n\t\"./prism-toml\": [\n\t\t9930,\n\t\t9930\n\t],\n\t\"./prism-toml.js\": [\n\t\t9930,\n\t\t9930\n\t],\n\t\"./prism-toml.min\": [\n\t\t30485,\n\t\t485\n\t],\n\t\"./prism-toml.min.js\": [\n\t\t30485,\n\t\t485\n\t],\n\t\"./prism-tsx\": [\n\t\t21029,\n\t\t1029\n\t],\n\t\"./prism-tsx.js\": [\n\t\t21029,\n\t\t1029\n\t],\n\t\"./prism-tsx.min\": [\n\t\t44833,\n\t\t4833\n\t],\n\t\"./prism-tsx.min.js\": [\n\t\t44833,\n\t\t4833\n\t],\n\t\"./prism-tt2\": [\n\t\t37838,\n\t\t7838\n\t],\n\t\"./prism-tt2.js\": [\n\t\t37838,\n\t\t7838\n\t],\n\t\"./prism-tt2.min\": [\n\t\t55509,\n\t\t9366\n\t],\n\t\"./prism-tt2.min.js\": [\n\t\t55509,\n\t\t9366\n\t],\n\t\"./prism-turtle\": [\n\t\t68092,\n\t\t8092\n\t],\n\t\"./prism-turtle.js\": [\n\t\t68092,\n\t\t8092\n\t],\n\t\"./prism-turtle.min\": [\n\t\t10034,\n\t\t34\n\t],\n\t\"./prism-turtle.min.js\": [\n\t\t10034,\n\t\t34\n\t],\n\t\"./prism-twig\": [\n\t\t71429,\n\t\t1429\n\t],\n\t\"./prism-twig.js\": [\n\t\t71429,\n\t\t1429\n\t],\n\t\"./prism-twig.min\": [\n\t\t33161,\n\t\t3161\n\t],\n\t\"./prism-twig.min.js\": [\n\t\t33161,\n\t\t3161\n\t],\n\t\"./prism-typescript\": [\n\t\t96836,\n\t\t6836\n\t],\n\t\"./prism-typescript.js\": [\n\t\t96836,\n\t\t6836\n\t],\n\t\"./prism-typescript.min\": [\n\t\t76456,\n\t\t6456\n\t],\n\t\"./prism-typescript.min.js\": [\n\t\t76456,\n\t\t6456\n\t],\n\t\"./prism-typoscript\": [\n\t\t14032,\n\t\t4032\n\t],\n\t\"./prism-typoscript.js\": [\n\t\t14032,\n\t\t4032\n\t],\n\t\"./prism-typoscript.min\": [\n\t\t42432,\n\t\t2432\n\t],\n\t\"./prism-typoscript.min.js\": [\n\t\t42432,\n\t\t2432\n\t],\n\t\"./prism-unrealscript\": [\n\t\t10196,\n\t\t196\n\t],\n\t\"./prism-unrealscript.js\": [\n\t\t10196,\n\t\t196\n\t],\n\t\"./prism-unrealscript.min\": [\n\t\t79133,\n\t\t9133\n\t],\n\t\"./prism-unrealscript.min.js\": [\n\t\t79133,\n\t\t9133\n\t],\n\t\"./prism-vala\": [\n\t\t30035,\n\t\t35\n\t],\n\t\"./prism-vala.js\": [\n\t\t30035,\n\t\t35\n\t],\n\t\"./prism-vala.min\": [\n\t\t67524,\n\t\t7524\n\t],\n\t\"./prism-vala.min.js\": [\n\t\t67524,\n\t\t7524\n\t],\n\t\"./prism-vbnet\": [\n\t\t65398,\n\t\t5398\n\t],\n\t\"./prism-vbnet.js\": [\n\t\t65398,\n\t\t5398\n\t],\n\t\"./prism-vbnet.min\": [\n\t\t74819,\n\t\t9588\n\t],\n\t\"./prism-vbnet.min.js\": [\n\t\t74819,\n\t\t9588\n\t],\n\t\"./prism-velocity\": [\n\t\t70981,\n\t\t981\n\t],\n\t\"./prism-velocity.js\": [\n\t\t70981,\n\t\t981\n\t],\n\t\"./prism-velocity.min\": [\n\t\t76627,\n\t\t6627\n\t],\n\t\"./prism-velocity.min.js\": [\n\t\t76627,\n\t\t6627\n\t],\n\t\"./prism-verilog\": [\n\t\t47251,\n\t\t7251\n\t],\n\t\"./prism-verilog.js\": [\n\t\t47251,\n\t\t7251\n\t],\n\t\"./prism-verilog.min\": [\n\t\t93937,\n\t\t3937\n\t],\n\t\"./prism-verilog.min.js\": [\n\t\t93937,\n\t\t3937\n\t],\n\t\"./prism-vhdl\": [\n\t\t38564,\n\t\t8564\n\t],\n\t\"./prism-vhdl.js\": [\n\t\t38564,\n\t\t8564\n\t],\n\t\"./prism-vhdl.min\": [\n\t\t377,\n\t\t377\n\t],\n\t\"./prism-vhdl.min.js\": [\n\t\t377,\n\t\t377\n\t],\n\t\"./prism-vim\": [\n\t\t34438,\n\t\t4438\n\t],\n\t\"./prism-vim.js\": [\n\t\t34438,\n\t\t4438\n\t],\n\t\"./prism-vim.min\": [\n\t\t34836,\n\t\t4836\n\t],\n\t\"./prism-vim.min.js\": [\n\t\t34836,\n\t\t4836\n\t],\n\t\"./prism-visual-basic\": [\n\t\t83082,\n\t\t3082\n\t],\n\t\"./prism-visual-basic.js\": [\n\t\t83082,\n\t\t3082\n\t],\n\t\"./prism-visual-basic.min\": [\n\t\t67964,\n\t\t7964\n\t],\n\t\"./prism-visual-basic.min.js\": [\n\t\t67964,\n\t\t7964\n\t],\n\t\"./prism-warpscript\": [\n\t\t10008,\n\t\t8\n\t],\n\t\"./prism-warpscript.js\": [\n\t\t10008,\n\t\t8\n\t],\n\t\"./prism-warpscript.min\": [\n\t\t80552,\n\t\t552\n\t],\n\t\"./prism-warpscript.min.js\": [\n\t\t80552,\n\t\t552\n\t],\n\t\"./prism-wasm\": [\n\t\t5774,\n\t\t5774\n\t],\n\t\"./prism-wasm.js\": [\n\t\t5774,\n\t\t5774\n\t],\n\t\"./prism-wasm.min\": [\n\t\t53994,\n\t\t3994\n\t],\n\t\"./prism-wasm.min.js\": [\n\t\t53994,\n\t\t3994\n\t],\n\t\"./prism-wiki\": [\n\t\t31693,\n\t\t1693\n\t],\n\t\"./prism-wiki.js\": [\n\t\t31693,\n\t\t1693\n\t],\n\t\"./prism-wiki.min\": [\n\t\t11589,\n\t\t1589\n\t],\n\t\"./prism-wiki.min.js\": [\n\t\t11589,\n\t\t1589\n\t],\n\t\"./prism-xeora\": [\n\t\t10504,\n\t\t504\n\t],\n\t\"./prism-xeora.js\": [\n\t\t10504,\n\t\t504\n\t],\n\t\"./prism-xeora.min\": [\n\t\t30646,\n\t\t646\n\t],\n\t\"./prism-xeora.min.js\": [\n\t\t30646,\n\t\t646\n\t],\n\t\"./prism-xml-doc\": [\n\t\t62349,\n\t\t2349\n\t],\n\t\"./prism-xml-doc.js\": [\n\t\t62349,\n\t\t2349\n\t],\n\t\"./prism-xml-doc.min\": [\n\t\t19883,\n\t\t9883\n\t],\n\t\"./prism-xml-doc.min.js\": [\n\t\t19883,\n\t\t9883\n\t],\n\t\"./prism-xojo\": [\n\t\t22449,\n\t\t2449\n\t],\n\t\"./prism-xojo.js\": [\n\t\t22449,\n\t\t2449\n\t],\n\t\"./prism-xojo.min\": [\n\t\t37315,\n\t\t7315\n\t],\n\t\"./prism-xojo.min.js\": [\n\t\t37315,\n\t\t7315\n\t],\n\t\"./prism-xquery\": [\n\t\t19938,\n\t\t9938\n\t],\n\t\"./prism-xquery.js\": [\n\t\t19938,\n\t\t9938\n\t],\n\t\"./prism-xquery.min\": [\n\t\t25558,\n\t\t5558\n\t],\n\t\"./prism-xquery.min.js\": [\n\t\t25558,\n\t\t5558\n\t],\n\t\"./prism-yaml\": [\n\t\t73358,\n\t\t3358\n\t],\n\t\"./prism-yaml.js\": [\n\t\t73358,\n\t\t3358\n\t],\n\t\"./prism-yaml.min\": [\n\t\t28831,\n\t\t8831\n\t],\n\t\"./prism-yaml.min.js\": [\n\t\t28831,\n\t\t8831\n\t],\n\t\"./prism-yang\": [\n\t\t2982,\n\t\t2982\n\t],\n\t\"./prism-yang.js\": [\n\t\t2982,\n\t\t2982\n\t],\n\t\"./prism-yang.min\": [\n\t\t6959,\n\t\t6959\n\t],\n\t\"./prism-yang.min.js\": [\n\t\t6959,\n\t\t6959\n\t],\n\t\"./prism-zig\": [\n\t\t857,\n\t\t857\n\t],\n\t\"./prism-zig.js\": [\n\t\t857,\n\t\t857\n\t],\n\t\"./prism-zig.min\": [\n\t\t87975,\n\t\t7975\n\t],\n\t\"./prism-zig.min.js\": [\n\t\t87975,\n\t\t7975\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 96316;\nmodule.exports = webpackAsyncContext;"],"sourceRoot":""}